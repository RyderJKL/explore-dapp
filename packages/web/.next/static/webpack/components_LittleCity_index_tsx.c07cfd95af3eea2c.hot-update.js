"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_LittleCity_index_tsx",{

/***/ "./components/LittleCity/index.tsx":
/*!*****************************************!*\
  !*** ./components/LittleCity/index.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LittleCity\": function() { return /* binding */ LittleCity; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _index_module_css__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./index.module.css */ \"./components/LittleCity/index.module.css\");\n/* harmony import */ var _index_module_css__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_index_module_css__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var claygl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! claygl */ \"../../node_modules/claygl/src/claygl.js\");\n/* harmony import */ var geometry_extrude__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! geometry-extrude */ \"../../node_modules/geometry-extrude/src/main.js\");\n/* harmony import */ var pbf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pbf */ \"../../node_modules/pbf/index.js\");\n/* harmony import */ var pbf__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pbf__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lru-cache */ \"../../node_modules/lru-cache/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var quickhull3d__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! quickhull3d */ \"../../node_modules/quickhull3d/dist/index.js\");\n/* harmony import */ var quickhull3d__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(quickhull3d__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jszip */ \"../../node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var polybooljs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! polybooljs */ \"../../node_modules/polybooljs/index.js\");\n/* harmony import */ var polybooljs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(polybooljs__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _lib_vec2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/vec2 */ \"./components/LittleCity/lib/vec2.js\");\n/* harmony import */ var claygl_advanced_renderer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! claygl-advanced-renderer */ \"../../node_modules/claygl-advanced-renderer/index.js\");\n/* harmony import */ var maptalks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! maptalks */ \"../../node_modules/maptalks/dist/maptalks.es-bundler.js\");\n/* harmony import */ var maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! maptalks/dist/maptalks.css */ \"../../node_modules/maptalks/dist/maptalks.css\");\n/* harmony import */ var maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _lib_toOBJ__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/toOBJ */ \"./components/LittleCity/lib/toOBJ.js\");\n/* harmony import */ var _lib_tessellate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/tessellate */ \"./components/LittleCity/lib/tessellate.js\");\n/* harmony import */ var _lib_distortion__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/distortion */ \"./components/LittleCity/lib/distortion.js\");\nvar _this = undefined;\n\n\n\n\n\n\n\n// // import * as dat from \"dat.gui\";\n\n\n\n// // for PolyBool\n\n// // for vec2\n\n// // for ClayAdvancedRenderer\n\n// // for maptalks\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar VectorTile = (__webpack_require__(/*! @mapbox/vector-tile */ \"../../node_modules/@mapbox/vector-tile/index.js\").VectorTile);\nvar mvtCache = new (lru_cache__WEBPACK_IMPORTED_MODULE_4___default())({\n    max: 50\n});\nvar DEFAULT_LNG = -74.0130345;\nvar DEFAULT_LAT = 40.7063516;\nvar DEFAULT_CONFIG = {\n    radius: 60,\n    curveness: 1,\n    showEarth: true,\n    earthDepth: 4,\n    earthColor: \"#c2ebb6\",\n    showBuildings: true,\n    buildingsColor: \"#fab8b8\",\n    showRoads: true,\n    roadsColor: \"#828282\",\n    showWater: true,\n    waterColor: \"#80a9d7\",\n    showCloud: true,\n    cloudColor: \"#fff\",\n    rotateSpeed: 0,\n    sky: true\n};\nvar searchStr = location.search.slice(1);\nvar searchItems = searchStr.split(\"&\");\nvar urlOpts = {};\nsearchItems.forEach(function(item) {\n    var arr = item.split(\"=\");\n    var key = arr[0];\n    var val = arr[1] || true;\n    urlOpts[key] = val;\n});\nurlOpts.lng = urlOpts.lng || DEFAULT_LNG;\nurlOpts.lat = urlOpts.lat || DEFAULT_LAT;\nfunction makeUrl() {\n    var diffConfig = {};\n    for(var key in config){\n        if (config[key] !== DEFAULT_CONFIG[key]) {\n            diffConfig[key] = config[key];\n        }\n    }\n    urlOpts.config = encodeURIComponent(JSON.stringify(diffConfig));\n    var urlItems = [];\n    for(var key1 in urlOpts){\n        urlItems.push(key1 + \"=\" + urlOpts[key1]);\n    }\n    return \"./?\" + urlItems.join(\"&\");\n}\nvar IS_TILE_STYLE = urlOpts.style === \"tile\";\n// const TILE_SIZE = IS_TILE_STYLE ? 512 : 256;\nvar TILE_SIZE = 256;\nvar config = Object.assign({}, DEFAULT_CONFIG);\ntry {\n    Object.assign(config, JSON.parse(decodeURIComponent(urlOpts.config || \"{}\")));\n} catch (e) {}\nvar actions = {\n    downloadOBJ: function() {\n        var downloading = false;\n        return function() {\n            if (downloading) {\n                return;\n            }\n            var ref = (0,_lib_toOBJ__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(app.scene, {\n                mtllib: \"city\"\n            }), obj = ref.obj, mtl = ref.mtl;\n            var zip = new (jszip__WEBPACK_IMPORTED_MODULE_6___default())();\n            zip.file(\"city.obj\", obj);\n            zip.file(\"city.mtl\", mtl);\n            zip.generateAsync({\n                type: \"blob\",\n                compression: \"DEFLATE\"\n            }).then(function(content) {\n                downloading = false;\n                saveAs(content, \"city.zip\");\n            }).catch(function(e1) {\n                downloading = false;\n                console.error(e1.toString());\n            });\n            // Behind all processing in case some errror happens.\n            downloading = true;\n        };\n    }(),\n    randomCloud: function() {\n        app.methods.generateClouds();\n    },\n    reset: function() {\n        Object.assign(config, DEFAULT_CONFIG);\n        ui.updateDisplay();\n        window.location = makeUrl();\n    }\n};\nvar mvtUrlTpl = \"https://tile.nextzen.org/tilezen/vector/v1/\".concat(TILE_SIZE, \"/all/{z}/{x}/{y}.mvt?api_key=EWFsMD1DSEysLDWd2hj2cw\");\nvar app = null;\nvar map = null;\nvar mainLayer = null;\nvar initMap = function() {\n    if (!mainLayer) return;\n    mainLayer = new maptalks__WEBPACK_IMPORTED_MODULE_10__.TileLayer(\"base\", {\n        tileSize: [\n            TILE_SIZE,\n            TILE_SIZE\n        ],\n        // urlTemplate: \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\",\n        urlTemplate: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        subdomains: [\n            \"a\",\n            \"b\",\n            \"c\"\n        ]\n    });\n    map = new maptalks__WEBPACK_IMPORTED_MODULE_10__.Map(\"map-main\", {\n        // center: [-0.113049, 51.498568],\n        center: [\n            -73.97332,\n            40.76462\n        ],\n        // center: [urlOpts.lng, urlOpts.lat],\n        zoom: 16,\n        baseLayer: mainLayer\n    });\n    map.setMinZoom(16);\n    map.setMaxZoom(16);\n};\nvar faces = [\n    \"pz\",\n    \"px\",\n    \"nz\",\n    \"py\",\n    \"nx\",\n    \"ny\"\n];\nvar vectorElements = [\n    {\n        type: \"buildings\",\n        geometryType: \"polygon\",\n        depth: function(feature) {\n            return (feature.properties.height || 30) / 10 + 1;\n        }\n    },\n    {\n        type: \"roads\",\n        geometryType: \"polyline\",\n        depth: 1.2\n    },\n    {\n        type: \"water\",\n        geometryType: \"polygon\",\n        depth: 1\n    }, \n];\nfunction iterateFeatureCoordinates(feature, cb) {\n    var geometry = feature.geometry;\n    if (geometry.type === \"MultiPolygon\") {\n        for(var i = 0; i < geometry.coordinates.length; i++){\n            for(var k = 0; k < geometry.coordinates[i].length; k++){\n                geometry.coordinates[i][k] = cb(geometry.coordinates[i][k]);\n            }\n        }\n    } else if (geometry.type === \"MultiLineString\" || geometry.type === \"Polygon\") {\n        for(var i1 = 0; i1 < geometry.coordinates.length; i1++){\n            geometry.coordinates[i1] = cb(geometry.coordinates[i1]);\n        }\n    } else if (geometry.type === \"LineString\") {\n        geometry.coordinates = cb(geometry.coordinates);\n    }\n}\nfunction subdivideLongEdges(features, maxDist) {\n    var addPoints = function addPoints(points) {\n        var newPoints = [];\n        for(var i = 0; i < points.length - 1; i++){\n            _lib_vec2__WEBPACK_IMPORTED_MODULE_8__[\"default\"].sub(v, points[i + 1], points[i]);\n            var dist = _lib_vec2__WEBPACK_IMPORTED_MODULE_8__[\"default\"].len(v);\n            _lib_vec2__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scale(v, v, 1 / dist);\n            newPoints.push(points[i]);\n            for(var d = maxDist; d < dist; d += maxDist){\n                newPoints.push(_lib_vec2__WEBPACK_IMPORTED_MODULE_8__[\"default\"].scaleAndAdd([], points[i], v, d));\n            }\n        }\n        newPoints.push(points[points.length - 1]);\n        return newPoints;\n    };\n    var v = [];\n    features.forEach(function(feature) {\n        iterateFeatureCoordinates(feature, addPoints);\n    });\n}\nfunction scaleFeature(feature, offset, scale) {\n    var scalePoints = function scalePoints(pts) {\n        for(var i = 0; i < pts.length; i++){\n            pts[i][0] = (pts[i][0] + offset[0]) * scale[0];\n            pts[i][1] = (pts[i][1] + offset[1]) * scale[1];\n        }\n        return pts;\n    };\n    iterateFeatureCoordinates(feature, scalePoints);\n}\nfunction unionComplexPolygons(features) {\n    var mergedCoordinates = [];\n    features.forEach(function(feature) {\n        var geometry = feature.geometry;\n        if (geometry.type === \"Polygon\") {\n            mergedCoordinates.push(feature.geometry.coordinates);\n        } else if (geometry.type === \"MultiPolygon\") {\n            for(var i = 0; i < feature.geometry.coordinates.length; i++){\n                mergedCoordinates.push(feature.geometry.coordinates[i]);\n            }\n        }\n    });\n    var poly = PolyBool.polygonFromGeoJSON({\n        type: \"MultiPolygon\",\n        coordinates: mergedCoordinates\n    });\n    return {\n        type: \"Feature\",\n        properties: {},\n        geometry: PolyBool.polygonToGeoJSON(poly)\n    };\n}\nfunction cullBuildingPolygns(features) {\n    var earthCoords = [\n        getRectCoords(earthRect)\n    ];\n    features.forEach(function(feature) {\n        if (feature.geometry && (feature.geometry.type === \"Polygon\" || feature.geometry.type === \"MultiPolygon\")) {\n            var poly = PolyBool.polygonFromGeoJSON(feature.geometry);\n            var intersectedPoly = PolyBool.intersect({\n                regions: earthCoords,\n                inverse: false\n            }, poly);\n            feature.geometry = PolyBool.polygonToGeoJSON(intersectedPoly);\n            if (!feature.geometry.coordinates.length) {\n                feature.geometry = null;\n            }\n        }\n    });\n}\nfunction unionRect(out, a, b) {\n    var x = Math.min(a.x, b.x);\n    var y = Math.min(a.y, b.y);\n    out.x = x;\n    out.y = y;\n    out.width = Math.max(a.width + a.x, b.width + b.x) - x;\n    out.height = Math.max(a.height + a.y, b.height + b.y) - y;\n}\nvar width = 55;\nvar height = 58.5;\nvar earthRect = {\n    x: -width / 2,\n    y: -height / 2,\n    width: width,\n    height: height\n};\nfunction getRectCoords(rect) {\n    return [\n        [\n            rect.x,\n            rect.y\n        ],\n        [\n            rect.x + rect.width,\n            rect.y\n        ],\n        [\n            rect.x + rect.width,\n            rect.y + rect.height\n        ],\n        [\n            rect.x,\n            rect.y + rect.height\n        ],\n        [\n            rect.x,\n            rect.y\n        ], \n    ];\n}\nvar initClay = function(containerDom) {\n    console.log(\"initClay\");\n    if (!containerDom) return;\n    console.log(containerDom, \"containerDom\");\n    // let camera: typeof Orthographic | typeof Perspective;\n    // let cube: Mesh;\n    // let mainLight: typeof Directional;\n    var app1 = claygl__WEBPACK_IMPORTED_MODULE_15__.application.create(containerDom, {\n        autoRender: false,\n        devicePixelRatio: 1,\n        init: function init(app2) {\n            var _this1 = this;\n            this._advRenderer = new claygl_advanced_renderer__WEBPACK_IMPORTED_MODULE_9__[\"default\"](app2.renderer, app2.scene, app2.timeline, {\n                shadow: true,\n                temporalSuperSampling: {\n                    enable: true,\n                    dynamic: false\n                },\n                postEffect: {\n                    enable: true,\n                    bloom: {\n                        enable: false\n                    },\n                    screenSpaceAmbientOcclusion: {\n                        enable: true,\n                        intensity: 1.1,\n                        radius: 5\n                    },\n                    FXAA: {\n                        enable: false\n                    }\n                }\n            });\n            this._advRenderer.setShadow({\n                kernelSize: 10,\n                blurSize: 3\n            });\n            var camera = app2.createCamera([\n                0,\n                0,\n                170\n            ], [\n                0,\n                0,\n                0\n            ], IS_TILE_STYLE ? \"ortho\" : \"perspective\");\n            if (IS_TILE_STYLE) {\n                camera.top = 50;\n                camera.bottom = -50;\n                camera.left = -50 * app2.renderer.getViewportAspect();\n                camera.right = 50 * app2.renderer.getViewportAspect();\n                camera.near = 0;\n                camera.far = 1000;\n            }\n            camera.update();\n            this._camera = camera;\n            this._earthNode = app2.createNode();\n            this._cloudsNode = app2.createNode();\n            this._elementsNodes = {};\n            this._elementsMaterials = {};\n            this._diffuseTex = app2.loadTextureSync(\"./asset/paper-detail.png\", {\n                anisotropic: 8\n            });\n            vectorElements.forEach(function(el) {\n                _this1._elementsNodes[el.type] = app2.createNode();\n                if (IS_TILE_STYLE) {\n                    _this1._elementsNodes[el.type].rotation.rotateX(-Math.PI / 2);\n                }\n                _this1._elementsMaterials[el.type] = app2.createMaterial({\n                    diffuseMap: _this1._diffuseTex,\n                    uvRepeat: [\n                        10,\n                        10\n                    ],\n                    color: config[el.type + \"Color\"],\n                    roughness: 1\n                });\n                _this1._elementsMaterials[el.type].name = \"mat_\" + el.type;\n            });\n            var light = app2.createDirectionalLight([\n                -1,\n                -1,\n                -1\n            ], \"#fff\");\n            light.shadowResolution = 2048;\n            light.shadowBias = IS_TILE_STYLE ? 0.01 : 0.0005;\n            this._control = new claygl__WEBPACK_IMPORTED_MODULE_15__.plugin.OrbitControl({\n                target: camera,\n                domElement: app2.container,\n                timeline: app2.timeline,\n                rotateSensitivity: 2,\n                orthographicAspect: app2.renderer.getViewportAspect()\n            });\n            if (IS_TILE_STYLE) {\n                this._control.setOption({\n                    beta: 45,\n                    alpha: 30,\n                    minAlpha: 10,\n                    maxAlpha: 80\n                });\n            }\n            this._control.on(\"update\", function() {\n                _this1._advRenderer.render();\n            });\n            if (!IS_TILE_STYLE) {\n                app2.methods.updateEarthSphere();\n            }\n            app2.methods.updateElements();\n            app2.methods.updateVisibility();\n            app2.methods.generateClouds();\n            this._advRenderer.render();\n            return app2.createAmbientCubemapLight(\"./asset/Grand_Canyon_C.hdr\", 0.2, 0.8, 1).then(function(result) {\n                var skybox = new claygl__WEBPACK_IMPORTED_MODULE_15__.plugin.Skybox({\n                    environmentMap: result.specular.cubemap,\n                    scene: app2.scene\n                });\n                skybox.material.set(\"lod\", 2);\n                _this1._skybox = skybox;\n                _this1._advRenderer.render();\n            });\n        },\n        methods: {\n            updateEarthSphere: function updateEarthSphere(app3) {\n                var _this2 = this;\n                this._earthNode.removeAll();\n                var earthMat = app3.createMaterial({\n                    roughness: 1,\n                    color: config.earthColor,\n                    diffuseMap: this._diffuseTex,\n                    uvRepeat: [\n                        2,\n                        2\n                    ]\n                });\n                earthMat.name = \"mat_earth\";\n                faces.forEach(function(face) {\n                    var planeGeo = new claygl__WEBPACK_IMPORTED_MODULE_15__.geometry.Plane({\n                        widthSegments: 20,\n                        heightSegments: 20\n                    });\n                    app3.createMesh(planeGeo, earthMat, _this2._earthNode);\n                    (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(planeGeo.attributes.position.value, {\n                        x: -1,\n                        y: -1,\n                        width: 2,\n                        height: 2\n                    }, config.radius, config.curveness, face);\n                    planeGeo.generateVertexNormals();\n                });\n                this._cloudsNode.eachChild(function(cloudMesh) {\n                    var dist = cloudMesh.height + config.radius / Math.sqrt(2);\n                    cloudMesh.position.normalize().scale(dist);\n                });\n                this._advRenderer.render();\n            },\n            updateEarthGround: function updateEarthGround(app4, rect) {\n                this._earthNode.removeAll();\n                var ref = (0,geometry_extrude__WEBPACK_IMPORTED_MODULE_2__.extrudePolygon)([\n                    [\n                        getRectCoords(earthRect)\n                    ]\n                ], {\n                    depth: config.earthDepth\n                }), position = ref.position, uv = ref.uv, normal = ref.normal, indices = ref.indices;\n                var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                geo.attributes.position.value = position;\n                geo.attributes.normal.value = normal;\n                geo.attributes.texcoord0.value = uv;\n                geo.indices = indices;\n                geo.updateBoundingBox();\n                var mesh = app4.createMesh(geo, {\n                    nmae: \"mat_earth\",\n                    roughness: 1,\n                    color: config.earthColor,\n                    diffuseMap: this._diffuseTex,\n                    uvRepeat: [\n                        2,\n                        2\n                    ]\n                }, this._earthNode);\n                mesh.rotation.rotateX(-Math.PI / 2);\n                mesh.position.y = -config.earthDepth + 0.1;\n                app4.methods.render();\n            },\n            updateElements: function updateElements(app5) {\n                var _this4 = this;\n                var createElementMesh = function createElementMesh(elConfig, features, boundingRect, idx) {\n                    if (!IS_TILE_STYLE && elConfig.type === \"roads\" || elConfig.type === \"water\") {\n                        subdivideLongEdges(features, 4);\n                    }\n                    var result = (0,geometry_extrude__WEBPACK_IMPORTED_MODULE_2__.extrudeGeoJSON)({\n                        features: features\n                    }, {\n                        lineWidth: 0.5,\n                        excludeBottom: true,\n                        simplify: IS_TILE_STYLE || elConfig.type === \"buildings\" ? 0.01 : 0,\n                        depth: elConfig.depth\n                    });\n                    var poly = result[elConfig.geometryType];\n                    var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                    if (!IS_TILE_STYLE && elConfig.type === \"water\") {\n                        var ref = (0,_lib_tessellate__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(poly.position, poly.indices, 5), indices = ref.indices, position = ref.position;\n                        poly.indices = indices;\n                        poly.position = position;\n                    }\n                    geo.attributes.texcoord0.value = poly.uv;\n                    geo.indices = poly.indices;\n                    var mesh = app5.createMesh(geo, elementsMaterials[elConfig.type], elementsNodes[elConfig.type]);\n                    if (elConfig.type === \"buildings\") {\n                        var positionAnimateFrom = new Float32Array(poly.position);\n                        var positionAnimateTo = poly.position;\n                        for(var i2 = 0; i2 < positionAnimateFrom.length; i2 += 3){\n                            var z = positionAnimateFrom[i2 + 2];\n                            if (z > 0) {\n                                positionAnimateFrom[i2 + 2] = 1;\n                            }\n                        }\n                        if (!IS_TILE_STYLE) {\n                            positionAnimateTo = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(poly.position, boundingRect, config.radius, config.curveness, faces[idx]);\n                            positionAnimateFrom = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(positionAnimateFrom, boundingRect, config.radius, config.curveness, faces[idx]);\n                        }\n                        geo.attributes.position.value = positionAnimateTo;\n                        geo.generateVertexNormals();\n                        geo.updateBoundingBox();\n                        var transitionPosition = new Float32Array(positionAnimateFrom);\n                        geo.attributes.position.value = transitionPosition;\n                        mesh.invisible = true;\n                        var obj = {\n                            p: 0\n                        };\n                        buildingAnimators[faces[idx]] = app5.timeline.animate(obj).when(2000, {\n                            p: 1\n                        }).delay(1000).during(function(obj, p) {\n                            mesh.invisible = false;\n                            for(var i = 0; i < transitionPosition.length; i++){\n                                var a = positionAnimateFrom[i];\n                                var b = positionAnimateTo[i];\n                                transitionPosition[i] = (b - a) * p + a;\n                            }\n                            geo.dirty();\n                            advRenderer.render();\n                        }).start(\"elasticOut\");\n                    } else {\n                        if (IS_TILE_STYLE) {\n                            geo.attributes.position.value = poly.position;\n                        } else {\n                            geo.attributes.position.value = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(poly.position, boundingRect, config.radius, config.curveness, faces[idx]);\n                        }\n                        geo.generateVertexNormals();\n                        geo.updateBoundingBox();\n                    }\n                    return {\n                        boundingRect: poly.boundingRect\n                    };\n                };\n                this._id = Math.random();\n                var advRenderer = this._advRenderer;\n                var elementsNodes = this._elementsNodes;\n                var elementsMaterials = this._elementsMaterials;\n                for(var key3 in elementsNodes){\n                    elementsNodes[key3].removeAll();\n                }\n                for(var key2 in this._buildingAnimators){\n                    this._buildingAnimators[key2].stop();\n                }\n                var buildingAnimators = this._buildingAnimators = {};\n                var tiles = mainLayer.getTiles().tileGrids[0].tiles;\n                var subdomains = [\n                    \"a\",\n                    \"b\",\n                    \"c\"\n                ];\n                if (IS_TILE_STYLE) {\n                    var center = map.getCenter();\n                    tiles = tiles.filter(function(tile) {\n                        var extent = tile.extent2d.convertTo(function(c) {\n                            return map.pointToCoord(c);\n                        }).toJSON();\n                        return extent.xmax > center.x && extent.xmin < center.x && extent.ymax > center.y && extent.ymin < center.y;\n                    });\n                }\n                var loading = Math.min(tiles.length, 6);\n                tiles.forEach(function(tile, idx) {\n                    var _this3 = _this4;\n                    var fetchId = _this4._id;\n                    if (idx >= 6) {\n                        return;\n                    }\n                    var extent = tile.extent2d.convertTo(function(c) {\n                        return map.pointToCoord(c);\n                    }).toJSON();\n                    var scaleX = 1e4;\n                    var scaleY = scaleX * 1.4;\n                    var width1 = (extent.xmax - extent.xmin) * scaleX;\n                    var height1 = (extent.ymax - extent.ymin) * scaleY;\n                    var tileRect = {\n                        x: IS_TILE_STYLE ? -width1 / 2 : 0,\n                        y: IS_TILE_STYLE ? -height1 / 2 : 0,\n                        width: width1,\n                        height: height1\n                    };\n                    var allBoundingRect = {\n                        x: Infinity,\n                        y: Infinity,\n                        width: -Infinity,\n                        height: -Infinity\n                    };\n                    var url = mvtUrlTpl.replace(\"{z}\", tile.z).replace(\"{x}\", tile.x).replace(\"{y}\", tile.y).replace(\"{s}\", subdomains[idx % 3]);\n                    if (mvtCache.get(url)) {\n                        var _loop = function(key) {\n                            createElementMesh(vectorElements.find(function(config1) {\n                                return config1.type === key;\n                            }), features[key], tileRect, idx);\n                        };\n                        var features = mvtCache.get(url);\n                        for(var key in features)_loop(key);\n                        return;\n                    }\n                    return fetch(url, {\n                        mode: \"cors\"\n                    }).then(function(response) {\n                        return response.arrayBuffer();\n                    }).then(function(buffer) {\n                        var _loop = function(key) {\n                            var boundingRect = createElementMesh(vectorElements.find(function(config2) {\n                                return config2.type === key;\n                            }), features[key], tileRect, idx).boundingRect;\n                            unionRect(allBoundingRect, boundingRect, allBoundingRect);\n                        };\n                        if (fetchId !== _this3._id) {\n                            return;\n                        }\n                        var pbf = new (pbf__WEBPACK_IMPORTED_MODULE_3___default())(new Uint8Array(buffer));\n                        var vTile = new VectorTile(pbf);\n                        if (!vTile.layers.buildings) {\n                            return;\n                        }\n                        var features = {};\n                        [\n                            \"buildings\",\n                            \"roads\",\n                            \"water\"\n                        ].forEach(function(type) {\n                            if (!vTile.layers[type]) {\n                                return;\n                            }\n                            features[type] = [];\n                            for(var i = 0; i < vTile.layers[type].length; i++){\n                                var feature = vTile.layers[type].feature(i).toGeoJSON(tile.x, tile.y, tile.z);\n                                scaleFeature(feature, IS_TILE_STYLE ? [\n                                    -(extent.xmax + extent.xmin) / 2,\n                                    -(extent.ymax + extent.ymin) / 2, \n                                ] : [\n                                    -extent.xmin,\n                                    -extent.ymin\n                                ], [\n                                    scaleX,\n                                    scaleY\n                                ]);\n                                features[type].push(feature);\n                            }\n                            if (IS_TILE_STYLE) {\n                                cullBuildingPolygns(features[type]);\n                            }\n                        });\n                        if (features.water) {\n                            features.water = [\n                                unionComplexPolygons(features.water.filter(function(feature) {\n                                    var geoType = feature.geometry && feature.geometry.type;\n                                    return geoType === \"Polygon\" || geoType === \"MultiPolygon\";\n                                })), \n                            ];\n                        }\n                        if (features.roads) {\n                            features.roads = features.roads.filter(function(feature) {\n                                var geoType = feature.geometry && feature.geometry.type;\n                                return geoType === \"LineString\" || geoType === \"MultiLineString\";\n                            });\n                        }\n                        mvtCache.set(url, features);\n                        for(var key in features)_loop(key);\n                        loading--;\n                        if (IS_TILE_STYLE) {\n                            if (loading === 0) {\n                                app5.methods.updateEarthGround(allBoundingRect);\n                            }\n                        }\n                        app5.methods.render();\n                    });\n                });\n            },\n            generateClouds: function generateClouds(app6) {\n                var randomInSphere = function randomInSphere(r) {\n                    var alpha = Math.random() * Math.PI * 2;\n                    var beta = Math.random() * Math.PI;\n                    var r2 = Math.sin(beta) * r;\n                    var y = Math.cos(beta) * r;\n                    var x = Math.cos(alpha) * r2;\n                    var z = Math.sin(alpha) * r2;\n                    return [\n                        x,\n                        y,\n                        z\n                    ];\n                };\n                var cloudNumber = IS_TILE_STYLE ? 10 : 15;\n                var pointCount = 100;\n                this._cloudsNode.removeAll();\n                var cloudMaterial = app6.createMaterial({\n                    roughness: 1,\n                    color: config.cloudColor\n                });\n                cloudMaterial.name = \"mat_cloud\";\n                for(var i = 0; i < cloudNumber; i++){\n                    var positionArr = new Float32Array(5 * pointCount * 3);\n                    var off = 0;\n                    var indices = [];\n                    var dx = Math.random() - 0.5;\n                    var dy = Math.random() - 0.5;\n                    var len = Math.sqrt(dx * dx + dy * dy);\n                    dx /= len;\n                    dy /= len;\n                    var dist = 4 + Math.random() * 2;\n                    for(var i4 = 0; i4 < 5; i4++){\n                        var posOff = i4 - 2 + (Math.random() * 0.4 - 0.2);\n                        var rBase = 3 - Math.abs(posOff);\n                        var points = [];\n                        var vertexOffset = off / 3;\n                        for(var i5 = 0; i5 < pointCount; i5++){\n                            var r1 = Math.random() * rBase + rBase;\n                            var pt = randomInSphere(r1);\n                            points.push(pt);\n                            positionArr[off++] = pt[0] + posOff * dist * dx;\n                            if (IS_TILE_STYLE) {\n                                positionArr[off++] = pt[1];\n                                positionArr[off++] = pt[2] + posOff * dist * dy;\n                            } else {\n                                positionArr[off++] = pt[1] + posOff * dist * dy;\n                                positionArr[off++] = pt[2];\n                            }\n                        }\n                        var tmp = quickhull3d__WEBPACK_IMPORTED_MODULE_5___default()(points);\n                        for(var m = 0; m < tmp.length; m++){\n                            indices.push(tmp[m][0] + vertexOffset);\n                            indices.push(tmp[m][1] + vertexOffset);\n                            indices.push(tmp[m][2] + vertexOffset);\n                        }\n                    }\n                    var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                    geo.attributes.position.value = positionArr;\n                    geo.initIndicesFromArray(indices);\n                    geo.generateFaceNormals();\n                    var cloudMesh = app6.createMesh(geo, cloudMaterial, this._cloudsNode);\n                    cloudMesh.height = Math.random() * 10 + 20;\n                    if (IS_TILE_STYLE) {\n                        cloudMesh.position.setArray([\n                            (Math.random() - 0.5) * 60,\n                            Math.random() * 10 + 25,\n                            (Math.random() - 0.5) * 60, \n                        ]);\n                        if (IS_TILE_STYLE) {\n                            cloudMesh.scale.set(0.6, 0.6, 0.6);\n                        }\n                    } else {\n                        cloudMesh.position.setArray(randomInSphere(config.radius / Math.sqrt(2) + cloudMesh.height));\n                        cloudMesh.lookAt(claygl__WEBPACK_IMPORTED_MODULE_15__.Vector3.ZERO);\n                    }\n                }\n                app6.methods.render();\n            },\n            updateColor: function updateColor() {\n                this._earthNode.eachChild(function(mesh) {\n                    mesh.material.set(\"color\", config.earthColor);\n                });\n                this._cloudsNode.eachChild(function(mesh) {\n                    mesh.material.set(\"color\", config.cloudColor);\n                });\n                for(var key in this._elementsMaterials){\n                    this._elementsMaterials[key].set(\"color\", config[key + \"Color\"]);\n                }\n                this._advRenderer.render();\n            },\n            render: function render(app7) {\n                var _this5 = this;\n                this._control.orthographicAspect = app7.renderer.getViewportAspect();\n                this._advRenderer.render();\n                // TODO\n                setTimeout(function() {\n                    _this5._advRenderer.render();\n                }, 20);\n            },\n            updateAutoRotate: function updateAutoRotate() {\n                this._control.rotateSpeed = config.rotateSpeed * 50;\n                this._control.autoRotate = Math.abs(config.rotateSpeed) > 0.3;\n            },\n            updateSky: function updateSky(app8) {\n                config.sky ? this._skybox.attachScene(app8.scene) : this._skybox.detachScene();\n                this._advRenderer.render();\n            },\n            updateVisibility: function updateVisibility(app9) {\n                this._earthNode.invisible = !config.showEarth;\n                this._cloudsNode.invisible = !config.showCloud;\n                this._elementsNodes.buildings.invisible = !config.showBuildings;\n                this._elementsNodes.roads.invisible = !config.showRoads;\n                this._elementsNodes.water.invisible = !config.showWater;\n                app9.methods.render();\n            }\n        }\n    });\n    return app1;\n};\nvar configApp = function(app10) {\n    var updateAll = function updateAll() {\n        if (!IS_TILE_STYLE) {\n            app10.methods.updateEarthSphere();\n        }\n        app10.methods.updateElements();\n    };\n    var updateUrlState = function updateUrlState() {\n        history.pushState(\"\", \"\", makeUrl());\n    };\n    console.log(app10, \"app\");\n    if (!app10) return;\n    var timeout;\n    map.on(\"moveend\", function() {\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            app10.methods.updateElements();\n            updateUrlState();\n        }, 500);\n    });\n    map.on(\"moving\", function() {\n        var center = map.getCenter();\n        urlOpts.lng = document.querySelector(\"#lng\").value = center.x;\n        urlOpts.lat = document.querySelector(\"#lat\").value = center.y;\n    });\n    map.on(\"zoomend\", function() {\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            app10.methods.updateElements();\n        }, 500);\n    });\n    // Array.prototype.forEach.call(\n    //   document.querySelectorAll(\"#style-list li\"),\n    //   (li) => {\n    //     li.addEventListener(\"click\", () => {\n    //       urlOpts.style = li.className;\n    //       window.location = makeUrl();\n    //     });\n    //   }\n    // );\n    // document.querySelector(\"#locate\").addEventListener(\"click\", () => {\n    //   urlOpts.lng = +document.querySelector(\"#lng\").value;\n    //   urlOpts.lat = +document.querySelector(\"#lat\").value;\n    //   map.setCenter({ x: urlOpts.lng, y: urlOpts.lat });\n    //   app.methods.updateElements();\n    //   updateUrlState();\n    // });\n    // document.querySelector(\"#reset\").addEventListener(\"click\", () => {\n    //   urlOpts.lng = document.querySelector(\"#lng\").value = DEFAULT_LNG;\n    //   urlOpts.lat = document.querySelector(\"#lat\").value = DEFAULT_LAT;\n    //   map.setCenter({ x: urlOpts.lng, y: urlOpts.lat });\n    //   app.methods.updateElements();\n    //   updateUrlState();\n    // });\n    var ui = new dat.GUI();\n    console.log(ui, \"fuck ui\");\n    ui.add(actions, \"reset\");\n    if (!IS_TILE_STYLE) {\n        ui.add(config, \"radius\", 30, 100).step(1).onChange(updateAll).onFinishChange(updateUrlState);\n    }\n    ui.add(config, \"rotateSpeed\", -2, 2).step(0.01).onChange(app10.methods.updateAutoRotate).onFinishChange(updateUrlState);\n    ui.add(config, \"sky\").onChange(app10.methods.updateSky).onFinishChange(updateUrlState);\n    var earthFolder = ui.addFolder(\"Earth\");\n    earthFolder.add(config, \"showEarth\").onChange(app10.methods.updateVisibility).onFinishChange(updateUrlState);\n    if (IS_TILE_STYLE) {\n        earthFolder.add(config, \"earthDepth\", 1, 50).onChange(app10.methods.updateEarthGround).onFinishChange(updateUrlState);\n    }\n    earthFolder.addColor(config, \"earthColor\").onChange(app10.methods.updateColor).onFinishChange(updateUrlState);\n    var buildingsFolder = ui.addFolder(\"Buildings\");\n    buildingsFolder.add(config, \"showBuildings\").onChange(app10.methods.updateVisibility).onFinishChange(updateUrlState);\n    buildingsFolder.addColor(config, \"buildingsColor\").onChange(app10.methods.updateColor).onFinishChange(updateUrlState);\n    var roadsFolder = ui.addFolder(\"Roads\");\n    roadsFolder.add(config, \"showRoads\").onChange(app10.methods.updateVisibility).onFinishChange(updateUrlState);\n    roadsFolder.addColor(config, \"roadsColor\").onChange(app10.methods.updateColor).onFinishChange(updateUrlState);\n    var waterFolder = ui.addFolder(\"Water\");\n    waterFolder.add(config, \"showWater\").onChange(app10.methods.updateVisibility).onFinishChange(updateUrlState);\n    waterFolder.addColor(config, \"waterColor\").onChange(app10.methods.updateColor).onFinishChange(updateUrlState);\n    var cloudFolder = ui.addFolder(\"Cloud\");\n    cloudFolder.add(config, \"showCloud\").onChange(app10.methods.updateVisibility).onFinishChange(updateUrlState);\n    cloudFolder.addColor(config, \"cloudColor\").onChange(app10.methods.updateColor).onFinishChange(updateUrlState);\n    cloudFolder.add(actions, \"randomCloud\");\n    ui.add(actions, \"downloadOBJ\");\n};\nvar LittleCity = function() {\n    _s();\n    var viewport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    console.log(viewport, \"box\");\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        if (!viewport.current) return;\n        console.log(viewport);\n        initMap();\n        initClay(viewport.current);\n    // app && configApp(app);\n    }, [\n        viewport\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"viewport\",\n                ref: viewport,\n                className: (_index_module_css__WEBPACK_IMPORTED_MODULE_16___default().viewport)\n            }, void 0, false, {\n                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                lineNumber: 1083,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"map\",\n                className: (_index_module_css__WEBPACK_IMPORTED_MODULE_16___default().map),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        id: \"location\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                        lineNumber: 1085,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        id: \"map-main\",\n                        className: (_index_module_css__WEBPACK_IMPORTED_MODULE_16___default().mapMain)\n                    }, void 0, false, {\n                        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                        lineNumber: 1086,\n                        columnNumber: 9\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                lineNumber: 1084,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n        lineNumber: 1082,\n        columnNumber: 5\n    }, _this);\n};\n_s(LittleCity, \"/djMZZHkkQhhlZvVmPaWkk4zz2I=\");\n_c = LittleCity;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LittleCity);\nvar _c;\n$RefreshReg$(_c, \"LittleCity\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxhQUFhLENBQUMsQ0FBQztDQUNoQztBQUVNLElBQU1xVSxVQUFVLEdBQUcsV0FBTTs7SUFDOUIsSUFBTUMsUUFBUSxHQUFHL1ksNkNBQU0sQ0FBaUIsSUFBSSxDQUFDO0lBQzdDMEYsT0FBTyxDQUFDZ0YsR0FBRyxDQUFDcU8sUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTdCaFosZ0RBQVMsQ0FBQyxXQUFNO1FBQ2QsSUFBSSxDQUFDZ1osUUFBUSxDQUFDQyxPQUFPLEVBQUUsT0FBTztRQUM5QnRULE9BQU8sQ0FBQ2dGLEdBQUcsQ0FBQ3FPLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCeFMsT0FBTyxFQUFFLENBQUM7UUFDVmlFLFFBQVEsQ0FBQ3VPLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFDM0IseUJBQXlCO0tBQzFCLEVBQUU7UUFBQ0QsUUFBUTtLQUFDLENBQUMsQ0FBQztJQUVmLHFCQUNFLDhEQUFDRSxLQUFHOzswQkFDRiw4REFBQ0EsS0FBRztnQkFBQ0MsRUFBRSxFQUFDLFVBQVU7Z0JBQUNDLEdBQUcsRUFBRUosUUFBUTtnQkFBRUssU0FBUyxFQUFFblosb0VBQWU7Ozs7O3FCQUFHOzBCQUMvRCw4REFBQ2daLEtBQUc7Z0JBQUNDLEVBQUUsRUFBQyxLQUFLO2dCQUFDRSxTQUFTLEVBQUVuWiwrREFBVTs7a0NBQ2pDLDhEQUFDZ1osS0FBRzt3QkFBQ0MsRUFBRSxFQUFDLFVBQVU7Ozs7OzZCQUFPO2tDQUN6Qiw4REFBQ0QsS0FBRzt3QkFBQ0MsRUFBRSxFQUFDLFVBQVU7d0JBQUNFLFNBQVMsRUFBRW5aLG1FQUFjOzs7Ozs2QkFBUTs7Ozs7O3FCQUNoRDs7Ozs7O2FBQ0YsQ0FDTjtDQUNILENBQUM7R0FyQlc2WSxVQUFVO0FBQVZBLEtBQUFBLFVBQVU7QUF1QnZCLCtEQUFlQSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9MaXR0bGVDaXR5L2luZGV4LnRzeD9iNDBlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL2luZGV4Lm1vZHVsZS5jc3NcIjtcblxuaW1wb3J0ICogYXMgY2xheWdsIGZyb20gXCJjbGF5Z2xcIjtcblxuaW1wb3J0IHsgZXh0cnVkZUdlb0pTT04sIGV4dHJ1ZGVQb2x5Z29uIH0gZnJvbSBcImdlb21ldHJ5LWV4dHJ1ZGVcIjtcbmltcG9ydCB7XG4gIGFwcGxpY2F0aW9uLFxuICBwbHVnaW4sXG4gIGdlb21ldHJ5IGFzIGJ1aWx0aW5HZW9tZXRyaWVzLFxuICBUZXh0dXJlMkQsXG4gIEdlb21ldHJ5LFxuICBWZWN0b3IzLFxufSBmcm9tIFwiY2xheWdsXCI7XG5pbXBvcnQgUHJvdG9idWYgZnJvbSBcInBiZlwiO1xuXG4vLyAvLyBpbXBvcnQgKiBhcyBkYXQgZnJvbSBcImRhdC5ndWlcIjtcbmltcG9ydCBMUlUgZnJvbSBcImxydS1jYWNoZVwiO1xuaW1wb3J0IHF1aWNraHVsbCBmcm9tIFwicXVpY2todWxsM2RcIjtcbmltcG9ydCBKU1ppcCBmcm9tIFwianN6aXBcIjtcblxuLy8gLy8gZm9yIFBvbHlCb29sXG5pbXBvcnQgXCJwb2x5Ym9vbGpzXCI7XG4vLyAvLyBmb3IgdmVjMlxuaW1wb3J0IHZlYzIgZnJvbSBcIi4vbGliL3ZlYzJcIjtcblxuLy8gLy8gZm9yIENsYXlBZHZhbmNlZFJlbmRlcmVyXG5pbXBvcnQgQ2xheUFkdmFuY2VkUmVuZGVyZXIgZnJvbSBcImNsYXlnbC1hZHZhbmNlZC1yZW5kZXJlclwiO1xuXG4vLyAvLyBmb3IgbWFwdGFsa3NcbmltcG9ydCAqIGFzIG1hcHRhbGtzIGZyb20gXCJtYXB0YWxrc1wiO1xuaW1wb3J0IFwibWFwdGFsa3MvZGlzdC9tYXB0YWxrcy5jc3NcIjtcblxuaW1wb3J0IHRvT0JKIGZyb20gXCIuL2xpYi90b09CSlwiO1xuaW1wb3J0IHRlc3NlbGxhdGUgZnJvbSBcIi4vbGliL3Rlc3NlbGxhdGVcIjtcbmltcG9ydCBkaXN0b3J0aW9uIGZyb20gXCIuL2xpYi9kaXN0b3J0aW9uXCI7XG5cbmNvbnN0IHsgVmVjdG9yVGlsZSB9ID0gcmVxdWlyZShcIkBtYXBib3gvdmVjdG9yLXRpbGVcIik7XG5cbmNvbnN0IG12dENhY2hlID0gbmV3IExSVSh7IG1heDogNTAgfSk7XG5jb25zdCBERUZBVUxUX0xORyA9IC03NC4wMTMwMzQ1O1xuY29uc3QgREVGQVVMVF9MQVQgPSA0MC43MDYzNTE2O1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgcmFkaXVzOiA2MCxcbiAgY3VydmVuZXNzOiAxLFxuXG4gIHNob3dFYXJ0aDogdHJ1ZSxcbiAgZWFydGhEZXB0aDogNCxcbiAgZWFydGhDb2xvcjogXCIjYzJlYmI2XCIsXG5cbiAgc2hvd0J1aWxkaW5nczogdHJ1ZSxcbiAgYnVpbGRpbmdzQ29sb3I6IFwiI2ZhYjhiOFwiLFxuXG4gIHNob3dSb2FkczogdHJ1ZSxcbiAgcm9hZHNDb2xvcjogXCIjODI4MjgyXCIsXG5cbiAgc2hvd1dhdGVyOiB0cnVlLFxuICB3YXRlckNvbG9yOiBcIiM4MGE5ZDdcIixcblxuICBzaG93Q2xvdWQ6IHRydWUsXG4gIGNsb3VkQ29sb3I6IFwiI2ZmZlwiLFxuXG4gIHJvdGF0ZVNwZWVkOiAwLFxuICBza3k6IHRydWUsXG59O1xuXG5jb25zdCBzZWFyY2hTdHIgPSBsb2NhdGlvbi5zZWFyY2guc2xpY2UoMSk7XG5jb25zdCBzZWFyY2hJdGVtcyA9IHNlYXJjaFN0ci5zcGxpdChcIiZcIik7XG5jb25zdCB1cmxPcHRzID0ge307XG5zZWFyY2hJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gIGNvbnN0IGFyciA9IGl0ZW0uc3BsaXQoXCI9XCIpO1xuICBjb25zdCBrZXkgPSBhcnJbMF07XG4gIGNvbnN0IHZhbCA9IGFyclsxXSB8fCB0cnVlO1xuICB1cmxPcHRzW2tleV0gPSB2YWw7XG59KTtcbnVybE9wdHMubG5nID0gdXJsT3B0cy5sbmcgfHwgREVGQVVMVF9MTkc7XG51cmxPcHRzLmxhdCA9IHVybE9wdHMubGF0IHx8IERFRkFVTFRfTEFUO1xuXG5mdW5jdGlvbiBtYWtlVXJsKCkge1xuICBjb25zdCBkaWZmQ29uZmlnID0ge307XG4gIGZvciAobGV0IGtleSBpbiBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnW2tleV0gIT09IERFRkFVTFRfQ09ORklHW2tleV0pIHtcbiAgICAgIGRpZmZDb25maWdba2V5XSA9IGNvbmZpZ1trZXldO1xuICAgIH1cbiAgfVxuICB1cmxPcHRzLmNvbmZpZyA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShkaWZmQ29uZmlnKSk7XG5cbiAgY29uc3QgdXJsSXRlbXMgPSBbXTtcbiAgZm9yIChsZXQga2V5IGluIHVybE9wdHMpIHtcbiAgICB1cmxJdGVtcy5wdXNoKGtleSArIFwiPVwiICsgdXJsT3B0c1trZXldKTtcbiAgfVxuICByZXR1cm4gXCIuLz9cIiArIHVybEl0ZW1zLmpvaW4oXCImXCIpO1xufVxuXG5jb25zdCBJU19USUxFX1NUWUxFID0gdXJsT3B0cy5zdHlsZSA9PT0gXCJ0aWxlXCI7XG5cbi8vIGNvbnN0IFRJTEVfU0laRSA9IElTX1RJTEVfU1RZTEUgPyA1MTIgOiAyNTY7XG5jb25zdCBUSUxFX1NJWkUgPSAyNTY7XG5cbmNvbnN0IGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHKTtcblxudHJ5IHtcbiAgT2JqZWN0LmFzc2lnbihjb25maWcsIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KHVybE9wdHMuY29uZmlnIHx8IFwie31cIikpKTtcbn0gY2F0Y2ggKGUpIHt9XG5cbmNvbnN0IGFjdGlvbnMgPSB7XG4gIGRvd25sb2FkT0JKOiAoKCkgPT4ge1xuICAgIGxldCBkb3dubG9hZGluZyA9IGZhbHNlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZG93bmxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBvYmosIG10bCB9ID0gdG9PQkooYXBwLnNjZW5lLCB7XG4gICAgICAgIG10bGxpYjogXCJjaXR5XCIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHppcCA9IG5ldyBKU1ppcCgpO1xuICAgICAgemlwLmZpbGUoXCJjaXR5Lm9ialwiLCBvYmopO1xuICAgICAgemlwLmZpbGUoXCJjaXR5Lm10bFwiLCBtdGwpO1xuICAgICAgemlwXG4gICAgICAgIC5nZW5lcmF0ZUFzeW5jKHsgdHlwZTogXCJibG9iXCIsIGNvbXByZXNzaW9uOiBcIkRFRkxBVEVcIiB9KVxuICAgICAgICAudGhlbigoY29udGVudCkgPT4ge1xuICAgICAgICAgIGRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2F2ZUFzKGNvbnRlbnQsIFwiY2l0eS56aXBcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGRvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlLnRvU3RyaW5nKCkpO1xuICAgICAgICB9KTtcbiAgICAgIC8vIEJlaGluZCBhbGwgcHJvY2Vzc2luZyBpbiBjYXNlIHNvbWUgZXJycm9yIGhhcHBlbnMuXG4gICAgICBkb3dubG9hZGluZyA9IHRydWU7XG4gICAgfTtcbiAgfSkoKSxcbiAgcmFuZG9tQ2xvdWQ6ICgpID0+IHtcbiAgICBhcHAubWV0aG9kcy5nZW5lcmF0ZUNsb3VkcygpO1xuICB9LFxuICByZXNldDogKCkgPT4ge1xuICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLCBERUZBVUxUX0NPTkZJRyk7XG4gICAgdWkudXBkYXRlRGlzcGxheSgpO1xuICAgIHdpbmRvdy5sb2NhdGlvbiA9IG1ha2VVcmwoKTtcbiAgfSxcbn07XG5cbmNvbnN0IG12dFVybFRwbCA9IGBodHRwczovL3RpbGUubmV4dHplbi5vcmcvdGlsZXplbi92ZWN0b3IvdjEvJHtUSUxFX1NJWkV9L2FsbC97en0ve3h9L3t5fS5tdnQ/YXBpX2tleT1FV0ZzTUQxRFNFeXNMRFdkMmhqMmN3YDtcblxubGV0IGFwcCA9IG51bGw7XG5sZXQgbWFwID0gbnVsbDtcbmxldCBtYWluTGF5ZXIgPSBudWxsO1xuXG5jb25zdCBpbml0TWFwID0gKCkgPT4ge1xuICBpZiAoIW1haW5MYXllcikgcmV0dXJuO1xuXG4gIG1haW5MYXllciA9IG5ldyBtYXB0YWxrcy5UaWxlTGF5ZXIoXCJiYXNlXCIsIHtcbiAgICB0aWxlU2l6ZTogW1RJTEVfU0laRSwgVElMRV9TSVpFXSxcbiAgICAvLyB1cmxUZW1wbGF0ZTogXCJodHRwczovL3tzfS5iYXNlbWFwcy5jYXJ0b2Nkbi5jb20vbGlnaHRfYWxsL3t6fS97eH0ve3l9LnBuZ1wiLFxuICAgIHVybFRlbXBsYXRlOiBcImh0dHBzOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nXCIsXG4gICAgc3ViZG9tYWluczogW1wiYVwiLCBcImJcIiwgXCJjXCJdLFxuICB9KTtcblxuICBtYXAgPSBuZXcgbWFwdGFsa3MuTWFwKFwibWFwLW1haW5cIiwge1xuICAgIC8vIGNlbnRlcjogWy0wLjExMzA0OSwgNTEuNDk4NTY4XSxcbiAgICBjZW50ZXI6IFstNzMuOTczMzIsIDQwLjc2NDYyXSxcbiAgICAvLyBjZW50ZXI6IFt1cmxPcHRzLmxuZywgdXJsT3B0cy5sYXRdLFxuICAgIHpvb206IDE2LFxuICAgIGJhc2VMYXllcjogbWFpbkxheWVyLFxuICB9KTtcbiAgbWFwLnNldE1pblpvb20oMTYpO1xuICBtYXAuc2V0TWF4Wm9vbSgxNik7XG59O1xuXG5jb25zdCBmYWNlcyA9IFtcInB6XCIsIFwicHhcIiwgXCJuelwiLCBcInB5XCIsIFwibnhcIiwgXCJueVwiXTtcblxuY29uc3QgdmVjdG9yRWxlbWVudHMgPSBbXG4gIHtcbiAgICB0eXBlOiBcImJ1aWxkaW5nc1wiLFxuICAgIGdlb21ldHJ5VHlwZTogXCJwb2x5Z29uXCIsXG4gICAgZGVwdGg6IChmZWF0dXJlKSA9PiB7XG4gICAgICByZXR1cm4gKGZlYXR1cmUucHJvcGVydGllcy5oZWlnaHQgfHwgMzApIC8gMTAgKyAxO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcInJvYWRzXCIsXG4gICAgZ2VvbWV0cnlUeXBlOiBcInBvbHlsaW5lXCIsXG4gICAgZGVwdGg6IDEuMixcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwid2F0ZXJcIixcbiAgICBnZW9tZXRyeVR5cGU6IFwicG9seWdvblwiLFxuICAgIGRlcHRoOiAxLFxuICB9LFxuXTtcblxuZnVuY3Rpb24gaXRlcmF0ZUZlYXR1cmVDb29yZGluYXRlcyhmZWF0dXJlLCBjYikge1xuICBjb25zdCBnZW9tZXRyeSA9IGZlYXR1cmUuZ2VvbWV0cnk7XG4gIGlmIChnZW9tZXRyeS50eXBlID09PSBcIk11bHRpUG9seWdvblwiKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBnZW9tZXRyeS5jb29yZGluYXRlc1tpXS5sZW5ndGg7IGsrKykge1xuICAgICAgICBnZW9tZXRyeS5jb29yZGluYXRlc1tpXVtrXSA9IGNiKGdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldW2tdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgZ2VvbWV0cnkudHlwZSA9PT0gXCJNdWx0aUxpbmVTdHJpbmdcIiB8fFxuICAgIGdlb21ldHJ5LnR5cGUgPT09IFwiUG9seWdvblwiXG4gICkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzW2ldID0gY2IoZ2VvbWV0cnkuY29vcmRpbmF0ZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChnZW9tZXRyeS50eXBlID09PSBcIkxpbmVTdHJpbmdcIikge1xuICAgIGdlb21ldHJ5LmNvb3JkaW5hdGVzID0gY2IoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1YmRpdmlkZUxvbmdFZGdlcyhmZWF0dXJlcywgbWF4RGlzdCkge1xuICBjb25zdCB2ID0gW107XG4gIGZ1bmN0aW9uIGFkZFBvaW50cyhwb2ludHMpIHtcbiAgICBjb25zdCBuZXdQb2ludHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHZlYzIuc3ViKHYsIHBvaW50c1tpICsgMV0sIHBvaW50c1tpXSk7XG4gICAgICBjb25zdCBkaXN0ID0gdmVjMi5sZW4odik7XG4gICAgICB2ZWMyLnNjYWxlKHYsIHYsIDEgLyBkaXN0KTtcbiAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1tpXSk7XG4gICAgICBmb3IgKGxldCBkID0gbWF4RGlzdDsgZCA8IGRpc3Q7IGQgKz0gbWF4RGlzdCkge1xuICAgICAgICBuZXdQb2ludHMucHVzaCh2ZWMyLnNjYWxlQW5kQWRkKFtdLCBwb2ludHNbaV0sIHYsIGQpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV3UG9pbnRzLnB1c2gocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSk7XG4gICAgcmV0dXJuIG5ld1BvaW50cztcbiAgfVxuXG4gIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICBpdGVyYXRlRmVhdHVyZUNvb3JkaW5hdGVzKGZlYXR1cmUsIGFkZFBvaW50cyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY2FsZUZlYXR1cmUoZmVhdHVyZSwgb2Zmc2V0LCBzY2FsZSkge1xuICBmdW5jdGlvbiBzY2FsZVBvaW50cyhwdHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHB0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcHRzW2ldWzBdID0gKHB0c1tpXVswXSArIG9mZnNldFswXSkgKiBzY2FsZVswXTtcbiAgICAgIHB0c1tpXVsxXSA9IChwdHNbaV1bMV0gKyBvZmZzZXRbMV0pICogc2NhbGVbMV07XG4gICAgfVxuICAgIHJldHVybiBwdHM7XG4gIH1cbiAgaXRlcmF0ZUZlYXR1cmVDb29yZGluYXRlcyhmZWF0dXJlLCBzY2FsZVBvaW50cyk7XG59XG5cbmZ1bmN0aW9uIHVuaW9uQ29tcGxleFBvbHlnb25zKGZlYXR1cmVzKSB7XG4gIGNvbnN0IG1lcmdlZENvb3JkaW5hdGVzID0gW107XG4gIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IGZlYXR1cmUuZ2VvbWV0cnk7XG4gICAgaWYgKGdlb21ldHJ5LnR5cGUgPT09IFwiUG9seWdvblwiKSB7XG4gICAgICBtZXJnZWRDb29yZGluYXRlcy5wdXNoKGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpO1xuICAgIH0gZWxzZSBpZiAoZ2VvbWV0cnkudHlwZSA9PT0gXCJNdWx0aVBvbHlnb25cIikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1lcmdlZENvb3JkaW5hdGVzLnB1c2goZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgcG9seSA9IFBvbHlCb29sLnBvbHlnb25Gcm9tR2VvSlNPTih7XG4gICAgdHlwZTogXCJNdWx0aVBvbHlnb25cIixcbiAgICBjb29yZGluYXRlczogbWVyZ2VkQ29vcmRpbmF0ZXMsXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiRmVhdHVyZVwiLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIGdlb21ldHJ5OiBQb2x5Qm9vbC5wb2x5Z29uVG9HZW9KU09OKHBvbHkpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBjdWxsQnVpbGRpbmdQb2x5Z25zKGZlYXR1cmVzKSB7XG4gIGNvbnN0IGVhcnRoQ29vcmRzID0gW2dldFJlY3RDb29yZHMoZWFydGhSZWN0KV07XG4gIGZlYXR1cmVzLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICBpZiAoXG4gICAgICBmZWF0dXJlLmdlb21ldHJ5ICYmXG4gICAgICAoZmVhdHVyZS5nZW9tZXRyeS50eXBlID09PSBcIlBvbHlnb25cIiB8fFxuICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT09IFwiTXVsdGlQb2x5Z29uXCIpXG4gICAgKSB7XG4gICAgICBjb25zdCBwb2x5ID0gUG9seUJvb2wucG9seWdvbkZyb21HZW9KU09OKGZlYXR1cmUuZ2VvbWV0cnkpO1xuICAgICAgY29uc3QgaW50ZXJzZWN0ZWRQb2x5ID0gUG9seUJvb2wuaW50ZXJzZWN0KFxuICAgICAgICB7IHJlZ2lvbnM6IGVhcnRoQ29vcmRzLCBpbnZlcnNlOiBmYWxzZSB9LFxuICAgICAgICBwb2x5XG4gICAgICApO1xuICAgICAgZmVhdHVyZS5nZW9tZXRyeSA9IFBvbHlCb29sLnBvbHlnb25Ub0dlb0pTT04oaW50ZXJzZWN0ZWRQb2x5KTtcbiAgICAgIGlmICghZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGgpIHtcbiAgICAgICAgZmVhdHVyZS5nZW9tZXRyeSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gdW5pb25SZWN0KG91dCwgYSwgYikge1xuICBjb25zdCB4ID0gTWF0aC5taW4oYS54LCBiLngpO1xuICBjb25zdCB5ID0gTWF0aC5taW4oYS55LCBiLnkpO1xuICBvdXQueCA9IHg7XG4gIG91dC55ID0geTtcbiAgb3V0LndpZHRoID0gTWF0aC5tYXgoYS53aWR0aCArIGEueCwgYi53aWR0aCArIGIueCkgLSB4O1xuICBvdXQuaGVpZ2h0ID0gTWF0aC5tYXgoYS5oZWlnaHQgKyBhLnksIGIuaGVpZ2h0ICsgYi55KSAtIHk7XG59XG5cbmNvbnN0IHdpZHRoID0gNTU7XG5jb25zdCBoZWlnaHQgPSA1OC41O1xuY29uc3QgZWFydGhSZWN0ID0ge1xuICB4OiAtd2lkdGggLyAyLFxuICB5OiAtaGVpZ2h0IC8gMixcbiAgd2lkdGg6IHdpZHRoLFxuICBoZWlnaHQ6IGhlaWdodCxcbn07XG5cbmZ1bmN0aW9uIGdldFJlY3RDb29yZHMocmVjdCkge1xuICByZXR1cm4gW1xuICAgIFtyZWN0LngsIHJlY3QueV0sXG4gICAgW3JlY3QueCArIHJlY3Qud2lkdGgsIHJlY3QueV0sXG4gICAgW3JlY3QueCArIHJlY3Qud2lkdGgsIHJlY3QueSArIHJlY3QuaGVpZ2h0XSxcbiAgICBbcmVjdC54LCByZWN0LnkgKyByZWN0LmhlaWdodF0sXG4gICAgW3JlY3QueCwgcmVjdC55XSxcbiAgXTtcbn1cblxuY29uc3QgaW5pdENsYXkgPSAoY29udGFpbmVyRG9tPzogSFRNTEVsZW1lbnQpID0+IHtcbiAgY29uc29sZS5sb2coXCJpbml0Q2xheVwiKTtcbiAgaWYgKCFjb250YWluZXJEb20pIHJldHVybjtcblxuICBjb25zb2xlLmxvZyhjb250YWluZXJEb20sIFwiY29udGFpbmVyRG9tXCIpO1xuXG4gIC8vIGxldCBjYW1lcmE6IHR5cGVvZiBPcnRob2dyYXBoaWMgfCB0eXBlb2YgUGVyc3BlY3RpdmU7XG4gIC8vIGxldCBjdWJlOiBNZXNoO1xuICAvLyBsZXQgbWFpbkxpZ2h0OiB0eXBlb2YgRGlyZWN0aW9uYWw7XG5cbiAgY29uc3QgYXBwID0gY2xheWdsLmFwcGxpY2F0aW9uLmNyZWF0ZShjb250YWluZXJEb20sIHtcbiAgICBhdXRvUmVuZGVyOiBmYWxzZSxcblxuICAgIGRldmljZVBpeGVsUmF0aW86IDEsXG5cbiAgICBpbml0KGFwcCkge1xuICAgICAgdGhpcy5fYWR2UmVuZGVyZXIgPSBuZXcgQ2xheUFkdmFuY2VkUmVuZGVyZXIoXG4gICAgICAgIGFwcC5yZW5kZXJlcixcbiAgICAgICAgYXBwLnNjZW5lLFxuICAgICAgICBhcHAudGltZWxpbmUsXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgICAgdGVtcG9yYWxTdXBlclNhbXBsaW5nOiB7XG4gICAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgICBkeW5hbWljOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvc3RFZmZlY3Q6IHtcbiAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGJsb29tOiB7XG4gICAgICAgICAgICAgIGVuYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2NyZWVuU3BhY2VBbWJpZW50T2NjbHVzaW9uOiB7XG4gICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgaW50ZW5zaXR5OiAxLjEsXG4gICAgICAgICAgICAgIHJhZGl1czogNSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBGWEFBOiB7XG4gICAgICAgICAgICAgIGVuYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICB0aGlzLl9hZHZSZW5kZXJlci5zZXRTaGFkb3coe1xuICAgICAgICBrZXJuZWxTaXplOiAxMCxcbiAgICAgICAgYmx1clNpemU6IDMsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY2FtZXJhID0gYXBwLmNyZWF0ZUNhbWVyYShcbiAgICAgICAgWzAsIDAsIDE3MF0sXG4gICAgICAgIFswLCAwLCAwXSxcbiAgICAgICAgSVNfVElMRV9TVFlMRSA/IFwib3J0aG9cIiA6IFwicGVyc3BlY3RpdmVcIlxuICAgICAgKTtcbiAgICAgIGlmIChJU19USUxFX1NUWUxFKSB7XG4gICAgICAgIGNhbWVyYS50b3AgPSA1MDtcbiAgICAgICAgY2FtZXJhLmJvdHRvbSA9IC01MDtcbiAgICAgICAgY2FtZXJhLmxlZnQgPSAtNTAgKiBhcHAucmVuZGVyZXIuZ2V0Vmlld3BvcnRBc3BlY3QoKTtcbiAgICAgICAgY2FtZXJhLnJpZ2h0ID0gNTAgKiBhcHAucmVuZGVyZXIuZ2V0Vmlld3BvcnRBc3BlY3QoKTtcbiAgICAgICAgY2FtZXJhLm5lYXIgPSAwO1xuICAgICAgICBjYW1lcmEuZmFyID0gMTAwMDtcbiAgICAgIH1cbiAgICAgIGNhbWVyYS51cGRhdGUoKTtcbiAgICAgIHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcblxuICAgICAgdGhpcy5fZWFydGhOb2RlID0gYXBwLmNyZWF0ZU5vZGUoKTtcbiAgICAgIHRoaXMuX2Nsb3Vkc05vZGUgPSBhcHAuY3JlYXRlTm9kZSgpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50c05vZGVzID0ge307XG4gICAgICB0aGlzLl9lbGVtZW50c01hdGVyaWFscyA9IHt9O1xuXG4gICAgICB0aGlzLl9kaWZmdXNlVGV4ID0gYXBwLmxvYWRUZXh0dXJlU3luYyhcIi4vYXNzZXQvcGFwZXItZGV0YWlsLnBuZ1wiLCB7XG4gICAgICAgIGFuaXNvdHJvcGljOiA4LFxuICAgICAgfSk7XG5cbiAgICAgIHZlY3RvckVsZW1lbnRzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzTm9kZXNbZWwudHlwZV0gPSBhcHAuY3JlYXRlTm9kZSgpO1xuICAgICAgICBpZiAoSVNfVElMRV9TVFlMRSkge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnRzTm9kZXNbZWwudHlwZV0ucm90YXRpb24ucm90YXRlWCgtTWF0aC5QSSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzTWF0ZXJpYWxzW2VsLnR5cGVdID0gYXBwLmNyZWF0ZU1hdGVyaWFsKHtcbiAgICAgICAgICBkaWZmdXNlTWFwOiB0aGlzLl9kaWZmdXNlVGV4LFxuICAgICAgICAgIHV2UmVwZWF0OiBbMTAsIDEwXSxcbiAgICAgICAgICBjb2xvcjogY29uZmlnW2VsLnR5cGUgKyBcIkNvbG9yXCJdLFxuICAgICAgICAgIHJvdWdobmVzczogMSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzTWF0ZXJpYWxzW2VsLnR5cGVdLm5hbWUgPSBcIm1hdF9cIiArIGVsLnR5cGU7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbGlnaHQgPSBhcHAuY3JlYXRlRGlyZWN0aW9uYWxMaWdodChbLTEsIC0xLCAtMV0sIFwiI2ZmZlwiKTtcbiAgICAgIGxpZ2h0LnNoYWRvd1Jlc29sdXRpb24gPSAyMDQ4O1xuICAgICAgbGlnaHQuc2hhZG93QmlhcyA9IElTX1RJTEVfU1RZTEUgPyAwLjAxIDogMC4wMDA1O1xuXG4gICAgICB0aGlzLl9jb250cm9sID0gbmV3IHBsdWdpbi5PcmJpdENvbnRyb2woe1xuICAgICAgICB0YXJnZXQ6IGNhbWVyYSxcbiAgICAgICAgZG9tRWxlbWVudDogYXBwLmNvbnRhaW5lcixcbiAgICAgICAgdGltZWxpbmU6IGFwcC50aW1lbGluZSxcbiAgICAgICAgcm90YXRlU2Vuc2l0aXZpdHk6IDIsXG4gICAgICAgIG9ydGhvZ3JhcGhpY0FzcGVjdDogYXBwLnJlbmRlcmVyLmdldFZpZXdwb3J0QXNwZWN0KCksXG4gICAgICB9KTtcbiAgICAgIGlmIChJU19USUxFX1NUWUxFKSB7XG4gICAgICAgIHRoaXMuX2NvbnRyb2wuc2V0T3B0aW9uKHtcbiAgICAgICAgICBiZXRhOiA0NSxcbiAgICAgICAgICBhbHBoYTogMzAsXG4gICAgICAgICAgbWluQWxwaGE6IDEwLFxuICAgICAgICAgIG1heEFscGhhOiA4MCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9jb250cm9sLm9uKFwidXBkYXRlXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5fYWR2UmVuZGVyZXIucmVuZGVyKCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFJU19USUxFX1NUWUxFKSB7XG4gICAgICAgIGFwcC5tZXRob2RzLnVwZGF0ZUVhcnRoU3BoZXJlKCk7XG4gICAgICB9XG4gICAgICBhcHAubWV0aG9kcy51cGRhdGVFbGVtZW50cygpO1xuICAgICAgYXBwLm1ldGhvZHMudXBkYXRlVmlzaWJpbGl0eSgpO1xuICAgICAgYXBwLm1ldGhvZHMuZ2VuZXJhdGVDbG91ZHMoKTtcblxuICAgICAgdGhpcy5fYWR2UmVuZGVyZXIucmVuZGVyKCk7XG5cbiAgICAgIHJldHVybiBhcHBcbiAgICAgICAgLmNyZWF0ZUFtYmllbnRDdWJlbWFwTGlnaHQoXCIuL2Fzc2V0L0dyYW5kX0Nhbnlvbl9DLmhkclwiLCAwLjIsIDAuOCwgMSlcbiAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNreWJveCA9IG5ldyBwbHVnaW4uU2t5Ym94KHtcbiAgICAgICAgICAgIGVudmlyb25tZW50TWFwOiByZXN1bHQuc3BlY3VsYXIuY3ViZW1hcCxcbiAgICAgICAgICAgIHNjZW5lOiBhcHAuc2NlbmUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2t5Ym94Lm1hdGVyaWFsLnNldChcImxvZFwiLCAyKTtcbiAgICAgICAgICB0aGlzLl9za3lib3ggPSBza3lib3g7XG4gICAgICAgICAgdGhpcy5fYWR2UmVuZGVyZXIucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICB1cGRhdGVFYXJ0aFNwaGVyZShhcHApIHtcbiAgICAgICAgdGhpcy5fZWFydGhOb2RlLnJlbW92ZUFsbCgpO1xuXG4gICAgICAgIGNvbnN0IGVhcnRoTWF0ID0gYXBwLmNyZWF0ZU1hdGVyaWFsKHtcbiAgICAgICAgICByb3VnaG5lc3M6IDEsXG4gICAgICAgICAgY29sb3I6IGNvbmZpZy5lYXJ0aENvbG9yLFxuICAgICAgICAgIGRpZmZ1c2VNYXA6IHRoaXMuX2RpZmZ1c2VUZXgsXG4gICAgICAgICAgdXZSZXBlYXQ6IFsyLCAyXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGVhcnRoTWF0Lm5hbWUgPSBcIm1hdF9lYXJ0aFwiO1xuXG4gICAgICAgIGZhY2VzLmZvckVhY2goKGZhY2UpID0+IHtcbiAgICAgICAgICBjb25zdCBwbGFuZUdlbyA9IG5ldyBidWlsdGluR2VvbWV0cmllcy5QbGFuZSh7XG4gICAgICAgICAgICB3aWR0aFNlZ21lbnRzOiAyMCxcbiAgICAgICAgICAgIGhlaWdodFNlZ21lbnRzOiAyMCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhcHAuY3JlYXRlTWVzaChwbGFuZUdlbywgZWFydGhNYXQsIHRoaXMuX2VhcnRoTm9kZSk7XG4gICAgICAgICAgZGlzdG9ydGlvbihcbiAgICAgICAgICAgIHBsYW5lR2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWUsXG4gICAgICAgICAgICB7IHg6IC0xLCB5OiAtMSwgd2lkdGg6IDIsIGhlaWdodDogMiB9LFxuICAgICAgICAgICAgY29uZmlnLnJhZGl1cyxcbiAgICAgICAgICAgIGNvbmZpZy5jdXJ2ZW5lc3MsXG4gICAgICAgICAgICBmYWNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwbGFuZUdlby5nZW5lcmF0ZVZlcnRleE5vcm1hbHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fY2xvdWRzTm9kZS5lYWNoQ2hpbGQoKGNsb3VkTWVzaCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRpc3QgPSBjbG91ZE1lc2guaGVpZ2h0ICsgY29uZmlnLnJhZGl1cyAvIE1hdGguc3FydCgyKTtcbiAgICAgICAgICBjbG91ZE1lc2gucG9zaXRpb24ubm9ybWFsaXplKCkuc2NhbGUoZGlzdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2FkdlJlbmRlcmVyLnJlbmRlcigpO1xuICAgICAgfSxcblxuICAgICAgdXBkYXRlRWFydGhHcm91bmQoYXBwLCByZWN0KSB7XG4gICAgICAgIHRoaXMuX2VhcnRoTm9kZS5yZW1vdmVBbGwoKTtcblxuICAgICAgICBjb25zdCB7IHBvc2l0aW9uLCB1diwgbm9ybWFsLCBpbmRpY2VzIH0gPSBleHRydWRlUG9seWdvbihcbiAgICAgICAgICBbW2dldFJlY3RDb29yZHMoZWFydGhSZWN0KV1dLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRlcHRoOiBjb25maWcuZWFydGhEZXB0aCxcbiAgICAgICAgICAgIC8vIGJldmVsU2l6ZTogMC4zXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBjb25zdCBnZW8gPSBuZXcgR2VvbWV0cnkoKTtcbiAgICAgICAgZ2VvLmF0dHJpYnV0ZXMucG9zaXRpb24udmFsdWUgPSBwb3NpdGlvbjtcbiAgICAgICAgZ2VvLmF0dHJpYnV0ZXMubm9ybWFsLnZhbHVlID0gbm9ybWFsO1xuICAgICAgICBnZW8uYXR0cmlidXRlcy50ZXhjb29yZDAudmFsdWUgPSB1djtcbiAgICAgICAgZ2VvLmluZGljZXMgPSBpbmRpY2VzO1xuICAgICAgICBnZW8udXBkYXRlQm91bmRpbmdCb3goKTtcbiAgICAgICAgY29uc3QgbWVzaCA9IGFwcC5jcmVhdGVNZXNoKFxuICAgICAgICAgIGdlbyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBubWFlOiBcIm1hdF9lYXJ0aFwiLFxuICAgICAgICAgICAgcm91Z2huZXNzOiAxLFxuICAgICAgICAgICAgY29sb3I6IGNvbmZpZy5lYXJ0aENvbG9yLFxuICAgICAgICAgICAgZGlmZnVzZU1hcDogdGhpcy5fZGlmZnVzZVRleCxcbiAgICAgICAgICAgIHV2UmVwZWF0OiBbMiwgMl0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aGlzLl9lYXJ0aE5vZGVcbiAgICAgICAgKTtcbiAgICAgICAgbWVzaC5yb3RhdGlvbi5yb3RhdGVYKC1NYXRoLlBJIC8gMik7XG4gICAgICAgIG1lc2gucG9zaXRpb24ueSA9IC1jb25maWcuZWFydGhEZXB0aCArIDAuMTtcblxuICAgICAgICBhcHAubWV0aG9kcy5yZW5kZXIoKTtcbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZUVsZW1lbnRzKGFwcCkge1xuICAgICAgICB0aGlzLl9pZCA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgIGNvbnN0IGFkdlJlbmRlcmVyID0gdGhpcy5fYWR2UmVuZGVyZXI7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzTm9kZXMgPSB0aGlzLl9lbGVtZW50c05vZGVzO1xuICAgICAgICBjb25zdCBlbGVtZW50c01hdGVyaWFscyA9IHRoaXMuX2VsZW1lbnRzTWF0ZXJpYWxzO1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gZWxlbWVudHNOb2Rlcykge1xuICAgICAgICAgIGVsZW1lbnRzTm9kZXNba2V5XS5yZW1vdmVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9idWlsZGluZ0FuaW1hdG9ycykge1xuICAgICAgICAgIHRoaXMuX2J1aWxkaW5nQW5pbWF0b3JzW2tleV0uc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1aWxkaW5nQW5pbWF0b3JzID0gKHRoaXMuX2J1aWxkaW5nQW5pbWF0b3JzID0ge30pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRNZXNoKGVsQ29uZmlnLCBmZWF0dXJlcywgYm91bmRpbmdSZWN0LCBpZHgpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoIUlTX1RJTEVfU1RZTEUgJiYgZWxDb25maWcudHlwZSA9PT0gXCJyb2Fkc1wiKSB8fFxuICAgICAgICAgICAgZWxDb25maWcudHlwZSA9PT0gXCJ3YXRlclwiXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBzdWJkaXZpZGVMb25nRWRnZXMoZmVhdHVyZXMsIDQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBleHRydWRlR2VvSlNPTihcbiAgICAgICAgICAgIHsgZmVhdHVyZXM6IGZlYXR1cmVzIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxpbmVXaWR0aDogMC41LFxuICAgICAgICAgICAgICBleGNsdWRlQm90dG9tOiB0cnVlLFxuICAgICAgICAgICAgICBzaW1wbGlmeTpcbiAgICAgICAgICAgICAgICBJU19USUxFX1NUWUxFIHx8IGVsQ29uZmlnLnR5cGUgPT09IFwiYnVpbGRpbmdzXCIgPyAwLjAxIDogMCxcbiAgICAgICAgICAgICAgZGVwdGg6IGVsQ29uZmlnLmRlcHRoLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcG9seSA9IHJlc3VsdFtlbENvbmZpZy5nZW9tZXRyeVR5cGVdO1xuICAgICAgICAgIGNvbnN0IGdlbyA9IG5ldyBHZW9tZXRyeSgpO1xuICAgICAgICAgIGlmICghSVNfVElMRV9TVFlMRSAmJiBlbENvbmZpZy50eXBlID09PSBcIndhdGVyXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5kaWNlcywgcG9zaXRpb24gfSA9IHRlc3NlbGxhdGUoXG4gICAgICAgICAgICAgIHBvbHkucG9zaXRpb24sXG4gICAgICAgICAgICAgIHBvbHkuaW5kaWNlcyxcbiAgICAgICAgICAgICAgNVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHBvbHkuaW5kaWNlcyA9IGluZGljZXM7XG4gICAgICAgICAgICBwb2x5LnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgICAgfVxuICAgICAgICAgIGdlby5hdHRyaWJ1dGVzLnRleGNvb3JkMC52YWx1ZSA9IHBvbHkudXY7XG4gICAgICAgICAgZ2VvLmluZGljZXMgPSBwb2x5LmluZGljZXM7XG4gICAgICAgICAgY29uc3QgbWVzaCA9IGFwcC5jcmVhdGVNZXNoKFxuICAgICAgICAgICAgZ2VvLFxuICAgICAgICAgICAgZWxlbWVudHNNYXRlcmlhbHNbZWxDb25maWcudHlwZV0sXG4gICAgICAgICAgICBlbGVtZW50c05vZGVzW2VsQ29uZmlnLnR5cGVdXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoZWxDb25maWcudHlwZSA9PT0gXCJidWlsZGluZ3NcIikge1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uQW5pbWF0ZUZyb20gPSBuZXcgRmxvYXQzMkFycmF5KHBvbHkucG9zaXRpb24pO1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uQW5pbWF0ZVRvID0gcG9seS5wb3NpdGlvbjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zaXRpb25BbmltYXRlRnJvbS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgICBjb25zdCB6ID0gcG9zaXRpb25BbmltYXRlRnJvbVtpICsgMl07XG4gICAgICAgICAgICAgIGlmICh6ID4gMCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uQW5pbWF0ZUZyb21baSArIDJdID0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIUlTX1RJTEVfU1RZTEUpIHtcbiAgICAgICAgICAgICAgcG9zaXRpb25BbmltYXRlVG8gPSBkaXN0b3J0aW9uKFxuICAgICAgICAgICAgICAgIHBvbHkucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgYm91bmRpbmdSZWN0LFxuICAgICAgICAgICAgICAgIGNvbmZpZy5yYWRpdXMsXG4gICAgICAgICAgICAgICAgY29uZmlnLmN1cnZlbmVzcyxcbiAgICAgICAgICAgICAgICBmYWNlc1tpZHhdXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHBvc2l0aW9uQW5pbWF0ZUZyb20gPSBkaXN0b3J0aW9uKFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQW5pbWF0ZUZyb20sXG4gICAgICAgICAgICAgICAgYm91bmRpbmdSZWN0LFxuICAgICAgICAgICAgICAgIGNvbmZpZy5yYWRpdXMsXG4gICAgICAgICAgICAgICAgY29uZmlnLmN1cnZlbmVzcyxcbiAgICAgICAgICAgICAgICBmYWNlc1tpZHhdXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZSA9IHBvc2l0aW9uQW5pbWF0ZVRvO1xuICAgICAgICAgICAgZ2VvLmdlbmVyYXRlVmVydGV4Tm9ybWFscygpO1xuICAgICAgICAgICAgZ2VvLnVwZGF0ZUJvdW5kaW5nQm94KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25Qb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25BbmltYXRlRnJvbSk7XG4gICAgICAgICAgICBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZSA9IHRyYW5zaXRpb25Qb3NpdGlvbjtcblxuICAgICAgICAgICAgbWVzaC5pbnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3Qgb2JqID0ge1xuICAgICAgICAgICAgICBwOiAwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJ1aWxkaW5nQW5pbWF0b3JzW2ZhY2VzW2lkeF1dID0gYXBwLnRpbWVsaW5lXG4gICAgICAgICAgICAgIC5hbmltYXRlKG9iailcbiAgICAgICAgICAgICAgLndoZW4oMjAwMCwge1xuICAgICAgICAgICAgICAgIHA6IDEsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5kZWxheSgxMDAwKVxuICAgICAgICAgICAgICAuZHVyaW5nKChvYmosIHApID0+IHtcbiAgICAgICAgICAgICAgICBtZXNoLmludmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNpdGlvblBvc2l0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhID0gcG9zaXRpb25BbmltYXRlRnJvbVtpXTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBwb3NpdGlvbkFuaW1hdGVUb1tpXTtcbiAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qb3NpdGlvbltpXSA9IChiIC0gYSkgKiBwICsgYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VvLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgYWR2UmVuZGVyZXIucmVuZGVyKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5zdGFydChcImVsYXN0aWNPdXRcIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChJU19USUxFX1NUWUxFKSB7XG4gICAgICAgICAgICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlID0gcG9seS5wb3NpdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGdlby5hdHRyaWJ1dGVzLnBvc2l0aW9uLnZhbHVlID0gZGlzdG9ydGlvbihcbiAgICAgICAgICAgICAgICBwb2x5LnBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGJvdW5kaW5nUmVjdCxcbiAgICAgICAgICAgICAgICBjb25maWcucmFkaXVzLFxuICAgICAgICAgICAgICAgIGNvbmZpZy5jdXJ2ZW5lc3MsXG4gICAgICAgICAgICAgICAgZmFjZXNbaWR4XVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2VvLmdlbmVyYXRlVmVydGV4Tm9ybWFscygpO1xuICAgICAgICAgICAgZ2VvLnVwZGF0ZUJvdW5kaW5nQm94KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHsgYm91bmRpbmdSZWN0OiBwb2x5LmJvdW5kaW5nUmVjdCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRpbGVzID0gbWFpbkxheWVyLmdldFRpbGVzKCkudGlsZUdyaWRzWzBdLnRpbGVzO1xuICAgICAgICBjb25zdCBzdWJkb21haW5zID0gW1wiYVwiLCBcImJcIiwgXCJjXCJdO1xuICAgICAgICBpZiAoSVNfVElMRV9TVFlMRSkge1xuICAgICAgICAgIGNvbnN0IGNlbnRlciA9IG1hcC5nZXRDZW50ZXIoKTtcbiAgICAgICAgICB0aWxlcyA9IHRpbGVzLmZpbHRlcigodGlsZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW50ID0gdGlsZS5leHRlbnQyZFxuICAgICAgICAgICAgICAuY29udmVydFRvKChjKSA9PiBtYXAucG9pbnRUb0Nvb3JkKGMpKVxuICAgICAgICAgICAgICAudG9KU09OKCk7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICBleHRlbnQueG1heCA+IGNlbnRlci54ICYmXG4gICAgICAgICAgICAgIGV4dGVudC54bWluIDwgY2VudGVyLnggJiZcbiAgICAgICAgICAgICAgZXh0ZW50LnltYXggPiBjZW50ZXIueSAmJlxuICAgICAgICAgICAgICBleHRlbnQueW1pbiA8IGNlbnRlci55XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsb2FkaW5nID0gTWF0aC5taW4odGlsZXMubGVuZ3RoLCA2KTtcbiAgICAgICAgdGlsZXMuZm9yRWFjaCgodGlsZSwgaWR4KSA9PiB7XG4gICAgICAgICAgY29uc3QgZmV0Y2hJZCA9IHRoaXMuX2lkO1xuICAgICAgICAgIGlmIChpZHggPj0gNikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBleHRlbnQgPSB0aWxlLmV4dGVudDJkXG4gICAgICAgICAgICAuY29udmVydFRvKChjKSA9PiBtYXAucG9pbnRUb0Nvb3JkKGMpKVxuICAgICAgICAgICAgLnRvSlNPTigpO1xuXG4gICAgICAgICAgY29uc3Qgc2NhbGVYID0gMWU0O1xuICAgICAgICAgIGNvbnN0IHNjYWxlWSA9IHNjYWxlWCAqIDEuNDtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IChleHRlbnQueG1heCAtIGV4dGVudC54bWluKSAqIHNjYWxlWDtcbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSAoZXh0ZW50LnltYXggLSBleHRlbnQueW1pbikgKiBzY2FsZVk7XG4gICAgICAgICAgY29uc3QgdGlsZVJlY3QgPSB7XG4gICAgICAgICAgICB4OiBJU19USUxFX1NUWUxFID8gLXdpZHRoIC8gMiA6IDAsXG4gICAgICAgICAgICB5OiBJU19USUxFX1NUWUxFID8gLWhlaWdodCAvIDIgOiAwLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBhbGxCb3VuZGluZ1JlY3QgPSB7XG4gICAgICAgICAgICB4OiBJbmZpbml0eSxcbiAgICAgICAgICAgIHk6IEluZmluaXR5LFxuICAgICAgICAgICAgd2lkdGg6IC1JbmZpbml0eSxcbiAgICAgICAgICAgIGhlaWdodDogLUluZmluaXR5LFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCB1cmwgPSBtdnRVcmxUcGxcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3p9XCIsIHRpbGUueilcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3h9XCIsIHRpbGUueClcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3l9XCIsIHRpbGUueSlcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3N9XCIsIHN1YmRvbWFpbnNbaWR4ICUgM10pO1xuXG4gICAgICAgICAgaWYgKG12dENhY2hlLmdldCh1cmwpKSB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IG12dENhY2hlLmdldCh1cmwpO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRNZXNoKFxuICAgICAgICAgICAgICAgIHZlY3RvckVsZW1lbnRzLmZpbmQoKGNvbmZpZykgPT4gY29uZmlnLnR5cGUgPT09IGtleSksXG4gICAgICAgICAgICAgICAgZmVhdHVyZXNba2V5XSxcbiAgICAgICAgICAgICAgICB0aWxlUmVjdCxcbiAgICAgICAgICAgICAgICBpZHhcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXG4gICAgICAgICAgICAudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChmZXRjaElkICE9PSB0aGlzLl9pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IHBiZiA9IG5ldyBQcm90b2J1ZihuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICAgICAgICAgICAgY29uc3QgdlRpbGUgPSBuZXcgVmVjdG9yVGlsZShwYmYpO1xuICAgICAgICAgICAgICBpZiAoIXZUaWxlLmxheWVycy5idWlsZGluZ3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHt9O1xuICAgICAgICAgICAgICBbXCJidWlsZGluZ3NcIiwgXCJyb2Fkc1wiLCBcIndhdGVyXCJdLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXZUaWxlLmxheWVyc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmZWF0dXJlc1t0eXBlXSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdlRpbGUubGF5ZXJzW3R5cGVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gdlRpbGUubGF5ZXJzW3R5cGVdXG4gICAgICAgICAgICAgICAgICAgIC5mZWF0dXJlKGkpXG4gICAgICAgICAgICAgICAgICAgIC50b0dlb0pTT04odGlsZS54LCB0aWxlLnksIHRpbGUueik7XG4gICAgICAgICAgICAgICAgICBzY2FsZUZlYXR1cmUoXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgIElTX1RJTEVfU1RZTEVcbiAgICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLShleHRlbnQueG1heCArIGV4dGVudC54bWluKSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC0oZXh0ZW50LnltYXggKyBleHRlbnQueW1pbikgLyAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIDogWy1leHRlbnQueG1pbiwgLWV4dGVudC55bWluXSxcbiAgICAgICAgICAgICAgICAgICAgW3NjYWxlWCwgc2NhbGVZXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzW3R5cGVdLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKElTX1RJTEVfU1RZTEUpIHtcbiAgICAgICAgICAgICAgICAgIGN1bGxCdWlsZGluZ1BvbHlnbnMoZmVhdHVyZXNbdHlwZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzLndhdGVyKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMud2F0ZXIgPSBbXG4gICAgICAgICAgICAgICAgICB1bmlvbkNvbXBsZXhQb2x5Z29ucyhcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMud2F0ZXIuZmlsdGVyKChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VvVHlwZSA9IGZlYXR1cmUuZ2VvbWV0cnkgJiYgZmVhdHVyZS5nZW9tZXRyeS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9UeXBlID09PSBcIlBvbHlnb25cIiB8fCBnZW9UeXBlID09PSBcIk11bHRpUG9seWdvblwiXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMucm9hZHMpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlcy5yb2FkcyA9IGZlYXR1cmVzLnJvYWRzLmZpbHRlcigoZmVhdHVyZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgZ2VvVHlwZSA9IGZlYXR1cmUuZ2VvbWV0cnkgJiYgZmVhdHVyZS5nZW9tZXRyeS50eXBlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZ2VvVHlwZSA9PT0gXCJMaW5lU3RyaW5nXCIgfHwgZ2VvVHlwZSA9PT0gXCJNdWx0aUxpbmVTdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIG12dENhY2hlLnNldCh1cmwsIGZlYXR1cmVzKTtcbiAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBib3VuZGluZ1JlY3QgfSA9IGNyZWF0ZUVsZW1lbnRNZXNoKFxuICAgICAgICAgICAgICAgICAgdmVjdG9yRWxlbWVudHMuZmluZCgoY29uZmlnKSA9PiBjb25maWcudHlwZSA9PT0ga2V5KSxcbiAgICAgICAgICAgICAgICAgIGZlYXR1cmVzW2tleV0sXG4gICAgICAgICAgICAgICAgICB0aWxlUmVjdCxcbiAgICAgICAgICAgICAgICAgIGlkeFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdW5pb25SZWN0KGFsbEJvdW5kaW5nUmVjdCwgYm91bmRpbmdSZWN0LCBhbGxCb3VuZGluZ1JlY3QpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbG9hZGluZy0tO1xuICAgICAgICAgICAgICBpZiAoSVNfVElMRV9TVFlMRSkge1xuICAgICAgICAgICAgICAgIGlmIChsb2FkaW5nID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBhcHAubWV0aG9kcy51cGRhdGVFYXJ0aEdyb3VuZChhbGxCb3VuZGluZ1JlY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGFwcC5tZXRob2RzLnJlbmRlcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgICAgZ2VuZXJhdGVDbG91ZHMoYXBwKSB7XG4gICAgICAgIGNvbnN0IGNsb3VkTnVtYmVyID0gSVNfVElMRV9TVFlMRSA/IDEwIDogMTU7XG4gICAgICAgIGNvbnN0IHBvaW50Q291bnQgPSAxMDA7XG4gICAgICAgIHRoaXMuX2Nsb3Vkc05vZGUucmVtb3ZlQWxsKCk7XG5cbiAgICAgICAgY29uc3QgY2xvdWRNYXRlcmlhbCA9IGFwcC5jcmVhdGVNYXRlcmlhbCh7XG4gICAgICAgICAgcm91Z2huZXNzOiAxLFxuICAgICAgICAgIGNvbG9yOiBjb25maWcuY2xvdWRDb2xvcixcbiAgICAgICAgfSk7XG4gICAgICAgIGNsb3VkTWF0ZXJpYWwubmFtZSA9IFwibWF0X2Nsb3VkXCI7XG5cbiAgICAgICAgZnVuY3Rpb24gcmFuZG9tSW5TcGhlcmUocikge1xuICAgICAgICAgIGNvbnN0IGFscGhhID0gTWF0aC5yYW5kb20oKSAqIE1hdGguUEkgKiAyO1xuICAgICAgICAgIGNvbnN0IGJldGEgPSBNYXRoLnJhbmRvbSgpICogTWF0aC5QSTtcblxuICAgICAgICAgIGNvbnN0IHIyID0gTWF0aC5zaW4oYmV0YSkgKiByO1xuICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLmNvcyhiZXRhKSAqIHI7XG4gICAgICAgICAgY29uc3QgeCA9IE1hdGguY29zKGFscGhhKSAqIHIyO1xuICAgICAgICAgIGNvbnN0IHogPSBNYXRoLnNpbihhbHBoYSkgKiByMjtcbiAgICAgICAgICByZXR1cm4gW3gsIHksIHpdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xvdWROdW1iZXI7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXJyID0gbmV3IEZsb2F0MzJBcnJheSg1ICogcG9pbnRDb3VudCAqIDMpO1xuICAgICAgICAgIGxldCBvZmYgPSAwO1xuICAgICAgICAgIGxldCBpbmRpY2VzID0gW107XG5cbiAgICAgICAgICBsZXQgZHggPSBNYXRoLnJhbmRvbSgpIC0gMC41O1xuICAgICAgICAgIGxldCBkeSA9IE1hdGgucmFuZG9tKCkgLSAwLjU7XG4gICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgICBkeCAvPSBsZW47XG4gICAgICAgICAgZHkgLz0gbGVuO1xuXG4gICAgICAgICAgY29uc3QgZGlzdCA9IDQgKyBNYXRoLnJhbmRvbSgpICogMjtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NPZmYgPSBpIC0gMiArIChNYXRoLnJhbmRvbSgpICogMC40IC0gMC4yKTtcbiAgICAgICAgICAgIGNvbnN0IHJCYXNlID0gMyAtIE1hdGguYWJzKHBvc09mZik7XG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRleE9mZnNldCA9IG9mZiAvIDM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIHJCYXNlICsgckJhc2U7XG4gICAgICAgICAgICAgIGNvbnN0IHB0ID0gcmFuZG9tSW5TcGhlcmUocik7XG4gICAgICAgICAgICAgIHBvaW50cy5wdXNoKHB0KTtcbiAgICAgICAgICAgICAgcG9zaXRpb25BcnJbb2ZmKytdID0gcHRbMF0gKyBwb3NPZmYgKiBkaXN0ICogZHg7XG4gICAgICAgICAgICAgIGlmIChJU19USUxFX1NUWUxFKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJbb2ZmKytdID0gcHRbMV07XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJbb2ZmKytdID0gcHRbMl0gKyBwb3NPZmYgKiBkaXN0ICogZHk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJbb2ZmKytdID0gcHRbMV0gKyBwb3NPZmYgKiBkaXN0ICogZHk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25BcnJbb2ZmKytdID0gcHRbMl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IHF1aWNraHVsbChwb2ludHMpO1xuICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCB0bXAubGVuZ3RoOyBtKyspIHtcbiAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKHRtcFttXVswXSArIHZlcnRleE9mZnNldCk7XG4gICAgICAgICAgICAgIGluZGljZXMucHVzaCh0bXBbbV1bMV0gKyB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICAgICAgICBpbmRpY2VzLnB1c2godG1wW21dWzJdICsgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBnZW8gPSBuZXcgR2VvbWV0cnkoKTtcbiAgICAgICAgICBnZW8uYXR0cmlidXRlcy5wb3NpdGlvbi52YWx1ZSA9IHBvc2l0aW9uQXJyO1xuICAgICAgICAgIGdlby5pbml0SW5kaWNlc0Zyb21BcnJheShpbmRpY2VzKTtcbiAgICAgICAgICBnZW8uZ2VuZXJhdGVGYWNlTm9ybWFscygpO1xuXG4gICAgICAgICAgY29uc3QgY2xvdWRNZXNoID0gYXBwLmNyZWF0ZU1lc2goXG4gICAgICAgICAgICBnZW8sXG4gICAgICAgICAgICBjbG91ZE1hdGVyaWFsLFxuICAgICAgICAgICAgdGhpcy5fY2xvdWRzTm9kZVxuICAgICAgICAgICk7XG4gICAgICAgICAgY2xvdWRNZXNoLmhlaWdodCA9IE1hdGgucmFuZG9tKCkgKiAxMCArIDIwO1xuICAgICAgICAgIGlmIChJU19USUxFX1NUWUxFKSB7XG4gICAgICAgICAgICBjbG91ZE1lc2gucG9zaXRpb24uc2V0QXJyYXkoW1xuICAgICAgICAgICAgICAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiA2MCxcbiAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSAqIDEwICsgMjUsXG4gICAgICAgICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDYwLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICBpZiAoSVNfVElMRV9TVFlMRSkge1xuICAgICAgICAgICAgICBjbG91ZE1lc2guc2NhbGUuc2V0KDAuNiwgMC42LCAwLjYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG91ZE1lc2gucG9zaXRpb24uc2V0QXJyYXkoXG4gICAgICAgICAgICAgIHJhbmRvbUluU3BoZXJlKGNvbmZpZy5yYWRpdXMgLyBNYXRoLnNxcnQoMikgKyBjbG91ZE1lc2guaGVpZ2h0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNsb3VkTWVzaC5sb29rQXQoVmVjdG9yMy5aRVJPKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXBwLm1ldGhvZHMucmVuZGVyKCk7XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGVDb2xvcigpIHtcbiAgICAgICAgdGhpcy5fZWFydGhOb2RlLmVhY2hDaGlsZCgobWVzaCkgPT4ge1xuICAgICAgICAgIG1lc2gubWF0ZXJpYWwuc2V0KFwiY29sb3JcIiwgY29uZmlnLmVhcnRoQ29sb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY2xvdWRzTm9kZS5lYWNoQ2hpbGQoKG1lc2gpID0+IHtcbiAgICAgICAgICBtZXNoLm1hdGVyaWFsLnNldChcImNvbG9yXCIsIGNvbmZpZy5jbG91ZENvbG9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9lbGVtZW50c01hdGVyaWFscykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnRzTWF0ZXJpYWxzW2tleV0uc2V0KFwiY29sb3JcIiwgY29uZmlnW2tleSArIFwiQ29sb3JcIl0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkdlJlbmRlcmVyLnJlbmRlcigpO1xuICAgICAgfSxcblxuICAgICAgcmVuZGVyKGFwcCkge1xuICAgICAgICB0aGlzLl9jb250cm9sLm9ydGhvZ3JhcGhpY0FzcGVjdCA9IGFwcC5yZW5kZXJlci5nZXRWaWV3cG9ydEFzcGVjdCgpO1xuICAgICAgICB0aGlzLl9hZHZSZW5kZXJlci5yZW5kZXIoKTtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9hZHZSZW5kZXJlci5yZW5kZXIoKTtcbiAgICAgICAgfSwgMjApO1xuICAgICAgfSxcblxuICAgICAgdXBkYXRlQXV0b1JvdGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fY29udHJvbC5yb3RhdGVTcGVlZCA9IGNvbmZpZy5yb3RhdGVTcGVlZCAqIDUwO1xuICAgICAgICB0aGlzLl9jb250cm9sLmF1dG9Sb3RhdGUgPSBNYXRoLmFicyhjb25maWcucm90YXRlU3BlZWQpID4gMC4zO1xuICAgICAgfSxcblxuICAgICAgdXBkYXRlU2t5KGFwcCkge1xuICAgICAgICBjb25maWcuc2t5XG4gICAgICAgICAgPyB0aGlzLl9za3lib3guYXR0YWNoU2NlbmUoYXBwLnNjZW5lKVxuICAgICAgICAgIDogdGhpcy5fc2t5Ym94LmRldGFjaFNjZW5lKCk7XG4gICAgICAgIHRoaXMuX2FkdlJlbmRlcmVyLnJlbmRlcigpO1xuICAgICAgfSxcblxuICAgICAgdXBkYXRlVmlzaWJpbGl0eShhcHApIHtcbiAgICAgICAgdGhpcy5fZWFydGhOb2RlLmludmlzaWJsZSA9ICFjb25maWcuc2hvd0VhcnRoO1xuICAgICAgICB0aGlzLl9jbG91ZHNOb2RlLmludmlzaWJsZSA9ICFjb25maWcuc2hvd0Nsb3VkO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnRzTm9kZXMuYnVpbGRpbmdzLmludmlzaWJsZSA9ICFjb25maWcuc2hvd0J1aWxkaW5ncztcbiAgICAgICAgdGhpcy5fZWxlbWVudHNOb2Rlcy5yb2Fkcy5pbnZpc2libGUgPSAhY29uZmlnLnNob3dSb2FkcztcbiAgICAgICAgdGhpcy5fZWxlbWVudHNOb2Rlcy53YXRlci5pbnZpc2libGUgPSAhY29uZmlnLnNob3dXYXRlcjtcblxuICAgICAgICBhcHAubWV0aG9kcy5yZW5kZXIoKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIGFwcDtcbn07XG5cbmNvbnN0IGNvbmZpZ0FwcCA9IChhcHApID0+IHtcbiAgY29uc29sZS5sb2coYXBwLCBcImFwcFwiKTtcbiAgaWYgKCFhcHApIHJldHVybjtcblxuICBmdW5jdGlvbiB1cGRhdGVBbGwoKSB7XG4gICAgaWYgKCFJU19USUxFX1NUWUxFKSB7XG4gICAgICBhcHAubWV0aG9kcy51cGRhdGVFYXJ0aFNwaGVyZSgpO1xuICAgIH1cbiAgICBhcHAubWV0aG9kcy51cGRhdGVFbGVtZW50cygpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVXJsU3RhdGUoKSB7XG4gICAgaGlzdG9yeS5wdXNoU3RhdGUoXCJcIiwgXCJcIiwgbWFrZVVybCgpKTtcbiAgfVxuXG4gIGxldCB0aW1lb3V0O1xuICBtYXAub24oXCJtb3ZlZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYXBwLm1ldGhvZHMudXBkYXRlRWxlbWVudHMoKTtcbiAgICAgIHVwZGF0ZVVybFN0YXRlKCk7XG4gICAgfSwgNTAwKTtcbiAgfSk7XG4gIG1hcC5vbihcIm1vdmluZ1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY2VudGVyID0gbWFwLmdldENlbnRlcigpO1xuICAgIHVybE9wdHMubG5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsbmdcIikudmFsdWUgPSBjZW50ZXIueDtcbiAgICB1cmxPcHRzLmxhdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGF0XCIpLnZhbHVlID0gY2VudGVyLnk7XG4gIH0pO1xuICBtYXAub24oXCJ6b29tZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYXBwLm1ldGhvZHMudXBkYXRlRWxlbWVudHMoKTtcbiAgICB9LCA1MDApO1xuICB9KTtcblxuICAvLyBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKFxuICAvLyAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjc3R5bGUtbGlzdCBsaVwiKSxcbiAgLy8gICAobGkpID0+IHtcbiAgLy8gICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIC8vICAgICAgIHVybE9wdHMuc3R5bGUgPSBsaS5jbGFzc05hbWU7XG4gIC8vICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IG1ha2VVcmwoKTtcbiAgLy8gICAgIH0pO1xuICAvLyAgIH1cbiAgLy8gKTtcblxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xvY2F0ZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAvLyAgIHVybE9wdHMubG5nID0gK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG5nXCIpLnZhbHVlO1xuICAvLyAgIHVybE9wdHMubGF0ID0gK2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbGF0XCIpLnZhbHVlO1xuICAvLyAgIG1hcC5zZXRDZW50ZXIoeyB4OiB1cmxPcHRzLmxuZywgeTogdXJsT3B0cy5sYXQgfSk7XG4gIC8vICAgYXBwLm1ldGhvZHMudXBkYXRlRWxlbWVudHMoKTtcbiAgLy8gICB1cGRhdGVVcmxTdGF0ZSgpO1xuICAvLyB9KTtcblxuICAvLyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc2V0XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIC8vICAgdXJsT3B0cy5sbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xuZ1wiKS52YWx1ZSA9IERFRkFVTFRfTE5HO1xuICAvLyAgIHVybE9wdHMubGF0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNsYXRcIikudmFsdWUgPSBERUZBVUxUX0xBVDtcbiAgLy8gICBtYXAuc2V0Q2VudGVyKHsgeDogdXJsT3B0cy5sbmcsIHk6IHVybE9wdHMubGF0IH0pO1xuICAvLyAgIGFwcC5tZXRob2RzLnVwZGF0ZUVsZW1lbnRzKCk7XG4gIC8vICAgdXBkYXRlVXJsU3RhdGUoKTtcbiAgLy8gfSk7XG5cbiAgY29uc3QgdWkgPSBuZXcgZGF0LkdVSSgpO1xuICBjb25zb2xlLmxvZyh1aSwgXCJmdWNrIHVpXCIpO1xuICB1aS5hZGQoYWN0aW9ucywgXCJyZXNldFwiKTtcbiAgaWYgKCFJU19USUxFX1NUWUxFKSB7XG4gICAgdWkuYWRkKGNvbmZpZywgXCJyYWRpdXNcIiwgMzAsIDEwMClcbiAgICAgIC5zdGVwKDEpXG4gICAgICAub25DaGFuZ2UodXBkYXRlQWxsKVxuICAgICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcbiAgfVxuICB1aS5hZGQoY29uZmlnLCBcInJvdGF0ZVNwZWVkXCIsIC0yLCAyKVxuICAgIC5zdGVwKDAuMDEpXG4gICAgLm9uQ2hhbmdlKGFwcC5tZXRob2RzLnVwZGF0ZUF1dG9Sb3RhdGUpXG4gICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcbiAgdWkuYWRkKGNvbmZpZywgXCJza3lcIilcbiAgICAub25DaGFuZ2UoYXBwLm1ldGhvZHMudXBkYXRlU2t5KVxuICAgIC5vbkZpbmlzaENoYW5nZSh1cGRhdGVVcmxTdGF0ZSk7XG5cbiAgY29uc3QgZWFydGhGb2xkZXIgPSB1aS5hZGRGb2xkZXIoXCJFYXJ0aFwiKTtcbiAgZWFydGhGb2xkZXJcbiAgICAuYWRkKGNvbmZpZywgXCJzaG93RWFydGhcIilcbiAgICAub25DaGFuZ2UoYXBwLm1ldGhvZHMudXBkYXRlVmlzaWJpbGl0eSlcbiAgICAub25GaW5pc2hDaGFuZ2UodXBkYXRlVXJsU3RhdGUpO1xuICBpZiAoSVNfVElMRV9TVFlMRSkge1xuICAgIGVhcnRoRm9sZGVyXG4gICAgICAuYWRkKGNvbmZpZywgXCJlYXJ0aERlcHRoXCIsIDEsIDUwKVxuICAgICAgLm9uQ2hhbmdlKGFwcC5tZXRob2RzLnVwZGF0ZUVhcnRoR3JvdW5kKVxuICAgICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcbiAgfVxuICBlYXJ0aEZvbGRlclxuICAgIC5hZGRDb2xvcihjb25maWcsIFwiZWFydGhDb2xvclwiKVxuICAgIC5vbkNoYW5nZShhcHAubWV0aG9kcy51cGRhdGVDb2xvcilcbiAgICAub25GaW5pc2hDaGFuZ2UodXBkYXRlVXJsU3RhdGUpO1xuXG4gIGNvbnN0IGJ1aWxkaW5nc0ZvbGRlciA9IHVpLmFkZEZvbGRlcihcIkJ1aWxkaW5nc1wiKTtcbiAgYnVpbGRpbmdzRm9sZGVyXG4gICAgLmFkZChjb25maWcsIFwic2hvd0J1aWxkaW5nc1wiKVxuICAgIC5vbkNoYW5nZShhcHAubWV0aG9kcy51cGRhdGVWaXNpYmlsaXR5KVxuICAgIC5vbkZpbmlzaENoYW5nZSh1cGRhdGVVcmxTdGF0ZSk7XG4gIGJ1aWxkaW5nc0ZvbGRlclxuICAgIC5hZGRDb2xvcihjb25maWcsIFwiYnVpbGRpbmdzQ29sb3JcIilcbiAgICAub25DaGFuZ2UoYXBwLm1ldGhvZHMudXBkYXRlQ29sb3IpXG4gICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcblxuICBjb25zdCByb2Fkc0ZvbGRlciA9IHVpLmFkZEZvbGRlcihcIlJvYWRzXCIpO1xuICByb2Fkc0ZvbGRlclxuICAgIC5hZGQoY29uZmlnLCBcInNob3dSb2Fkc1wiKVxuICAgIC5vbkNoYW5nZShhcHAubWV0aG9kcy51cGRhdGVWaXNpYmlsaXR5KVxuICAgIC5vbkZpbmlzaENoYW5nZSh1cGRhdGVVcmxTdGF0ZSk7XG4gIHJvYWRzRm9sZGVyXG4gICAgLmFkZENvbG9yKGNvbmZpZywgXCJyb2Fkc0NvbG9yXCIpXG4gICAgLm9uQ2hhbmdlKGFwcC5tZXRob2RzLnVwZGF0ZUNvbG9yKVxuICAgIC5vbkZpbmlzaENoYW5nZSh1cGRhdGVVcmxTdGF0ZSk7XG5cbiAgY29uc3Qgd2F0ZXJGb2xkZXIgPSB1aS5hZGRGb2xkZXIoXCJXYXRlclwiKTtcbiAgd2F0ZXJGb2xkZXJcbiAgICAuYWRkKGNvbmZpZywgXCJzaG93V2F0ZXJcIilcbiAgICAub25DaGFuZ2UoYXBwLm1ldGhvZHMudXBkYXRlVmlzaWJpbGl0eSlcbiAgICAub25GaW5pc2hDaGFuZ2UodXBkYXRlVXJsU3RhdGUpO1xuICB3YXRlckZvbGRlclxuICAgIC5hZGRDb2xvcihjb25maWcsIFwid2F0ZXJDb2xvclwiKVxuICAgIC5vbkNoYW5nZShhcHAubWV0aG9kcy51cGRhdGVDb2xvcilcbiAgICAub25GaW5pc2hDaGFuZ2UodXBkYXRlVXJsU3RhdGUpO1xuXG4gIGNvbnN0IGNsb3VkRm9sZGVyID0gdWkuYWRkRm9sZGVyKFwiQ2xvdWRcIik7XG4gIGNsb3VkRm9sZGVyXG4gICAgLmFkZChjb25maWcsIFwic2hvd0Nsb3VkXCIpXG4gICAgLm9uQ2hhbmdlKGFwcC5tZXRob2RzLnVwZGF0ZVZpc2liaWxpdHkpXG4gICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcbiAgY2xvdWRGb2xkZXJcbiAgICAuYWRkQ29sb3IoY29uZmlnLCBcImNsb3VkQ29sb3JcIilcbiAgICAub25DaGFuZ2UoYXBwLm1ldGhvZHMudXBkYXRlQ29sb3IpXG4gICAgLm9uRmluaXNoQ2hhbmdlKHVwZGF0ZVVybFN0YXRlKTtcbiAgY2xvdWRGb2xkZXIuYWRkKGFjdGlvbnMsIFwicmFuZG9tQ2xvdWRcIik7XG5cbiAgdWkuYWRkKGFjdGlvbnMsIFwiZG93bmxvYWRPQkpcIik7XG59O1xuXG5leHBvcnQgY29uc3QgTGl0dGxlQ2l0eSA9ICgpID0+IHtcbiAgY29uc3Qgdmlld3BvcnQgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xuICBjb25zb2xlLmxvZyh2aWV3cG9ydCwgXCJib3hcIik7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIXZpZXdwb3J0LmN1cnJlbnQpIHJldHVybjtcbiAgICBjb25zb2xlLmxvZyh2aWV3cG9ydCk7XG4gICAgaW5pdE1hcCgpO1xuICAgIGluaXRDbGF5KHZpZXdwb3J0LmN1cnJlbnQpO1xuICAgIC8vIGFwcCAmJiBjb25maWdBcHAoYXBwKTtcbiAgfSwgW3ZpZXdwb3J0XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGRpdiBpZD1cInZpZXdwb3J0XCIgcmVmPXt2aWV3cG9ydH0gY2xhc3NOYW1lPXtzdHlsZXMudmlld3BvcnR9Lz5cbiAgICAgIDxkaXYgaWQ9XCJtYXBcIiBjbGFzc05hbWU9e3N0eWxlcy5tYXB9PlxuICAgICAgICA8ZGl2IGlkPVwibG9jYXRpb25cIj48L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIm1hcC1tYWluXCIgY2xhc3NOYW1lPXtzdHlsZXMubWFwTWFpbn0+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpdHRsZUNpdHk7XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwic3R5bGVzIiwiY2xheWdsIiwiZXh0cnVkZUdlb0pTT04iLCJleHRydWRlUG9seWdvbiIsInBsdWdpbiIsImdlb21ldHJ5IiwiYnVpbHRpbkdlb21ldHJpZXMiLCJHZW9tZXRyeSIsIlZlY3RvcjMiLCJQcm90b2J1ZiIsIkxSVSIsInF1aWNraHVsbCIsIkpTWmlwIiwidmVjMiIsIkNsYXlBZHZhbmNlZFJlbmRlcmVyIiwibWFwdGFsa3MiLCJ0b09CSiIsInRlc3NlbGxhdGUiLCJkaXN0b3J0aW9uIiwiVmVjdG9yVGlsZSIsInJlcXVpcmUiLCJtdnRDYWNoZSIsIm1heCIsIkRFRkFVTFRfTE5HIiwiREVGQVVMVF9MQVQiLCJERUZBVUxUX0NPTkZJRyIsInJhZGl1cyIsImN1cnZlbmVzcyIsInNob3dFYXJ0aCIsImVhcnRoRGVwdGgiLCJlYXJ0aENvbG9yIiwic2hvd0J1aWxkaW5ncyIsImJ1aWxkaW5nc0NvbG9yIiwic2hvd1JvYWRzIiwicm9hZHNDb2xvciIsInNob3dXYXRlciIsIndhdGVyQ29sb3IiLCJzaG93Q2xvdWQiLCJjbG91ZENvbG9yIiwicm90YXRlU3BlZWQiLCJza3kiLCJzZWFyY2hTdHIiLCJsb2NhdGlvbiIsInNlYXJjaCIsInNsaWNlIiwic2VhcmNoSXRlbXMiLCJzcGxpdCIsInVybE9wdHMiLCJmb3JFYWNoIiwiaXRlbSIsImFyciIsImtleSIsInZhbCIsImxuZyIsImxhdCIsIm1ha2VVcmwiLCJkaWZmQ29uZmlnIiwiY29uZmlnIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInVybEl0ZW1zIiwicHVzaCIsImpvaW4iLCJJU19USUxFX1NUWUxFIiwic3R5bGUiLCJUSUxFX1NJWkUiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXJzZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImUiLCJhY3Rpb25zIiwiZG93bmxvYWRPQkoiLCJkb3dubG9hZGluZyIsImFwcCIsInNjZW5lIiwibXRsbGliIiwib2JqIiwibXRsIiwiemlwIiwiZmlsZSIsImdlbmVyYXRlQXN5bmMiLCJ0eXBlIiwiY29tcHJlc3Npb24iLCJ0aGVuIiwiY29udGVudCIsInNhdmVBcyIsImNhdGNoIiwiY29uc29sZSIsImVycm9yIiwidG9TdHJpbmciLCJyYW5kb21DbG91ZCIsIm1ldGhvZHMiLCJnZW5lcmF0ZUNsb3VkcyIsInJlc2V0IiwidWkiLCJ1cGRhdGVEaXNwbGF5Iiwid2luZG93IiwibXZ0VXJsVHBsIiwibWFwIiwibWFpbkxheWVyIiwiaW5pdE1hcCIsIlRpbGVMYXllciIsInRpbGVTaXplIiwidXJsVGVtcGxhdGUiLCJzdWJkb21haW5zIiwiTWFwIiwiY2VudGVyIiwiem9vbSIsImJhc2VMYXllciIsInNldE1pblpvb20iLCJzZXRNYXhab29tIiwiZmFjZXMiLCJ2ZWN0b3JFbGVtZW50cyIsImdlb21ldHJ5VHlwZSIsImRlcHRoIiwiZmVhdHVyZSIsInByb3BlcnRpZXMiLCJoZWlnaHQiLCJpdGVyYXRlRmVhdHVyZUNvb3JkaW5hdGVzIiwiY2IiLCJpIiwiY29vcmRpbmF0ZXMiLCJsZW5ndGgiLCJrIiwic3ViZGl2aWRlTG9uZ0VkZ2VzIiwiZmVhdHVyZXMiLCJtYXhEaXN0IiwiYWRkUG9pbnRzIiwicG9pbnRzIiwibmV3UG9pbnRzIiwic3ViIiwidiIsImRpc3QiLCJsZW4iLCJzY2FsZSIsImQiLCJzY2FsZUFuZEFkZCIsInNjYWxlRmVhdHVyZSIsIm9mZnNldCIsInNjYWxlUG9pbnRzIiwicHRzIiwidW5pb25Db21wbGV4UG9seWdvbnMiLCJtZXJnZWRDb29yZGluYXRlcyIsInBvbHkiLCJQb2x5Qm9vbCIsInBvbHlnb25Gcm9tR2VvSlNPTiIsInBvbHlnb25Ub0dlb0pTT04iLCJjdWxsQnVpbGRpbmdQb2x5Z25zIiwiZWFydGhDb29yZHMiLCJnZXRSZWN0Q29vcmRzIiwiZWFydGhSZWN0IiwiaW50ZXJzZWN0ZWRQb2x5IiwiaW50ZXJzZWN0IiwicmVnaW9ucyIsImludmVyc2UiLCJ1bmlvblJlY3QiLCJvdXQiLCJhIiwiYiIsIngiLCJNYXRoIiwibWluIiwieSIsIndpZHRoIiwicmVjdCIsImluaXRDbGF5IiwiY29udGFpbmVyRG9tIiwibG9nIiwiYXBwbGljYXRpb24iLCJjcmVhdGUiLCJhdXRvUmVuZGVyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImluaXQiLCJfYWR2UmVuZGVyZXIiLCJyZW5kZXJlciIsInRpbWVsaW5lIiwic2hhZG93IiwidGVtcG9yYWxTdXBlclNhbXBsaW5nIiwiZW5hYmxlIiwiZHluYW1pYyIsInBvc3RFZmZlY3QiLCJibG9vbSIsInNjcmVlblNwYWNlQW1iaWVudE9jY2x1c2lvbiIsImludGVuc2l0eSIsIkZYQUEiLCJzZXRTaGFkb3ciLCJrZXJuZWxTaXplIiwiYmx1clNpemUiLCJjYW1lcmEiLCJjcmVhdGVDYW1lcmEiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwiZ2V0Vmlld3BvcnRBc3BlY3QiLCJyaWdodCIsIm5lYXIiLCJmYXIiLCJ1cGRhdGUiLCJfY2FtZXJhIiwiX2VhcnRoTm9kZSIsImNyZWF0ZU5vZGUiLCJfY2xvdWRzTm9kZSIsIl9lbGVtZW50c05vZGVzIiwiX2VsZW1lbnRzTWF0ZXJpYWxzIiwiX2RpZmZ1c2VUZXgiLCJsb2FkVGV4dHVyZVN5bmMiLCJhbmlzb3Ryb3BpYyIsImVsIiwicm90YXRpb24iLCJyb3RhdGVYIiwiUEkiLCJjcmVhdGVNYXRlcmlhbCIsImRpZmZ1c2VNYXAiLCJ1dlJlcGVhdCIsImNvbG9yIiwicm91Z2huZXNzIiwibmFtZSIsImxpZ2h0IiwiY3JlYXRlRGlyZWN0aW9uYWxMaWdodCIsInNoYWRvd1Jlc29sdXRpb24iLCJzaGFkb3dCaWFzIiwiX2NvbnRyb2wiLCJPcmJpdENvbnRyb2wiLCJ0YXJnZXQiLCJkb21FbGVtZW50IiwiY29udGFpbmVyIiwicm90YXRlU2Vuc2l0aXZpdHkiLCJvcnRob2dyYXBoaWNBc3BlY3QiLCJzZXRPcHRpb24iLCJiZXRhIiwiYWxwaGEiLCJtaW5BbHBoYSIsIm1heEFscGhhIiwib24iLCJyZW5kZXIiLCJ1cGRhdGVFYXJ0aFNwaGVyZSIsInVwZGF0ZUVsZW1lbnRzIiwidXBkYXRlVmlzaWJpbGl0eSIsImNyZWF0ZUFtYmllbnRDdWJlbWFwTGlnaHQiLCJyZXN1bHQiLCJza3lib3giLCJTa3lib3giLCJlbnZpcm9ubWVudE1hcCIsInNwZWN1bGFyIiwiY3ViZW1hcCIsIm1hdGVyaWFsIiwic2V0IiwiX3NreWJveCIsInJlbW92ZUFsbCIsImVhcnRoTWF0IiwiZmFjZSIsInBsYW5lR2VvIiwiUGxhbmUiLCJ3aWR0aFNlZ21lbnRzIiwiaGVpZ2h0U2VnbWVudHMiLCJjcmVhdGVNZXNoIiwiYXR0cmlidXRlcyIsInBvc2l0aW9uIiwidmFsdWUiLCJnZW5lcmF0ZVZlcnRleE5vcm1hbHMiLCJlYWNoQ2hpbGQiLCJjbG91ZE1lc2giLCJzcXJ0Iiwibm9ybWFsaXplIiwidXBkYXRlRWFydGhHcm91bmQiLCJ1diIsIm5vcm1hbCIsImluZGljZXMiLCJnZW8iLCJ0ZXhjb29yZDAiLCJ1cGRhdGVCb3VuZGluZ0JveCIsIm1lc2giLCJubWFlIiwiY3JlYXRlRWxlbWVudE1lc2giLCJlbENvbmZpZyIsImJvdW5kaW5nUmVjdCIsImlkeCIsImxpbmVXaWR0aCIsImV4Y2x1ZGVCb3R0b20iLCJzaW1wbGlmeSIsImVsZW1lbnRzTWF0ZXJpYWxzIiwiZWxlbWVudHNOb2RlcyIsInBvc2l0aW9uQW5pbWF0ZUZyb20iLCJGbG9hdDMyQXJyYXkiLCJwb3NpdGlvbkFuaW1hdGVUbyIsInoiLCJ0cmFuc2l0aW9uUG9zaXRpb24iLCJpbnZpc2libGUiLCJwIiwiYnVpbGRpbmdBbmltYXRvcnMiLCJhbmltYXRlIiwid2hlbiIsImRlbGF5IiwiZHVyaW5nIiwiZGlydHkiLCJhZHZSZW5kZXJlciIsInN0YXJ0IiwiX2lkIiwicmFuZG9tIiwiX2J1aWxkaW5nQW5pbWF0b3JzIiwic3RvcCIsInRpbGVzIiwiZ2V0VGlsZXMiLCJ0aWxlR3JpZHMiLCJnZXRDZW50ZXIiLCJmaWx0ZXIiLCJ0aWxlIiwiZXh0ZW50IiwiZXh0ZW50MmQiLCJjb252ZXJ0VG8iLCJjIiwicG9pbnRUb0Nvb3JkIiwidG9KU09OIiwieG1heCIsInhtaW4iLCJ5bWF4IiwieW1pbiIsImxvYWRpbmciLCJmZXRjaElkIiwic2NhbGVYIiwic2NhbGVZIiwidGlsZVJlY3QiLCJhbGxCb3VuZGluZ1JlY3QiLCJJbmZpbml0eSIsInVybCIsInJlcGxhY2UiLCJnZXQiLCJmaW5kIiwiZmV0Y2giLCJtb2RlIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsImJ1ZmZlciIsInBiZiIsIlVpbnQ4QXJyYXkiLCJ2VGlsZSIsImxheWVycyIsImJ1aWxkaW5ncyIsInRvR2VvSlNPTiIsIndhdGVyIiwiZ2VvVHlwZSIsInJvYWRzIiwicmFuZG9tSW5TcGhlcmUiLCJyIiwicjIiLCJzaW4iLCJjb3MiLCJjbG91ZE51bWJlciIsInBvaW50Q291bnQiLCJjbG91ZE1hdGVyaWFsIiwicG9zaXRpb25BcnIiLCJvZmYiLCJkeCIsImR5IiwicG9zT2ZmIiwickJhc2UiLCJhYnMiLCJ2ZXJ0ZXhPZmZzZXQiLCJwdCIsInRtcCIsIm0iLCJpbml0SW5kaWNlc0Zyb21BcnJheSIsImdlbmVyYXRlRmFjZU5vcm1hbHMiLCJzZXRBcnJheSIsImxvb2tBdCIsIlpFUk8iLCJ1cGRhdGVDb2xvciIsInNldFRpbWVvdXQiLCJ1cGRhdGVBdXRvUm90YXRlIiwiYXV0b1JvdGF0ZSIsInVwZGF0ZVNreSIsImF0dGFjaFNjZW5lIiwiZGV0YWNoU2NlbmUiLCJjb25maWdBcHAiLCJ1cGRhdGVBbGwiLCJ1cGRhdGVVcmxTdGF0ZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZGF0IiwiR1VJIiwiYWRkIiwic3RlcCIsIm9uQ2hhbmdlIiwib25GaW5pc2hDaGFuZ2UiLCJlYXJ0aEZvbGRlciIsImFkZEZvbGRlciIsImFkZENvbG9yIiwiYnVpbGRpbmdzRm9sZGVyIiwicm9hZHNGb2xkZXIiLCJ3YXRlckZvbGRlciIsImNsb3VkRm9sZGVyIiwiTGl0dGxlQ2l0eSIsInZpZXdwb3J0IiwiY3VycmVudCIsImRpdiIsImlkIiwicmVmIiwiY2xhc3NOYW1lIiwibWFwTWFpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/LittleCity/index.tsx\n");

/***/ })

});