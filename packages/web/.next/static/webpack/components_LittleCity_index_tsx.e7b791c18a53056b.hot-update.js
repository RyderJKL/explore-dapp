/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("components_LittleCity_index_tsx",{

/***/ "../../node_modules/get-plane-normal/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/get-plane-normal/index.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\")\nvar sub = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar tmp = [0, 0, 0]\n\nmodule.exports = planeNormal\n\nfunction planeNormal (out, point1, point2, point3) {\n  sub(out, point1, point2)\n  sub(tmp, point2, point3)\n  cross(out, out, tmp)\n  return normalize(out, out)\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dldC1wbGFuZS1ub3JtYWwvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMsa0VBQW1CO0FBQzNDLFVBQVUsbUJBQU8sQ0FBQyxnRUFBa0I7QUFDcEMsWUFBWSxtQkFBTyxDQUFDLDBEQUFlO0FBQ25DOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL2dldC1wbGFuZS1ub3JtYWwvaW5kZXguanM/MzBmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnZ2wtdmVjMy9ub3JtYWxpemUnKVxudmFyIHN1YiA9IHJlcXVpcmUoJ2dsLXZlYzMvc3VidHJhY3QnKVxudmFyIGNyb3NzID0gcmVxdWlyZSgnZ2wtdmVjMy9jcm9zcycpXG52YXIgdG1wID0gWzAsIDAsIDBdXG5cbm1vZHVsZS5leHBvcnRzID0gcGxhbmVOb3JtYWxcblxuZnVuY3Rpb24gcGxhbmVOb3JtYWwgKG91dCwgcG9pbnQxLCBwb2ludDIsIHBvaW50Mykge1xuICBzdWIob3V0LCBwb2ludDEsIHBvaW50MilcbiAgc3ViKHRtcCwgcG9pbnQyLCBwb2ludDMpXG4gIGNyb3NzKG91dCwgb3V0LCB0bXApXG4gIHJldHVybiBub3JtYWxpemUob3V0LCBvdXQpXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/get-plane-normal/index.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/add.js":
/*!*****************************************!*\
  !*** ../../node_modules/gl-vec3/add.js ***!
  \*****************************************/
/***/ (function(module) {

eval("module.exports = add;\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n    out[0] = a[0] + b[0]\n    out[1] = a[1] + b[1]\n    out[2] = a[2] + b[2]\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvYWRkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvYWRkLmpzPzcwMGMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhZGQ7XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSArIGJbMF1cbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXVxuICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdXG4gICAgcmV0dXJuIG91dFxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/add.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/copy.js":
/*!******************************************!*\
  !*** ../../node_modules/gl-vec3/copy.js ***!
  \******************************************/
/***/ (function(module) {

eval("module.exports = copy;\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvY29weS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvY29weS5qcz84OTk2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gY29weTtcblxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgIG91dFswXSA9IGFbMF1cbiAgICBvdXRbMV0gPSBhWzFdXG4gICAgb3V0WzJdID0gYVsyXVxuICAgIHJldHVybiBvdXRcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/copy.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/cross.js":
/*!*******************************************!*\
  !*** ../../node_modules/gl-vec3/cross.js ***!
  \*******************************************/
/***/ (function(module) {

eval("module.exports = cross;\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2]\n\n    out[0] = ay * bz - az * by\n    out[1] = az * bx - ax * bz\n    out[2] = ax * by - ay * bx\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvY3Jvc3MuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9nbC12ZWMzL2Nyb3NzLmpzPzIyNTIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBjcm9zcztcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgICB2YXIgYXggPSBhWzBdLCBheSA9IGFbMV0sIGF6ID0gYVsyXSxcbiAgICAgICAgYnggPSBiWzBdLCBieSA9IGJbMV0sIGJ6ID0gYlsyXVxuXG4gICAgb3V0WzBdID0gYXkgKiBieiAtIGF6ICogYnlcbiAgICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBielxuICAgIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4XG4gICAgcmV0dXJuIG91dFxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/cross.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/distance.js":
/*!**********************************************!*\
  !*** ../../node_modules/gl-vec3/distance.js ***!
  \**********************************************/
/***/ (function(module) {

eval("module.exports = distance;\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvZGlzdGFuY2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9nbC12ZWMzL2Rpc3RhbmNlLmpzPzg3NzQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBkaXN0YW5jZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICAgIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICAgIHkgPSBiWzFdIC0gYVsxXSxcbiAgICAgICAgeiA9IGJbMl0gLSBhWzJdXG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopXG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/distance.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/dot.js":
/*!*****************************************!*\
  !*** ../../node_modules/gl-vec3/dot.js ***!
  \*****************************************/
/***/ (function(module) {

eval("module.exports = dot;\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvZG90LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtdmVjMy9kb3QuanM/MzAxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGRvdDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cbmZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gICAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/dot.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/length.js":
/*!********************************************!*\
  !*** ../../node_modules/gl-vec3/length.js ***!
  \********************************************/
/***/ (function(module) {

eval("module.exports = length;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return Math.sqrt(x*x + y*y + z*z)\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvbGVuZ3RoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9nbC12ZWMzL2xlbmd0aC5qcz9mMmNlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbGVuZ3RoO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl1cbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeilcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/length.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/normalize.js":
/*!***********************************************!*\
  !*** ../../node_modules/gl-vec3/normalize.js ***!
  \***********************************************/
/***/ (function(module) {

eval("module.exports = normalize;\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    var len = x*x + y*y + z*z\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len)\n        out[0] = a[0] * len\n        out[1] = a[1] * len\n        out[2] = a[2] * len\n    }\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvbm9ybWFsaXplLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvbm9ybWFsaXplLmpzPzg2NzEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemU7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl1cbiAgICB2YXIgbGVuID0geCp4ICsgeSp5ICsgeip6XG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBsZW5cbiAgICAgICAgb3V0WzFdID0gYVsxXSAqIGxlblxuICAgICAgICBvdXRbMl0gPSBhWzJdICogbGVuXG4gICAgfVxuICAgIHJldHVybiBvdXRcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/normalize.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/scale.js":
/*!*******************************************!*\
  !*** ../../node_modules/gl-vec3/scale.js ***!
  \*******************************************/
/***/ (function(module) {

eval("module.exports = scale;\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    out[2] = a[2] * b\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc2NhbGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtdmVjMy9zY2FsZS5qcz9kN2YxIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gc2NhbGU7XG5cbi8qKlxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gKiBiXG4gICAgb3V0WzFdID0gYVsxXSAqIGJcbiAgICBvdXRbMl0gPSBhWzJdICogYlxuICAgIHJldHVybiBvdXRcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/scale.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/scaleAndAdd.js":
/*!*************************************************!*\
  !*** ../../node_modules/gl-vec3/scaleAndAdd.js ***!
  \*************************************************/
/***/ (function(module) {

eval("module.exports = scaleAndAdd;\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale)\n    out[1] = a[1] + (b[1] * scale)\n    out[2] = a[2] + (b[2] * scale)\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc2NhbGVBbmRBZGQuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc2NhbGVBbmRBZGQuanM/YzhhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHNjYWxlQW5kQWRkO1xuXG4vKipcbiAqIEFkZHMgdHdvIHZlYzMncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gICAgb3V0WzBdID0gYVswXSArIChiWzBdICogc2NhbGUpXG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpXG4gICAgb3V0WzJdID0gYVsyXSArIChiWzJdICogc2NhbGUpXG4gICAgcmV0dXJuIG91dFxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/scaleAndAdd.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredDistance.js":
/*!*****************************************************!*\
  !*** ../../node_modules/gl-vec3/squaredDistance.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("module.exports = squaredDistance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2]\n    return x*x + y*y + z*z\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc3F1YXJlZERpc3RhbmNlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtdmVjMy9zcXVhcmVkRGlzdGFuY2UuanM/Mzk1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHNxdWFyZWREaXN0YW5jZTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XG4gICAgdmFyIHggPSBiWzBdIC0gYVswXSxcbiAgICAgICAgeSA9IGJbMV0gLSBhWzFdLFxuICAgICAgICB6ID0gYlsyXSAtIGFbMl1cbiAgICByZXR1cm4geCp4ICsgeSp5ICsgeip6XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/squaredDistance.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/squaredLength.js":
/*!***************************************************!*\
  !*** ../../node_modules/gl-vec3/squaredLength.js ***!
  \***************************************************/
/***/ (function(module) {

eval("module.exports = squaredLength;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2]\n    return x*x + y*y + z*z\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc3F1YXJlZExlbmd0aC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtdmVjMy9zcXVhcmVkTGVuZ3RoLmpzP2ZiMDciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBzcXVhcmVkTGVuZ3RoO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cbmZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICAgIHZhciB4ID0gYVswXSxcbiAgICAgICAgeSA9IGFbMV0sXG4gICAgICAgIHogPSBhWzJdXG4gICAgcmV0dXJuIHgqeCArIHkqeSArIHoqelxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/squaredLength.js\n");

/***/ }),

/***/ "../../node_modules/gl-vec3/subtract.js":
/*!**********************************************!*\
  !*** ../../node_modules/gl-vec3/subtract.js ***!
  \**********************************************/
/***/ (function(module) {

eval("module.exports = subtract;\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n    out[0] = a[0] - b[0]\n    out[1] = a[1] - b[1]\n    out[2] = a[2] - b[2]\n    return out\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLXZlYzMvc3VidHJhY3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtdmVjMy9zdWJ0cmFjdC5qcz84OGVhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gc3VidHJhY3Q7XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdXG4gICAgb3V0WzFdID0gYVsxXSAtIGJbMV1cbiAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXVxuICAgIHJldHVybiBvdXRcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/gl-vec3/subtract.js\n");

/***/ }),

/***/ "../../node_modules/ms/index.js":
/*!**************************************!*\
  !*** ../../node_modules/ms/index.js ***!
  \**************************************/
/***/ (function(module) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/YjQyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHcgPSBkICogNztcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiB2YWwubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZSh2YWwpO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbCkpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKC0/KD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnd2Vla3MnOlxuICAgIGNhc2UgJ3dlZWsnOlxuICAgIGNhc2UgJ3cnOlxuICAgICAgcmV0dXJuIG4gKiB3O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgdmFyIG1zQWJzID0gTWF0aC5hYnMobXMpO1xuICBpZiAobXNBYnMgPj0gZCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBkLCAnZGF5Jyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IGgpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgaCwgJ2hvdXInKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBtLCAnbWludXRlJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgcywgJ3NlY29uZCcpO1xuICB9XG4gIHJldHVybiBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbXNBYnMsIG4sIG5hbWUpIHtcbiAgdmFyIGlzUGx1cmFsID0gbXNBYnMgPj0gbiAqIDEuNTtcbiAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBuKSArICcgJyArIG5hbWUgKyAoaXNQbHVyYWwgPyAncycgOiAnJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/ms/index.js\n");

/***/ }),

/***/ "./components/LittleCity/index.tsx":
/*!*****************************************!*\
  !*** ./components/LittleCity/index.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LittleCity\": function() { return /* binding */ LittleCity; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _index_module_css__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./index.module.css */ \"./components/LittleCity/index.module.css\");\n/* harmony import */ var _index_module_css__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(_index_module_css__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var geometry_extrude__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! geometry-extrude */ \"../../node_modules/geometry-extrude/src/main.js\");\n/* harmony import */ var claygl__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! claygl */ \"../../node_modules/claygl/src/claygl.js\");\n/* harmony import */ var pbf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pbf */ \"../../node_modules/pbf/index.js\");\n/* harmony import */ var pbf__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pbf__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var claygl_advanced_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! claygl-advanced-renderer */ \"../../node_modules/claygl-advanced-renderer/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lru-cache */ \"../../node_modules/lru-cache/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jszip */ \"../../node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _lib_toOBJ__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/toOBJ */ \"./components/LittleCity/lib/toOBJ.js\");\n/* harmony import */ var _lib_tessellate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/tessellate */ \"./components/LittleCity/lib/tessellate.js\");\n/* harmony import */ var _lib_distortion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/distortion */ \"./components/LittleCity/lib/distortion.js\");\n/* harmony import */ var quickhull3d__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! quickhull3d */ \"../../node_modules/quickhull3d/dist/index.js\");\n/* harmony import */ var quickhull3d__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(quickhull3d__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var polybooljs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! polybooljs */ \"../../node_modules/polybooljs/index.js\");\n/* harmony import */ var polybooljs__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(polybooljs__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _lib_vec2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/vec2 */ \"./components/LittleCity/lib/vec2.js\");\n/* harmony import */ var maptalks__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! maptalks */ \"../../node_modules/maptalks/dist/maptalks.es-bundler.js\");\n/* harmony import */ var maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! maptalks/dist/maptalks.css */ \"../../node_modules/maptalks/dist/maptalks.css\");\n/* harmony import */ var maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(maptalks_dist_maptalks_css__WEBPACK_IMPORTED_MODULE_14__);\nvar _this = undefined;\n\n\n\n\n\n\n// // for ClayAdvancedRenderer\n\n// // import * as dat from \"dat.gui\";\n\n\n\n\n\n\n// // for PolyBool\n\n// // for vec2\n\n// // for maptalks\n\n\nvar _s = $RefreshSig$();\nvar VectorTile = (__webpack_require__(/*! @mapbox/vector-tile */ \"../../node_modules/@mapbox/vector-tile/index.js\").VectorTile);\nvar mvtCache = new (lru_cache__WEBPACK_IMPORTED_MODULE_5___default())({\n    max: 50\n});\n// 华尔街\nvar DEFAULT_LNG = -73.985079;\nvar DEFAULT_LAT = 40.747221;\n// 自由女神\n// const DEFAULT_LNG = -74.04447357976859;\n// const DEFAULT_LAT = 40.689277852470184;\n// // 中国尊\n// const DEFAULT_LNG = 116.46368504248937\n// const DEFAULT_LAT = 39.912743558838564\nvar DEFAULT_CONFIG = {\n    radius: 60,\n    curveness: 1,\n    showEarth: true,\n    earthDepth: 4,\n    earthColor: \"#c2ebb6\",\n    showBuildings: true,\n    buildingsColor: \"#fab8b8\",\n    showRoads: true,\n    roadsColor: \"#828282\",\n    showWater: true,\n    waterColor: \"#80a9d7\",\n    showCloud: true,\n    cloudColor: \"#fff\",\n    rotateSpeed: 0,\n    sky: true\n};\nvar searchStr = location.search.slice(1);\nvar searchItems = searchStr.split(\"&\");\nvar urlOpts = {};\nsearchItems.forEach(function(item) {\n    var arr = item.split(\"=\");\n    var key = arr[0];\n    var val = arr[1] || true;\n    urlOpts[key] = val;\n});\nurlOpts.lng = urlOpts.lng || DEFAULT_LNG;\nurlOpts.lat = urlOpts.lat || DEFAULT_LAT;\nfunction makeUrl() {\n    var diffConfig = {};\n    for(var key in config){\n        if (config[key] !== DEFAULT_CONFIG[key]) {\n            diffConfig[key] = config[key];\n        }\n    }\n    urlOpts.config = encodeURIComponent(JSON.stringify(diffConfig));\n    var urlItems = [];\n    for(var key1 in urlOpts){\n        urlItems.push(key1 + \"=\" + urlOpts[key1]);\n    }\n    return \"./?\" + urlItems.join(\"&\");\n}\nvar IS_TILE_STYLE = urlOpts.style === \"tile\";\nvar TILE_SIZE = 256;\nvar config = Object.assign({}, DEFAULT_CONFIG);\ntry {\n    Object.assign(config, JSON.parse(decodeURIComponent(urlOpts.config || \"{}\")));\n} catch (e) {}\nvar mvtUrlTpl = \"https://tile.nextzen.org/tilezen/vector/v1/\".concat(TILE_SIZE, \"/all/{z}/{x}/{y}.mvt?api_key=EWFsMD1DSEysLDWd2hj2cw\");\nvar map = null;\nvar mainLayer = null;\nvar initMap = function() {\n    if (mainLayer) return;\n    mainLayer = new maptalks__WEBPACK_IMPORTED_MODULE_13__.TileLayer(\"base\", {\n        tileSize: [\n            TILE_SIZE,\n            TILE_SIZE\n        ],\n        // urlTemplate: \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\",\n        urlTemplate: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        subdomains: [\n            \"a\",\n            \"b\",\n            \"c\"\n        ]\n    });\n    console.log(urlOpts, \"urlOpts\");\n    map = new maptalks__WEBPACK_IMPORTED_MODULE_13__.Map(\"map-main\", {\n        center: [\n            urlOpts.lng,\n            urlOpts.lat\n        ],\n        zoom: 16,\n        baseLayer: mainLayer\n    });\n    map.setMinZoom(16);\n    map.setMaxZoom(16);\n};\nvar faces = [\n    \"pz\",\n    \"px\",\n    \"nz\",\n    \"py\",\n    \"nx\",\n    \"ny\"\n];\nvar vectorElements = [\n    {\n        type: \"buildings\",\n        geometryType: \"polygon\",\n        depth: function(feature) {\n            return (feature.properties.height || 30) / 10 + 1;\n        }\n    },\n    {\n        type: \"roads\",\n        geometryType: \"polyline\",\n        depth: 1.2\n    },\n    {\n        type: \"water\",\n        geometryType: \"polygon\",\n        depth: 1\n    }, \n];\nfunction iterateFeatureCoordinates(feature, cb) {\n    var geometry = feature.geometry;\n    if (geometry.type === \"MultiPolygon\") {\n        for(var i = 0; i < geometry.coordinates.length; i++){\n            for(var k = 0; k < geometry.coordinates[i].length; k++){\n                geometry.coordinates[i][k] = cb(geometry.coordinates[i][k]);\n            }\n        }\n    } else if (geometry.type === \"MultiLineString\" || geometry.type === \"Polygon\") {\n        for(var i1 = 0; i1 < geometry.coordinates.length; i1++){\n            geometry.coordinates[i1] = cb(geometry.coordinates[i1]);\n        }\n    } else if (geometry.type === \"LineString\") {\n        geometry.coordinates = cb(geometry.coordinates);\n    }\n}\nfunction subdivideLongEdges(features, maxDist) {\n    var addPoints = function addPoints(points) {\n        var newPoints = [];\n        for(var i = 0; i < points.length - 1; i++){\n            _lib_vec2__WEBPACK_IMPORTED_MODULE_12__[\"default\"].sub(v, points[i + 1], points[i]);\n            var dist = _lib_vec2__WEBPACK_IMPORTED_MODULE_12__[\"default\"].len(v);\n            _lib_vec2__WEBPACK_IMPORTED_MODULE_12__[\"default\"].scale(v, v, 1 / dist);\n            newPoints.push(points[i]);\n            for(var d = maxDist; d < dist; d += maxDist){\n                newPoints.push(_lib_vec2__WEBPACK_IMPORTED_MODULE_12__[\"default\"].scaleAndAdd([], points[i], v, d));\n            }\n        }\n        newPoints.push(points[points.length - 1]);\n        return newPoints;\n    };\n    var v = [];\n    features.forEach(function(feature) {\n        iterateFeatureCoordinates(feature, addPoints);\n    });\n}\nfunction scaleFeature(feature, offset, scale) {\n    var scalePoints = function scalePoints(pts) {\n        for(var i = 0; i < pts.length; i++){\n            pts[i][0] = (pts[i][0] + offset[0]) * scale[0];\n            pts[i][1] = (pts[i][1] + offset[1]) * scale[1];\n        }\n        return pts;\n    };\n    iterateFeatureCoordinates(feature, scalePoints);\n}\nfunction unionComplexPolygons(features) {\n    var mergedCoordinates = [];\n    features.forEach(function(feature) {\n        var geometry = feature.geometry;\n        if (geometry.type === \"Polygon\") {\n            mergedCoordinates.push(feature.geometry.coordinates);\n        } else if (geometry.type === \"MultiPolygon\") {\n            for(var i = 0; i < feature.geometry.coordinates.length; i++){\n                mergedCoordinates.push(feature.geometry.coordinates[i]);\n            }\n        }\n    });\n    var poly = PolyBool.polygonFromGeoJSON({\n        type: \"MultiPolygon\",\n        coordinates: mergedCoordinates\n    });\n    return {\n        type: \"Feature\",\n        properties: {},\n        geometry: PolyBool.polygonToGeoJSON(poly)\n    };\n}\nfunction cullBuildingPolygns(features) {\n    var earthCoords = [\n        getRectCoords(earthRect)\n    ];\n    features.forEach(function(feature) {\n        if (feature.geometry && (feature.geometry.type === \"Polygon\" || feature.geometry.type === \"MultiPolygon\")) {\n            var poly = PolyBool.polygonFromGeoJSON(feature.geometry);\n            var intersectedPoly = PolyBool.intersect({\n                regions: earthCoords,\n                inverse: false\n            }, poly);\n            feature.geometry = PolyBool.polygonToGeoJSON(intersectedPoly);\n            if (!feature.geometry.coordinates.length) {\n                feature.geometry = null;\n            }\n        }\n    });\n}\nfunction unionRect(out, a, b) {\n    var x = Math.min(a.x, b.x);\n    var y = Math.min(a.y, b.y);\n    out.x = x;\n    out.y = y;\n    out.width = Math.max(a.width + a.x, b.width + b.x) - x;\n    out.height = Math.max(a.height + a.y, b.height + b.y) - y;\n}\n// const width = 55;\nvar width = 100;\n// const height = 58.5;\nvar height = 100;\nvar earthRect = {\n    x: -width / 2,\n    y: -height / 2,\n    width: width,\n    height: height\n};\nfunction getRectCoords(rect) {\n    return [\n        [\n            rect.x,\n            rect.y\n        ],\n        [\n            rect.x + rect.width,\n            rect.y\n        ],\n        [\n            rect.x + rect.width,\n            rect.y + rect.height\n        ],\n        [\n            rect.x,\n            rect.y + rect.height\n        ],\n        [\n            rect.x,\n            rect.y\n        ], \n    ];\n}\nvar initClay = function(containerDom) {\n    if (!containerDom) return;\n    var app1 = claygl__WEBPACK_IMPORTED_MODULE_15__.application.create(containerDom, {\n        autoRender: false,\n        devicePixelRatio: 1,\n        init: function init(app) {\n            var _this1 = this;\n            this._advRenderer = new claygl_advanced_renderer__WEBPACK_IMPORTED_MODULE_4__[\"default\"](app.renderer, app.scene, app.timeline, {\n                shadow: true,\n                temporalSuperSampling: {\n                    enable: true,\n                    dynamic: false\n                },\n                postEffect: {\n                    enable: true,\n                    bloom: {\n                        enable: false\n                    },\n                    screenSpaceAmbientOcclusion: {\n                        enable: true,\n                        intensity: 1.1,\n                        radius: 5\n                    },\n                    FXAA: {\n                        enable: false\n                    }\n                }\n            });\n            this._advRenderer.setShadow({\n                kernelSize: 10,\n                blurSize: 3\n            });\n            var camera = app.createCamera([\n                0,\n                0,\n                170\n            ], [\n                0,\n                0,\n                0\n            ], IS_TILE_STYLE ? \"ortho\" : \"perspective\");\n            if (IS_TILE_STYLE) {\n                camera.top = 50;\n                camera.bottom = -50;\n                camera.left = -50 * app.renderer.getViewportAspect();\n                camera.right = 50 * app.renderer.getViewportAspect();\n                camera.near = 0;\n                camera.far = 1000;\n            }\n            camera.update();\n            this._camera = camera;\n            this._earthNode = app.createNode();\n            this._cloudsNode = app.createNode();\n            this._elementsNodes = {};\n            this._elementsMaterials = {};\n            this._diffuseTex = app.loadTextureSync(\"./asset/paper-detail.png\", {\n                anisotropic: 8\n            });\n            vectorElements.forEach(function(el) {\n                _this1._elementsNodes[el.type] = app.createNode();\n                if (IS_TILE_STYLE) {\n                    _this1._elementsNodes[el.type].rotation.rotateX(-Math.PI / 2);\n                }\n                _this1._elementsMaterials[el.type] = app.createMaterial({\n                    diffuseMap: _this1._diffuseTex,\n                    uvRepeat: [\n                        10,\n                        10\n                    ],\n                    color: config[el.type + \"Color\"],\n                    roughness: 1\n                });\n                _this1._elementsMaterials[el.type].name = \"mat_\" + el.type;\n            });\n            var light = app.createDirectionalLight([\n                -1,\n                -1,\n                -1\n            ], \"#fff\");\n            light.shadowResolution = 2048;\n            light.shadowBias = IS_TILE_STYLE ? 0.01 : 0.0005;\n            this._control = new claygl__WEBPACK_IMPORTED_MODULE_15__.plugin.OrbitControl({\n                target: camera,\n                domElement: app.container,\n                timeline: app.timeline,\n                rotateSensitivity: 2,\n                orthographicAspect: app.renderer.getViewportAspect()\n            });\n            if (IS_TILE_STYLE) {\n                this._control.setOption({\n                    beta: 45,\n                    alpha: 30,\n                    minAlpha: 10,\n                    maxAlpha: 80\n                });\n            }\n            this._control.on(\"update\", function() {\n                _this1._advRenderer.render();\n            });\n            if (!IS_TILE_STYLE) {\n                app.methods.updateEarthSphere();\n            }\n            app.methods.updateElements();\n            app.methods.updateVisibility();\n            app.methods.generateClouds();\n            this._advRenderer.render();\n            return app.createAmbientCubemapLight(\"asset/Grand_Canyon_C.hdr\", 0.2, 0.8, 1).then(function(result) {\n                var skybox = new claygl__WEBPACK_IMPORTED_MODULE_15__.plugin.Skybox({\n                    environmentMap: result.specular.cubemap,\n                    scene: app.scene\n                });\n                skybox.material.set(\"lod\", 2);\n                _this1._skybox = skybox;\n                _this1._advRenderer.render();\n            });\n        },\n        methods: {\n            updateEarthSphere: function updateEarthSphere(app) {\n                var _this2 = this;\n                this._earthNode.removeAll();\n                var earthMat = app.createMaterial({\n                    roughness: 1,\n                    color: config.earthColor,\n                    diffuseMap: this._diffuseTex,\n                    uvRepeat: [\n                        2,\n                        2\n                    ]\n                });\n                earthMat.name = \"mat_earth\";\n                faces.forEach(function(face) {\n                    var planeGeo = new claygl__WEBPACK_IMPORTED_MODULE_15__.geometry.Plane({\n                        widthSegments: 20,\n                        heightSegments: 20\n                    });\n                    app.createMesh(planeGeo, earthMat, _this2._earthNode);\n                    (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(planeGeo.attributes.position.value, {\n                        x: -1,\n                        y: -1,\n                        width: 2,\n                        height: 2\n                    }, config.radius, config.curveness, face);\n                    planeGeo.generateVertexNormals();\n                });\n                this._cloudsNode.eachChild(function(cloudMesh) {\n                    var dist = cloudMesh.height + config.radius / Math.sqrt(2);\n                    cloudMesh.position.normalize().scale(dist);\n                });\n                this._advRenderer.render();\n            },\n            updateEarthGround: function updateEarthGround(app, rect) {\n                this._earthNode.removeAll();\n                var ref = (0,geometry_extrude__WEBPACK_IMPORTED_MODULE_2__.extrudePolygon)([\n                    [\n                        getRectCoords(earthRect)\n                    ]\n                ], {\n                    depth: config.earthDepth\n                }), position = ref.position, uv = ref.uv, normal = ref.normal, indices = ref.indices;\n                var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                geo.attributes.position.value = position;\n                geo.attributes.normal.value = normal;\n                geo.attributes.texcoord0.value = uv;\n                geo.indices = indices;\n                geo.updateBoundingBox();\n                var mesh = app.createMesh(geo, {\n                    nmae: \"mat_earth\",\n                    roughness: 1,\n                    color: config.earthColor,\n                    diffuseMap: this._diffuseTex,\n                    uvRepeat: [\n                        2,\n                        2\n                    ]\n                }, this._earthNode);\n                mesh.rotation.rotateX(-Math.PI / 2);\n                mesh.position.y = -config.earthDepth + 0.1;\n                app.methods.render();\n            },\n            updateElements: function updateElements(app) {\n                var _this4 = this;\n                var createElementMesh = function createElementMesh(elConfig, features, boundingRect, idx) {\n                    if (!IS_TILE_STYLE && elConfig.type === \"roads\" || elConfig.type === \"water\") {\n                        subdivideLongEdges(features, 4);\n                    }\n                    var result = (0,geometry_extrude__WEBPACK_IMPORTED_MODULE_2__.extrudeGeoJSON)({\n                        features: features\n                    }, {\n                        lineWidth: 0.5,\n                        excludeBottom: true,\n                        simplify: IS_TILE_STYLE || elConfig.type === \"buildings\" ? 0.01 : 0,\n                        depth: elConfig.depth\n                    });\n                    var poly = result[elConfig.geometryType];\n                    var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                    if (!IS_TILE_STYLE && elConfig.type === \"water\") {\n                        var ref = (0,_lib_tessellate__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(poly.position, poly.indices, 5), indices = ref.indices, position = ref.position;\n                        poly.indices = indices;\n                        poly.position = position;\n                    }\n                    geo.attributes.texcoord0.value = poly.uv;\n                    geo.indices = poly.indices;\n                    var mesh = app.createMesh(geo, elementsMaterials[elConfig.type], elementsNodes[elConfig.type]);\n                    if (elConfig.type === \"buildings\") {\n                        var positionAnimateFrom = new Float32Array(poly.position);\n                        var positionAnimateTo = poly.position;\n                        for(var i2 = 0; i2 < positionAnimateFrom.length; i2 += 3){\n                            var z = positionAnimateFrom[i2 + 2];\n                            if (z > 0) {\n                                positionAnimateFrom[i2 + 2] = 1;\n                            }\n                        }\n                        if (!IS_TILE_STYLE) {\n                            positionAnimateTo = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(poly.position, boundingRect, config.radius, config.curveness, faces[idx]);\n                            positionAnimateFrom = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(positionAnimateFrom, boundingRect, config.radius, config.curveness, faces[idx]);\n                        }\n                        geo.attributes.position.value = positionAnimateTo;\n                        geo.generateVertexNormals();\n                        geo.updateBoundingBox();\n                        var transitionPosition = new Float32Array(positionAnimateFrom);\n                        geo.attributes.position.value = transitionPosition;\n                        mesh.invisible = true;\n                        var obj = {\n                            p: 0\n                        };\n                        buildingAnimators[faces[idx]] = app.timeline.animate(obj).when(2000, {\n                            p: 1\n                        }).delay(1000).during(function(obj, p) {\n                            mesh.invisible = false;\n                            for(var i = 0; i < transitionPosition.length; i++){\n                                var a = positionAnimateFrom[i];\n                                var b = positionAnimateTo[i];\n                                transitionPosition[i] = (b - a) * p + a;\n                            }\n                            geo.dirty();\n                            advRenderer.render();\n                        }).start(\"elasticOut\");\n                    } else {\n                        if (IS_TILE_STYLE) {\n                            geo.attributes.position.value = poly.position;\n                        } else {\n                            geo.attributes.position.value = (0,_lib_distortion__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(poly.position, boundingRect, config.radius, config.curveness, faces[idx]);\n                        }\n                        geo.generateVertexNormals();\n                        geo.updateBoundingBox();\n                    }\n                    return {\n                        boundingRect: poly.boundingRect\n                    };\n                };\n                this._id = Math.random();\n                var advRenderer = this._advRenderer;\n                var elementsNodes = this._elementsNodes;\n                var elementsMaterials = this._elementsMaterials;\n                for(var key3 in elementsNodes){\n                    elementsNodes[key3].removeAll();\n                }\n                for(var key2 in this._buildingAnimators){\n                    this._buildingAnimators[key2].stop();\n                }\n                var buildingAnimators = this._buildingAnimators = {};\n                var tiles = mainLayer.getTiles().tileGrids[0].tiles;\n                var subdomains = [\n                    \"a\",\n                    \"b\",\n                    \"c\"\n                ];\n                if (IS_TILE_STYLE) {\n                    var center = map.getCenter();\n                    tiles = tiles.filter(function(tile) {\n                        var extent = tile.extent2d.convertTo(function(c) {\n                            return map.pointToCoord(c);\n                        }).toJSON();\n                        return extent.xmax > center.x && extent.xmin < center.x && extent.ymax > center.y && extent.ymin < center.y;\n                    });\n                }\n                var loading = Math.min(tiles.length, 6);\n                tiles.forEach(function(tile, idx) {\n                    var _this3 = _this4;\n                    var fetchId = _this4._id;\n                    if (idx >= 6) {\n                        return;\n                    }\n                    var extent = tile.extent2d.convertTo(function(c) {\n                        return map.pointToCoord(c);\n                    }).toJSON();\n                    var scaleX = 1e4;\n                    var scaleY = scaleX * 1.4;\n                    var width1 = (extent.xmax - extent.xmin) * scaleX;\n                    var height1 = (extent.ymax - extent.ymin) * scaleY;\n                    var tileRect = {\n                        x: IS_TILE_STYLE ? -width1 / 2 : 0,\n                        y: IS_TILE_STYLE ? -height1 / 2 : 0,\n                        width: width1,\n                        height: height1\n                    };\n                    var allBoundingRect = {\n                        x: Infinity,\n                        y: Infinity,\n                        width: -Infinity,\n                        height: -Infinity\n                    };\n                    var url = mvtUrlTpl.replace(\"{z}\", tile.z).replace(\"{x}\", tile.x).replace(\"{y}\", tile.y).replace(\"{s}\", subdomains[idx % 3]);\n                    if (mvtCache.get(url)) {\n                        var _loop = function(key) {\n                            createElementMesh(vectorElements.find(function(config1) {\n                                return config1.type === key;\n                            }), features[key], tileRect, idx);\n                        };\n                        var features = mvtCache.get(url);\n                        for(var key in features)_loop(key);\n                        return;\n                    }\n                    return fetch(url, {\n                        mode: \"cors\"\n                    }).then(function(response) {\n                        return response.arrayBuffer();\n                    }).then(function(buffer) {\n                        var _loop = function(key) {\n                            var boundingRect = createElementMesh(vectorElements.find(function(config2) {\n                                return config2.type === key;\n                            }), features[key], tileRect, idx).boundingRect;\n                            unionRect(allBoundingRect, boundingRect, allBoundingRect);\n                        };\n                        if (fetchId !== _this3._id) {\n                            return;\n                        }\n                        var pbf = new (pbf__WEBPACK_IMPORTED_MODULE_3___default())(new Uint8Array(buffer));\n                        var vTile = new VectorTile(pbf);\n                        if (!vTile.layers.buildings) {\n                            return;\n                        }\n                        var features = {};\n                        [\n                            \"buildings\",\n                            \"roads\",\n                            \"water\"\n                        ].forEach(function(type) {\n                            if (!vTile.layers[type]) {\n                                return;\n                            }\n                            features[type] = [];\n                            for(var i = 0; i < vTile.layers[type].length; i++){\n                                var feature = vTile.layers[type].feature(i).toGeoJSON(tile.x, tile.y, tile.z);\n                                scaleFeature(feature, IS_TILE_STYLE ? [\n                                    -(extent.xmax + extent.xmin) / 2,\n                                    -(extent.ymax + extent.ymin) / 2, \n                                ] : [\n                                    -extent.xmin,\n                                    -extent.ymin\n                                ], [\n                                    scaleX,\n                                    scaleY\n                                ]);\n                                features[type].push(feature);\n                            }\n                            if (IS_TILE_STYLE) {\n                                cullBuildingPolygns(features[type]);\n                            }\n                        });\n                        if (features.water) {\n                            features.water = [\n                                unionComplexPolygons(features.water.filter(function(feature) {\n                                    var geoType = feature.geometry && feature.geometry.type;\n                                    return geoType === \"Polygon\" || geoType === \"MultiPolygon\";\n                                })), \n                            ];\n                        }\n                        if (features.roads) {\n                            features.roads = features.roads.filter(function(feature) {\n                                var geoType = feature.geometry && feature.geometry.type;\n                                return geoType === \"LineString\" || geoType === \"MultiLineString\";\n                            });\n                        }\n                        mvtCache.set(url, features);\n                        for(var key in features)_loop(key);\n                        loading--;\n                        if (IS_TILE_STYLE) {\n                            if (loading === 0) {\n                                app.methods.updateEarthGround(allBoundingRect);\n                            }\n                        }\n                        app.methods.render();\n                    });\n                });\n            },\n            generateClouds: function generateClouds(app) {\n                var randomInSphere = function randomInSphere(r) {\n                    var alpha = Math.random() * Math.PI * 2;\n                    var beta = Math.random() * Math.PI;\n                    var r2 = Math.sin(beta) * r;\n                    var y = Math.cos(beta) * r;\n                    var x = Math.cos(alpha) * r2;\n                    var z = Math.sin(alpha) * r2;\n                    return [\n                        x,\n                        y,\n                        z\n                    ];\n                };\n                var cloudNumber = IS_TILE_STYLE ? 10 : 15;\n                var pointCount = 100;\n                this._cloudsNode.removeAll();\n                var cloudMaterial = app.createMaterial({\n                    roughness: 1,\n                    color: config.cloudColor\n                });\n                cloudMaterial.name = \"mat_cloud\";\n                for(var i = 0; i < cloudNumber; i++){\n                    var positionArr = new Float32Array(5 * pointCount * 3);\n                    var off = 0;\n                    var indices = [];\n                    var dx = Math.random() - 0.5;\n                    var dy = Math.random() - 0.5;\n                    var len = Math.sqrt(dx * dx + dy * dy);\n                    dx /= len;\n                    dy /= len;\n                    var dist = 4 + Math.random() * 2;\n                    for(var i4 = 0; i4 < 5; i4++){\n                        var posOff = i4 - 2 + (Math.random() * 0.4 - 0.2);\n                        var rBase = 3 - Math.abs(posOff);\n                        var points = [];\n                        var vertexOffset = off / 3;\n                        for(var i5 = 0; i5 < pointCount; i5++){\n                            var r1 = Math.random() * rBase + rBase;\n                            var pt = randomInSphere(r1);\n                            points.push(pt);\n                            positionArr[off++] = pt[0] + posOff * dist * dx;\n                            if (IS_TILE_STYLE) {\n                                positionArr[off++] = pt[1];\n                                positionArr[off++] = pt[2] + posOff * dist * dy;\n                            } else {\n                                positionArr[off++] = pt[1] + posOff * dist * dy;\n                                positionArr[off++] = pt[2];\n                            }\n                        }\n                        var tmp = quickhull3d__WEBPACK_IMPORTED_MODULE_10___default()(points);\n                        for(var m = 0; m < tmp.length; m++){\n                            indices.push(tmp[m][0] + vertexOffset);\n                            indices.push(tmp[m][1] + vertexOffset);\n                            indices.push(tmp[m][2] + vertexOffset);\n                        }\n                    }\n                    var geo = new claygl__WEBPACK_IMPORTED_MODULE_15__.Geometry();\n                    geo.attributes.position.value = positionArr;\n                    geo.initIndicesFromArray(indices);\n                    geo.generateFaceNormals();\n                    var cloudMesh = app.createMesh(geo, cloudMaterial, this._cloudsNode);\n                    cloudMesh.height = Math.random() * 10 + 20;\n                    if (IS_TILE_STYLE) {\n                        cloudMesh.position.setArray([\n                            (Math.random() - 0.5) * 60,\n                            Math.random() * 10 + 25,\n                            (Math.random() - 0.5) * 60, \n                        ]);\n                        if (IS_TILE_STYLE) {\n                            cloudMesh.scale.set(0.6, 0.6, 0.6);\n                        }\n                    } else {\n                        cloudMesh.position.setArray(randomInSphere(config.radius / Math.sqrt(2) + cloudMesh.height));\n                        cloudMesh.lookAt(claygl__WEBPACK_IMPORTED_MODULE_15__.Vector3.ZERO);\n                    }\n                }\n                app.methods.render();\n            },\n            updateColor: function updateColor() {\n                this._earthNode.eachChild(function(mesh) {\n                    mesh.material.set(\"color\", config.earthColor);\n                });\n                this._cloudsNode.eachChild(function(mesh) {\n                    mesh.material.set(\"color\", config.cloudColor);\n                });\n                for(var key in this._elementsMaterials){\n                    this._elementsMaterials[key].set(\"color\", config[key + \"Color\"]);\n                }\n                this._advRenderer.render();\n            },\n            render: function render(app) {\n                var _this5 = this;\n                this._control.orthographicAspect = app.renderer.getViewportAspect();\n                this._advRenderer.render();\n                // TODO\n                setTimeout(function() {\n                    _this5._advRenderer.render();\n                }, 20);\n            },\n            updateAutoRotate: function updateAutoRotate() {\n                this._control.rotateSpeed = config.rotateSpeed * 50;\n                this._control.autoRotate = Math.abs(config.rotateSpeed) > 0.3;\n            },\n            updateSky: function updateSky(app) {\n                config.sky ? this._skybox.attachScene(app.scene) : this._skybox.detachScene();\n                this._advRenderer.render();\n            },\n            updateVisibility: function updateVisibility(app) {\n                this._earthNode.invisible = !config.showEarth;\n                this._cloudsNode.invisible = !config.showCloud;\n                this._elementsNodes.buildings.invisible = !config.showBuildings;\n                this._elementsNodes.roads.invisible = !config.showRoads;\n                this._elementsNodes.water.invisible = !config.showWater;\n                app.methods.render();\n            }\n        }\n    });\n    return app1;\n};\nvar actions = {\n    downloadOBJ: function() {\n        var downloading = false;\n        return function() {\n            if (downloading) {\n                return;\n            }\n            var ref = (0,_lib_toOBJ__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(app.scene, {\n                mtllib: \"city\"\n            }), obj = ref.obj, mtl = ref.mtl;\n            var zip = new (jszip__WEBPACK_IMPORTED_MODULE_6___default())();\n            zip.file(\"city.obj\", obj);\n            zip.file(\"city.mtl\", mtl);\n            zip.generateAsync({\n                type: \"blob\",\n                compression: \"DEFLATE\"\n            }).then(function(content) {\n                downloading = false;\n                saveAs(content, \"city.zip\");\n            }).catch(function(e1) {\n                downloading = false;\n                console.error(e1.toString());\n            });\n            // Behind all processing in case some errror happens.\n            downloading = true;\n        };\n    }(),\n    randomCloud: function() {\n        app.methods.generateClouds();\n    },\n    reset: function() {\n        Object.assign(config, DEFAULT_CONFIG);\n        ui.updateDisplay();\n        window.location = makeUrl();\n    }\n};\nvar configApp = function(app) {\n    var updateAll = function updateAll() {\n        if (!IS_TILE_STYLE) {\n            app.methods.updateEarthSphere();\n        }\n        app.methods.updateElements();\n    };\n    var updateUrlState = function updateUrlState() {\n        history.pushState(\"\", \"\", makeUrl());\n    };\n    console.log(app, \"app\");\n    if (!app) return;\n    var timeout;\n    map.on(\"moveend\", function() {\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            app.methods.updateElements();\n            updateUrlState();\n        }, 500);\n    });\n    map.on(\"moving\", function() {\n        var center = map.getCenter();\n        urlOpts.lng = document.querySelector(\"#lng\").value = center.x;\n        urlOpts.lat = document.querySelector(\"#lat\").value = center.y;\n    });\n    map.on(\"zoomend\", function() {\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            app.methods.updateElements();\n        }, 500);\n    });\n    // Array.prototype.forEach.call(\n    //   document.querySelectorAll(\"#style-list li\"),\n    //   (li) => {\n    //     li.addEventListener(\"click\", () => {\n    //       urlOpts.style = li.className;\n    //       window.location = makeUrl();\n    //     });\n    //   }\n    // );\n    // document.querySelector(\"#locate\").addEventListener(\"click\", () => {\n    //   urlOpts.lng = +document.querySelector(\"#lng\").value;\n    //   urlOpts.lat = +document.querySelector(\"#lat\").value;\n    //   map.setCenter({ x: urlOpts.lng, y: urlOpts.lat });\n    //   app.methods.updateElements();\n    //   updateUrlState();\n    // });\n    // document.querySelector(\"#reset\").addEventListener(\"click\", () => {\n    //   urlOpts.lng = document.querySelector(\"#lng\").value = DEFAULT_LNG;\n    //   urlOpts.lat = document.querySelector(\"#lat\").value = DEFAULT_LAT;\n    //   map.setCenter({ x: urlOpts.lng, y: urlOpts.lat });\n    //   app.methods.updateElements();\n    //   updateUrlState();\n    // });\n    var ui = new dat.GUI();\n    ui.add(actions, \"reset\");\n    if (!IS_TILE_STYLE) {\n        ui.add(config, \"radius\", 30, 100).step(1).onChange(updateAll).onFinishChange(updateUrlState);\n    }\n    ui.add(config, \"rotateSpeed\", -2, 2).step(0.01).onChange(app.methods.updateAutoRotate).onFinishChange(updateUrlState);\n    ui.add(config, \"sky\").onChange(app.methods.updateSky).onFinishChange(updateUrlState);\n    var earthFolder = ui.addFolder(\"Earth\");\n    earthFolder.add(config, \"showEarth\").onChange(app.methods.updateVisibility).onFinishChange(updateUrlState);\n    if (IS_TILE_STYLE) {\n        earthFolder.add(config, \"earthDepth\", 1, 50).onChange(app.methods.updateEarthGround).onFinishChange(updateUrlState);\n    }\n    earthFolder.addColor(config, \"earthColor\").onChange(app.methods.updateColor).onFinishChange(updateUrlState);\n    var buildingsFolder = ui.addFolder(\"Buildings\");\n    buildingsFolder.add(config, \"showBuildings\").onChange(app.methods.updateVisibility).onFinishChange(updateUrlState);\n    buildingsFolder.addColor(config, \"buildingsColor\").onChange(app.methods.updateColor).onFinishChange(updateUrlState);\n    var roadsFolder = ui.addFolder(\"Roads\");\n    roadsFolder.add(config, \"showRoads\").onChange(app.methods.updateVisibility).onFinishChange(updateUrlState);\n    roadsFolder.addColor(config, \"roadsColor\").onChange(app.methods.updateColor).onFinishChange(updateUrlState);\n    var waterFolder = ui.addFolder(\"Water\");\n    waterFolder.add(config, \"showWater\").onChange(app.methods.updateVisibility).onFinishChange(updateUrlState);\n    waterFolder.addColor(config, \"waterColor\").onChange(app.methods.updateColor).onFinishChange(updateUrlState);\n    var cloudFolder = ui.addFolder(\"Cloud\");\n    cloudFolder.add(config, \"showCloud\").onChange(app.methods.updateVisibility).onFinishChange(updateUrlState);\n    cloudFolder.addColor(config, \"cloudColor\").onChange(app.methods.updateColor).onFinishChange(updateUrlState);\n    cloudFolder.add(actions, \"randomCloud\");\n    ui.add(actions, \"downloadOBJ\");\n};\nvar LittleCity = function() {\n    _s();\n    var viewport = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function() {\n        console.log(\"reredner....\");\n        if (!viewport.current) return;\n        initMap();\n        initClay(viewport.current);\n    }, [\n        viewport\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"viewport\",\n                ref: viewport,\n                className: (_index_module_css__WEBPACK_IMPORTED_MODULE_16___default().viewport)\n            }, void 0, false, {\n                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                lineNumber: 1083,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"map\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        children: \"Pan the map to select a new area\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                        lineNumber: 1085,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        id: \"location\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                children: \"LNG\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1087,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                id: \"lng\",\n                                type: \"text\",\n                                value: \"-74.0130345\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1088,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                children: \"LAT\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1089,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                id: \"lat\",\n                                type: \"text\",\n                                value: \"40.7063516\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1090,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                id: \"reset\",\n                                children: \"RESET\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1091,\n                                columnNumber: 11\n                            }, _this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                id: \"locate\",\n                                children: \"GO\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1092,\n                                columnNumber: 11\n                            }, _this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                        lineNumber: 1086,\n                        columnNumber: 9\n                    }, _this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        id: \"map-main\"\n                    }, void 0, false, {\n                        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                        lineNumber: 1094,\n                        columnNumber: 9\n                    }, _this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                lineNumber: 1084,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n                id: \"style-list\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            class: \"planet\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: \"asset/planet.jpg\",\n                                alt: \"\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1099,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                            lineNumber: 1098,\n                            columnNumber: 11\n                        }, _this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                            class: \"tile\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n                                src: \"asset/isometric.jpg\",\n                                alt: \"\"\n                            }, void 0, false, {\n                                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                                lineNumber: 1102,\n                                columnNumber: 13\n                            }, _this)\n                        }, void 0, false, {\n                            fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                            lineNumber: 1101,\n                            columnNumber: 11\n                        }, _this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                    lineNumber: 1097,\n                    columnNumber: 9\n                }, _this)\n            }, void 0, false, {\n                fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n                lineNumber: 1096,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/Drogo/person/next-demo/packages/web/components/LittleCity/index.tsx\",\n        lineNumber: 1082,\n        columnNumber: 5\n    }, _this);\n};\n_s(LittleCity, \"/djMZZHkkQhhlZvVmPaWkk4zz2I=\");\n_c = LittleCity;\n/* harmony default export */ __webpack_exports__[\"default\"] = (LittleCity);\nvar _c;\n$RefreshReg$(_c, \"LittleCity\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/LittleCity/index.tsx\n");

/***/ }),

/***/ "../../node_modules/point-line-distance/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/point-line-distance/index.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/*\n * point-line-distance\n *\n * Copyright (c) 2015 Mauricio Poppe\n * Licensed under the MIT license.\n */\n\n\n\nvar distanceSquared = __webpack_require__(/*! ./squared */ \"../../node_modules/point-line-distance/squared.js\")\n\nmodule.exports = function (point, a, b) {\n  return Math.sqrt(distanceSquared(point, a, b))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3BvaW50LWxpbmUtZGlzdGFuY2UvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVZOztBQUVaLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFXOztBQUV6QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9wb2ludC1saW5lLWRpc3RhbmNlL2luZGV4LmpzPzkwMTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHBvaW50LWxpbmUtZGlzdGFuY2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgTWF1cmljaW8gUG9wcGVcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGRpc3RhbmNlU3F1YXJlZCA9IHJlcXVpcmUoJy4vc3F1YXJlZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBvaW50LCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoZGlzdGFuY2VTcXVhcmVkKHBvaW50LCBhLCBiKSlcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/point-line-distance/index.js\n");

/***/ }),

/***/ "../../node_modules/point-line-distance/squared.js":
/*!*********************************************************!*\
  !*** ../../node_modules/point-line-distance/squared.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\")\nvar cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\")\nvar squaredLength = __webpack_require__(/*! gl-vec3/squaredLength */ \"../../node_modules/gl-vec3/squaredLength.js\")\nvar ab = []\nvar ap = []\nvar cr = []\n\nmodule.exports = function (p, a, b) {\n  // // == vector solution\n  // var normalize = require('gl-vec3/normalize')\n  // var scaleAndAdd = require('gl-vec3/scaleAndAdd')\n  // var dot = require('gl-vec3/dot')\n  // var squaredDistance = require('gl-vec3/squaredDistance')\n  // // n = vector `ab` normalized\n  // var n = []\n  // // projection = projection of `point` on `n`\n  // var projection = []\n  // normalize(n, subtract(n, a, b))\n  // scaleAndAdd(projection, a, n, dot(n, p))\n  // return squaredDistance(projection, p)\n\n  // == parallelogram solution\n  //\n  //            s\n  //      __a________b__\n  //       /   |    /\n  //      /   h|   /\n  //     /_____|__/\n  //    p\n  //\n  //  s = b - a\n  //  area = s * h\n  //  |ap x s| = s * h\n  //  h = |ap x s| / s\n  //\n  subtract(ab, b, a)\n  subtract(ap, p, a)\n  var area = squaredLength(cross(cr, ap, ab))\n  var s = squaredLength(ab)\n  if (s === 0) {\n    throw Error('a and b are the same point')\n  }\n  return area / s\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3BvaW50LWxpbmUtZGlzdGFuY2Uvc3F1YXJlZC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsZ0VBQWtCO0FBQ3pDLFlBQVksbUJBQU8sQ0FBQywwREFBZTtBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQywwRUFBdUI7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9wb2ludC1saW5lLWRpc3RhbmNlL3NxdWFyZWQuanM/OTU3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc3VidHJhY3QgPSByZXF1aXJlKCdnbC12ZWMzL3N1YnRyYWN0JylcbnZhciBjcm9zcyA9IHJlcXVpcmUoJ2dsLXZlYzMvY3Jvc3MnKVxudmFyIHNxdWFyZWRMZW5ndGggPSByZXF1aXJlKCdnbC12ZWMzL3NxdWFyZWRMZW5ndGgnKVxudmFyIGFiID0gW11cbnZhciBhcCA9IFtdXG52YXIgY3IgPSBbXVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwLCBhLCBiKSB7XG4gIC8vIC8vID09IHZlY3RvciBzb2x1dGlvblxuICAvLyB2YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnZ2wtdmVjMy9ub3JtYWxpemUnKVxuICAvLyB2YXIgc2NhbGVBbmRBZGQgPSByZXF1aXJlKCdnbC12ZWMzL3NjYWxlQW5kQWRkJylcbiAgLy8gdmFyIGRvdCA9IHJlcXVpcmUoJ2dsLXZlYzMvZG90JylcbiAgLy8gdmFyIHNxdWFyZWREaXN0YW5jZSA9IHJlcXVpcmUoJ2dsLXZlYzMvc3F1YXJlZERpc3RhbmNlJylcbiAgLy8gLy8gbiA9IHZlY3RvciBgYWJgIG5vcm1hbGl6ZWRcbiAgLy8gdmFyIG4gPSBbXVxuICAvLyAvLyBwcm9qZWN0aW9uID0gcHJvamVjdGlvbiBvZiBgcG9pbnRgIG9uIGBuYFxuICAvLyB2YXIgcHJvamVjdGlvbiA9IFtdXG4gIC8vIG5vcm1hbGl6ZShuLCBzdWJ0cmFjdChuLCBhLCBiKSlcbiAgLy8gc2NhbGVBbmRBZGQocHJvamVjdGlvbiwgYSwgbiwgZG90KG4sIHApKVxuICAvLyByZXR1cm4gc3F1YXJlZERpc3RhbmNlKHByb2plY3Rpb24sIHApXG5cbiAgLy8gPT0gcGFyYWxsZWxvZ3JhbSBzb2x1dGlvblxuICAvL1xuICAvLyAgICAgICAgICAgIHNcbiAgLy8gICAgICBfX2FfX19fX19fX2JfX1xuICAvLyAgICAgICAvICAgfCAgICAvXG4gIC8vICAgICAgLyAgIGh8ICAgL1xuICAvLyAgICAgL19fX19ffF9fL1xuICAvLyAgICBwXG4gIC8vXG4gIC8vICBzID0gYiAtIGFcbiAgLy8gIGFyZWEgPSBzICogaFxuICAvLyAgfGFwIHggc3wgPSBzICogaFxuICAvLyAgaCA9IHxhcCB4IHN8IC8gc1xuICAvL1xuICBzdWJ0cmFjdChhYiwgYiwgYSlcbiAgc3VidHJhY3QoYXAsIHAsIGEpXG4gIHZhciBhcmVhID0gc3F1YXJlZExlbmd0aChjcm9zcyhjciwgYXAsIGFiKSlcbiAgdmFyIHMgPSBzcXVhcmVkTGVuZ3RoKGFiKVxuICBpZiAocyA9PT0gMCkge1xuICAgIHRocm93IEVycm9yKCdhIGFuZCBiIGFyZSB0aGUgc2FtZSBwb2ludCcpXG4gIH1cbiAgcmV0dXJuIGFyZWEgLyBzXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/point-line-distance/squared.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Face.js":
/*!***************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/Face.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DELETED = exports.NON_CONVEX = exports.VISIBLE = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _add = __webpack_require__(/*! gl-vec3/add */ \"../../node_modules/gl-vec3/add.js\");\n\nvar _add2 = _interopRequireDefault(_add);\n\nvar _subtract = __webpack_require__(/*! gl-vec3/subtract */ \"../../node_modules/gl-vec3/subtract.js\");\n\nvar _subtract2 = _interopRequireDefault(_subtract);\n\nvar _cross = __webpack_require__(/*! gl-vec3/cross */ \"../../node_modules/gl-vec3/cross.js\");\n\nvar _cross2 = _interopRequireDefault(_cross);\n\nvar _copy = __webpack_require__(/*! gl-vec3/copy */ \"../../node_modules/gl-vec3/copy.js\");\n\nvar _copy2 = _interopRequireDefault(_copy);\n\nvar _length = __webpack_require__(/*! gl-vec3/length */ \"../../node_modules/gl-vec3/length.js\");\n\nvar _length2 = _interopRequireDefault(_length);\n\nvar _scale = __webpack_require__(/*! gl-vec3/scale */ \"../../node_modules/gl-vec3/scale.js\");\n\nvar _scale2 = _interopRequireDefault(_scale);\n\nvar _scaleAndAdd = __webpack_require__(/*! gl-vec3/scaleAndAdd */ \"../../node_modules/gl-vec3/scaleAndAdd.js\");\n\nvar _scaleAndAdd2 = _interopRequireDefault(_scaleAndAdd);\n\nvar _normalize = __webpack_require__(/*! gl-vec3/normalize */ \"../../node_modules/gl-vec3/normalize.js\");\n\nvar _normalize2 = _interopRequireDefault(_normalize);\n\nvar _HalfEdge = __webpack_require__(/*! ./HalfEdge */ \"../../node_modules/quickhull3d/dist/HalfEdge.js\");\n\nvar _HalfEdge2 = _interopRequireDefault(_HalfEdge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/quickhull3d/node_modules/debug/src/browser.js\")('face');\n\nvar VISIBLE = exports.VISIBLE = 0;\nvar NON_CONVEX = exports.NON_CONVEX = 1;\nvar DELETED = exports.DELETED = 2;\n\nvar Face = function () {\n  function Face() {\n    _classCallCheck(this, Face);\n\n    this.normal = [];\n    this.centroid = [];\n    // signed distance from face to the origin\n    this.offset = 0;\n    // pointer to the a vertex in a double linked list this face can see\n    this.outside = null;\n    this.mark = VISIBLE;\n    this.edge = null;\n    this.nVertices = 0;\n  }\n\n  _createClass(Face, [{\n    key: 'getEdge',\n    value: function getEdge(i) {\n      if (typeof i !== 'number') {\n        throw Error('requires a number');\n      }\n      var it = this.edge;\n      while (i > 0) {\n        it = it.next;\n        i -= 1;\n      }\n      while (i < 0) {\n        it = it.prev;\n        i += 1;\n      }\n      return it;\n    }\n  }, {\n    key: 'computeNormal',\n    value: function computeNormal() {\n      var e0 = this.edge;\n      var e1 = e0.next;\n      var e2 = e1.next;\n      var v2 = (0, _subtract2.default)([], e1.head().point, e0.head().point);\n      var t = [];\n      var v1 = [];\n\n      this.nVertices = 2;\n      this.normal = [0, 0, 0];\n      while (e2 !== e0) {\n        (0, _copy2.default)(v1, v2);\n        (0, _subtract2.default)(v2, e2.head().point, e0.head().point);\n        (0, _add2.default)(this.normal, this.normal, (0, _cross2.default)(t, v1, v2));\n        e2 = e2.next;\n        this.nVertices += 1;\n      }\n      this.area = (0, _length2.default)(this.normal);\n      // normalize the vector, since we've already calculated the area\n      // it's cheaper to scale the vector using this quantity instead of\n      // doing the same operation again\n      this.normal = (0, _scale2.default)(this.normal, this.normal, 1 / this.area);\n    }\n  }, {\n    key: 'computeNormalMinArea',\n    value: function computeNormalMinArea(minArea) {\n      this.computeNormal();\n      if (this.area < minArea) {\n        // compute the normal without the longest edge\n        var maxEdge = void 0;\n        var maxSquaredLength = 0;\n        var edge = this.edge;\n\n        // find the longest edge (in length) in the chain of edges\n        do {\n          var lengthSquared = edge.lengthSquared();\n          if (lengthSquared > maxSquaredLength) {\n            maxEdge = edge;\n            maxSquaredLength = lengthSquared;\n          }\n          edge = edge.next;\n        } while (edge !== this.edge);\n\n        var p1 = maxEdge.tail().point;\n        var p2 = maxEdge.head().point;\n        var maxVector = (0, _subtract2.default)([], p2, p1);\n        var maxLength = Math.sqrt(maxSquaredLength);\n        // maxVector is normalized after this operation\n        (0, _scale2.default)(maxVector, maxVector, 1 / maxLength);\n        // compute the projection of maxVector over this face normal\n        var maxProjection = (0, _dot2.default)(this.normal, maxVector);\n        // subtract the quantity maxEdge adds on the normal\n        (0, _scaleAndAdd2.default)(this.normal, this.normal, maxVector, -maxProjection);\n        // renormalize `this.normal`\n        (0, _normalize2.default)(this.normal, this.normal);\n      }\n    }\n  }, {\n    key: 'computeCentroid',\n    value: function computeCentroid() {\n      this.centroid = [0, 0, 0];\n      var edge = this.edge;\n      do {\n        (0, _add2.default)(this.centroid, this.centroid, edge.head().point);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      (0, _scale2.default)(this.centroid, this.centroid, 1 / this.nVertices);\n    }\n  }, {\n    key: 'computeNormalAndCentroid',\n    value: function computeNormalAndCentroid(minArea) {\n      if (typeof minArea !== 'undefined') {\n        this.computeNormalMinArea(minArea);\n      } else {\n        this.computeNormal();\n      }\n      this.computeCentroid();\n      this.offset = (0, _dot2.default)(this.normal, this.centroid);\n    }\n  }, {\n    key: 'distanceToPlane',\n    value: function distanceToPlane(point) {\n      return (0, _dot2.default)(this.normal, point) - this.offset;\n    }\n\n    /**\n     * @private\n     *\n     * Connects two edges assuming that prev.head().point === next.tail().point\n     *\n     * @param {HalfEdge} prev\n     * @param {HalfEdge} next\n     */\n\n  }, {\n    key: 'connectHalfEdges',\n    value: function connectHalfEdges(prev, next) {\n      var discardedFace = void 0;\n      if (prev.opposite.face === next.opposite.face) {\n        // `prev` is remove a redundant edge\n        var oppositeFace = next.opposite.face;\n        var oppositeEdge = void 0;\n        if (prev === this.edge) {\n          this.edge = next;\n        }\n        if (oppositeFace.nVertices === 3) {\n          // case:\n          // remove the face on the right\n          //\n          //       /|\\\n          //      / | \\ the face on the right\n          //     /  |  \\ --> opposite edge\n          //    / a |   \\\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          //\n          // Note: the opposite edge is actually in the face to the right\n          // of the face to be destroyed\n          oppositeEdge = next.opposite.prev.opposite;\n          oppositeFace.mark = DELETED;\n          discardedFace = oppositeFace;\n        } else {\n          // case:\n          //          t\n          //        *----\n          //       /| <- right face's redundant edge\n          //      / | opposite edge\n          //     /  |  ▴   /\n          //    / a |  |  /\n          //   *----*----*\n          //  /     b  |  \\\n          //           ▾\n          //      redundant edge\n          oppositeEdge = next.opposite.next;\n          // make sure that the link `oppositeFace.edge` points correctly even\n          // after the right face redundant edge is removed\n          if (oppositeFace.edge === oppositeEdge.prev) {\n            oppositeFace.edge = oppositeEdge;\n          }\n\n          //       /|   /\n          //      / | t/opposite edge\n          //     /  | / ▴  /\n          //    / a |/  | /\n          //   *----*----*\n          //  /     b     \\\n          oppositeEdge.prev = oppositeEdge.prev.prev;\n          oppositeEdge.prev.next = oppositeEdge;\n        }\n        //       /|\n        //      / |\n        //     /  |\n        //    / a |\n        //   *----*----*\n        //  /     b  ▴  \\\n        //           |\n        //     redundant edge\n        next.prev = prev.prev;\n        next.prev.next = next;\n\n        //       / \\  \\\n        //      /   \\->\\\n        //     /     \\<-\\ opposite edge\n        //    / a     \\  \\\n        //   *----*----*\n        //  /     b  ^  \\\n        next.setOpposite(oppositeEdge);\n\n        oppositeFace.computeNormalAndCentroid();\n      } else {\n        // trivial case\n        //        *\n        //       /|\\\n        //      / | \\\n        //     /  |--> next\n        //    / a |   \\\n        //   *----*----*\n        //    \\ b |   /\n        //     \\  |--> prev\n        //      \\ | /\n        //       \\|/\n        //        *\n        prev.next = next;\n        next.prev = prev;\n      }\n      return discardedFace;\n    }\n  }, {\n    key: 'mergeAdjacentFaces',\n    value: function mergeAdjacentFaces(adjacentEdge, discardedFaces) {\n      var oppositeEdge = adjacentEdge.opposite;\n      var oppositeFace = oppositeEdge.face;\n\n      discardedFaces.push(oppositeFace);\n      oppositeFace.mark = DELETED;\n\n      // find the chain of edges whose opposite face is `oppositeFace`\n      //\n      //                ===>\n      //      \\         face         /\n      //       * ---- * ---- * ---- *\n      //      /     opposite face    \\\n      //                <===\n      //\n      var adjacentEdgePrev = adjacentEdge.prev;\n      var adjacentEdgeNext = adjacentEdge.next;\n      var oppositeEdgePrev = oppositeEdge.prev;\n      var oppositeEdgeNext = oppositeEdge.next;\n\n      // left edge\n      while (adjacentEdgePrev.opposite.face === oppositeFace) {\n        adjacentEdgePrev = adjacentEdgePrev.prev;\n        oppositeEdgeNext = oppositeEdgeNext.next;\n      }\n      // right edge\n      while (adjacentEdgeNext.opposite.face === oppositeFace) {\n        adjacentEdgeNext = adjacentEdgeNext.next;\n        oppositeEdgePrev = oppositeEdgePrev.prev;\n      }\n      // adjacentEdgePrev  \\         face         / adjacentEdgeNext\n      //                    * ---- * ---- * ---- *\n      // oppositeEdgeNext  /     opposite face    \\ oppositeEdgePrev\n\n      // fix the face reference of all the opposite edges that are not part of\n      // the edges whose opposite face is not `face` i.e. all the edges that\n      // `face` and `oppositeFace` do not have in common\n      var edge = void 0;\n      for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {\n        edge.face = this;\n      }\n\n      // make sure that `face.edge` is not one of the edges to be destroyed\n      // Note: it's important for it to be a `next` edge since `prev` edges\n      // might be destroyed on `connectHalfEdges`\n      this.edge = adjacentEdgeNext;\n\n      // connect the extremes\n      // Note: it might be possible that after connecting the edges a triangular\n      // face might be redundant\n      var discardedFace = void 0;\n      discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n      discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext);\n      if (discardedFace) {\n        discardedFaces.push(discardedFace);\n      }\n\n      this.computeNormalAndCentroid();\n      // TODO: additional consistency checks\n      return discardedFaces;\n    }\n  }, {\n    key: 'collectIndices',\n    value: function collectIndices() {\n      var indices = [];\n      var edge = this.edge;\n      do {\n        indices.push(edge.head().index);\n        edge = edge.next;\n      } while (edge !== this.edge);\n      return indices;\n    }\n  }], [{\n    key: 'createTriangle',\n    value: function createTriangle(v0, v1, v2) {\n      var minArea = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var face = new Face();\n      var e0 = new _HalfEdge2.default(v0, face);\n      var e1 = new _HalfEdge2.default(v1, face);\n      var e2 = new _HalfEdge2.default(v2, face);\n\n      // join edges\n      e0.next = e2.prev = e1;\n      e1.next = e0.prev = e2;\n      e2.next = e1.prev = e0;\n\n      // main half edge reference\n      face.edge = e0;\n      face.computeNormalAndCentroid(minArea);\n      if (debug.enabled) {\n        debug('face created %j', face.collectIndices());\n      }\n      return face;\n    }\n  }]);\n\n  return Face;\n}();\n\nexports[\"default\"] = Face;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/Face.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/HalfEdge.js":
/*!*******************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/HalfEdge.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _distance = __webpack_require__(/*! gl-vec3/distance */ \"../../node_modules/gl-vec3/distance.js\");\n\nvar _distance2 = _interopRequireDefault(_distance);\n\nvar _squaredDistance = __webpack_require__(/*! gl-vec3/squaredDistance */ \"../../node_modules/gl-vec3/squaredDistance.js\");\n\nvar _squaredDistance2 = _interopRequireDefault(_squaredDistance);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/quickhull3d/node_modules/debug/src/browser.js\")('halfedge');\n\nvar HalfEdge = function () {\n  function HalfEdge(vertex, face) {\n    _classCallCheck(this, HalfEdge);\n\n    this.vertex = vertex;\n    this.face = face;\n    this.next = null;\n    this.prev = null;\n    this.opposite = null;\n  }\n\n  _createClass(HalfEdge, [{\n    key: 'head',\n    value: function head() {\n      return this.vertex;\n    }\n  }, {\n    key: 'tail',\n    value: function tail() {\n      return this.prev ? this.prev.vertex : null;\n    }\n  }, {\n    key: 'length',\n    value: function length() {\n      if (this.tail()) {\n        return (0, _distance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'lengthSquared',\n    value: function lengthSquared() {\n      if (this.tail()) {\n        return (0, _squaredDistance2.default)(this.tail().point, this.head().point);\n      }\n      return -1;\n    }\n  }, {\n    key: 'setOpposite',\n    value: function setOpposite(edge) {\n      var me = this;\n      if (debug.enabled) {\n        debug('opposite ' + me.tail().index + ' <--> ' + me.head().index + ' between ' + me.face.collectIndices() + ', ' + edge.face.collectIndices());\n      }\n      this.opposite = edge;\n      edge.opposite = this;\n    }\n  }]);\n\n  return HalfEdge;\n}();\n\nexports[\"default\"] = HalfEdge;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL2Rpc3QvSGFsZkVkZ2UuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLGlDQUFpQywyQ0FBMkMsZ0JBQWdCLGtCQUFrQixPQUFPLDJCQUEyQix3REFBd0QsZ0NBQWdDLHVEQUF1RCwrREFBK0QseURBQXlELHFFQUFxRSw2REFBNkQsd0JBQXdCOztBQUVqakIsZ0JBQWdCLG1CQUFPLENBQUMsZ0VBQWtCOztBQUUxQzs7QUFFQSx1QkFBdUIsbUJBQU8sQ0FBQyw4RUFBeUI7O0FBRXhEOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFLGtEQUFrRCwwQ0FBMEM7O0FBRTVGLFlBQVksbUJBQU8sQ0FBQywrRUFBTzs7QUFFM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9xdWlja2h1bGwzZC9kaXN0L0hhbGZFZGdlLmpzPzgwOGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2Rpc3RhbmNlID0gcmVxdWlyZSgnZ2wtdmVjMy9kaXN0YW5jZScpO1xuXG52YXIgX2Rpc3RhbmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3RhbmNlKTtcblxudmFyIF9zcXVhcmVkRGlzdGFuY2UgPSByZXF1aXJlKCdnbC12ZWMzL3NxdWFyZWREaXN0YW5jZScpO1xuXG52YXIgX3NxdWFyZWREaXN0YW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zcXVhcmVkRGlzdGFuY2UpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdoYWxmZWRnZScpO1xuXG52YXIgSGFsZkVkZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEhhbGZFZGdlKHZlcnRleCwgZmFjZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYWxmRWRnZSk7XG5cbiAgICB0aGlzLnZlcnRleCA9IHZlcnRleDtcbiAgICB0aGlzLmZhY2UgPSBmYWNlO1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLm9wcG9zaXRlID0gbnVsbDtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhIYWxmRWRnZSwgW3tcbiAgICBrZXk6ICdoZWFkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGVhZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZlcnRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd0YWlsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdGFpbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZXYgPyB0aGlzLnByZXYudmVydGV4IDogbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdsZW5ndGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsZW5ndGgoKSB7XG4gICAgICBpZiAodGhpcy50YWlsKCkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZGlzdGFuY2UyLmRlZmF1bHQpKHRoaXMudGFpbCgpLnBvaW50LCB0aGlzLmhlYWQoKS5wb2ludCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbGVuZ3RoU3F1YXJlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgICBpZiAodGhpcy50YWlsKCkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfc3F1YXJlZERpc3RhbmNlMi5kZWZhdWx0KSh0aGlzLnRhaWwoKS5wb2ludCwgdGhpcy5oZWFkKCkucG9pbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldE9wcG9zaXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3Bwb3NpdGUoZWRnZSkge1xuICAgICAgdmFyIG1lID0gdGhpcztcbiAgICAgIGlmIChkZWJ1Zy5lbmFibGVkKSB7XG4gICAgICAgIGRlYnVnKCdvcHBvc2l0ZSAnICsgbWUudGFpbCgpLmluZGV4ICsgJyA8LS0+ICcgKyBtZS5oZWFkKCkuaW5kZXggKyAnIGJldHdlZW4gJyArIG1lLmZhY2UuY29sbGVjdEluZGljZXMoKSArICcsICcgKyBlZGdlLmZhY2UuY29sbGVjdEluZGljZXMoKSk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wcG9zaXRlID0gZWRnZTtcbiAgICAgIGVkZ2Uub3Bwb3NpdGUgPSB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIYWxmRWRnZTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gSGFsZkVkZ2U7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/HalfEdge.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/QuickHull.js":
/*!********************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/QuickHull.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _pointLineDistance = __webpack_require__(/*! point-line-distance */ \"../../node_modules/point-line-distance/index.js\");\n\nvar _pointLineDistance2 = _interopRequireDefault(_pointLineDistance);\n\nvar _getPlaneNormal = __webpack_require__(/*! get-plane-normal */ \"../../node_modules/get-plane-normal/index.js\");\n\nvar _getPlaneNormal2 = _interopRequireDefault(_getPlaneNormal);\n\nvar _dot = __webpack_require__(/*! gl-vec3/dot */ \"../../node_modules/gl-vec3/dot.js\");\n\nvar _dot2 = _interopRequireDefault(_dot);\n\nvar _VertexList = __webpack_require__(/*! ./VertexList */ \"../../node_modules/quickhull3d/dist/VertexList.js\");\n\nvar _VertexList2 = _interopRequireDefault(_VertexList);\n\nvar _Vertex = __webpack_require__(/*! ./Vertex */ \"../../node_modules/quickhull3d/dist/Vertex.js\");\n\nvar _Vertex2 = _interopRequireDefault(_Vertex);\n\nvar _Face = __webpack_require__(/*! ./Face */ \"../../node_modules/quickhull3d/dist/Face.js\");\n\nvar _Face2 = _interopRequireDefault(_Face);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar debug = __webpack_require__(/*! debug */ \"../../node_modules/quickhull3d/node_modules/debug/src/browser.js\")('quickhull');\n\n// merge types\n// non convex with respect to the large face\nvar MERGE_NON_CONVEX_WRT_LARGER_FACE = 1;\nvar MERGE_NON_CONVEX = 2;\n\nvar QuickHull = function () {\n  function QuickHull(points) {\n    _classCallCheck(this, QuickHull);\n\n    if (!Array.isArray(points)) {\n      throw TypeError('input is not a valid array');\n    }\n    if (points.length < 4) {\n      throw Error('cannot build a simplex out of <4 points');\n    }\n\n    this.tolerance = -1;\n\n    // buffers\n    this.nFaces = 0;\n    this.nPoints = points.length;\n\n    this.faces = [];\n    this.newFaces = [];\n    // helpers\n    //\n    // let `a`, `b` be `Face` instances\n    // let `v` be points wrapped as instance of `Vertex`\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n    this.claimed = new _VertexList2.default();\n    this.unclaimed = new _VertexList2.default();\n\n    // vertices of the hull(internal representation of points)\n    this.vertices = [];\n    for (var i = 0; i < points.length; i += 1) {\n      this.vertices.push(new _Vertex2.default(points[i], i));\n    }\n    this.discardedFaces = [];\n    this.vertexPointIndices = [];\n  }\n\n  _createClass(QuickHull, [{\n    key: 'addVertexToFace',\n    value: function addVertexToFace(vertex, face) {\n      vertex.face = face;\n      if (!face.outside) {\n        this.claimed.add(vertex);\n      } else {\n        this.claimed.insertBefore(face.outside, vertex);\n      }\n      face.outside = vertex;\n    }\n\n    /**\n     * Removes `vertex` for the `claimed` list of vertices, it also makes sure\n     * that the link from `face` to the first vertex it sees in `claimed` is\n     * linked correctly after the removal\n     *\n     * @param {Vertex} vertex\n     * @param {Face} face\n     */\n\n  }, {\n    key: 'removeVertexFromFace',\n    value: function removeVertexFromFace(vertex, face) {\n      if (vertex === face.outside) {\n        // fix face.outside link\n        if (vertex.next && vertex.next.face === face) {\n          // face has at least 2 outside vertices, move the `outside` reference\n          face.outside = vertex.next;\n        } else {\n          // vertex was the only outside vertex that face had\n          face.outside = null;\n        }\n      }\n      this.claimed.remove(vertex);\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see which are\n     * stored in the `claimed` vertext list\n     *\n     * @param {Face} face\n     * @return {Vertex|undefined} If face had visible vertices returns\n     * `face.outside`, otherwise undefined\n     */\n\n  }, {\n    key: 'removeAllVerticesFromFace',\n    value: function removeAllVerticesFromFace(face) {\n      if (face.outside) {\n        // pointer to the last vertex of this face\n        // [..., outside, ..., end, outside, ...]\n        //          |           |      |\n        //          a           a      b\n        var end = face.outside;\n        while (end.next && end.next.face === face) {\n          end = end.next;\n        }\n        this.claimed.removeChain(face.outside, end);\n        //                            b\n        //                       [ outside, ...]\n        //                            |  removes this link\n        //     [ outside, ..., end ] -┘\n        //          |           |\n        //          a           a\n        end.next = null;\n        return face.outside;\n      }\n    }\n\n    /**\n     * Removes all the visible vertices that `face` is able to see, additionally\n     * checking the following:\n     *\n     * If `absorbingFace` doesn't exist then all the removed vertices will be\n     * added to the `unclaimed` vertex list\n     *\n     * If `absorbingFace` exists then this method will assign all the vertices of\n     * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`\n     * it's added to the `unclaimed` vertex list\n     *\n     * @param {Face} face\n     * @param {Face} [absorbingFace]\n     */\n\n  }, {\n    key: 'deleteFaceVertices',\n    value: function deleteFaceVertices(face, absorbingFace) {\n      var faceVertices = this.removeAllVerticesFromFace(face);\n      if (faceVertices) {\n        if (!absorbingFace) {\n          // mark the vertices to be reassigned to some other face\n          this.unclaimed.addAll(faceVertices);\n        } else {\n          // if there's an absorbing face try to assign as many vertices\n          // as possible to it\n\n          // the reference `vertex.next` might be destroyed on\n          // `this.addVertexToFace` (see VertexList#add), nextVertex is a\n          // reference to it\n          var nextVertex = void 0;\n          for (var vertex = faceVertices; vertex; vertex = nextVertex) {\n            nextVertex = vertex.next;\n            var distance = absorbingFace.distanceToPlane(vertex.point);\n\n            // check if `vertex` is able to see `absorbingFace`\n            if (distance > this.tolerance) {\n              this.addVertexToFace(vertex, absorbingFace);\n            } else {\n              this.unclaimed.add(vertex);\n            }\n          }\n        }\n      }\n    }\n\n    /**\n     * Reassigns as many vertices as possible from the unclaimed list to the new\n     * faces\n     *\n     * @param {Faces[]} newFaces\n     */\n\n  }, {\n    key: 'resolveUnclaimedPoints',\n    value: function resolveUnclaimedPoints(newFaces) {\n      // cache next vertex so that if `vertex.next` is destroyed it's still\n      // recoverable\n      var vertexNext = this.unclaimed.first();\n      for (var vertex = vertexNext; vertex; vertex = vertexNext) {\n        vertexNext = vertex.next;\n        var maxDistance = this.tolerance;\n        var maxFace = void 0;\n        for (var i = 0; i < newFaces.length; i += 1) {\n          var face = newFaces[i];\n          if (face.mark === _Face.VISIBLE) {\n            var dist = face.distanceToPlane(vertex.point);\n            if (dist > maxDistance) {\n              maxDistance = dist;\n              maxFace = face;\n            }\n            if (maxDistance > 1000 * this.tolerance) {\n              break;\n            }\n          }\n        }\n\n        if (maxFace) {\n          this.addVertexToFace(vertex, maxFace);\n        }\n      }\n    }\n\n    /**\n     * Computes the extremes of a tetrahedron which will be the initial hull\n     *\n     * @return {number[]} The min/max vertices in the x,y,z directions\n     */\n\n  }, {\n    key: 'computeExtremes',\n    value: function computeExtremes() {\n      var me = this;\n      var min = [];\n      var max = [];\n\n      // min vertex on the x,y,z directions\n      var minVertices = [];\n      // max vertex on the x,y,z directions\n      var maxVertices = [];\n\n      var i = void 0,\n          j = void 0;\n\n      // initially assume that the first vertex is the min/max\n      for (i = 0; i < 3; i += 1) {\n        minVertices[i] = maxVertices[i] = this.vertices[0];\n      }\n      // copy the coordinates of the first vertex to min/max\n      for (i = 0; i < 3; i += 1) {\n        min[i] = max[i] = this.vertices[0].point[i];\n      }\n\n      // compute the min/max vertex on all 6 directions\n      for (i = 1; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        var point = vertex.point;\n        // update the min coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] < min[j]) {\n            min[j] = point[j];\n            minVertices[j] = vertex;\n          }\n        }\n        // update the max coordinates\n        for (j = 0; j < 3; j += 1) {\n          if (point[j] > max[j]) {\n            max[j] = point[j];\n            maxVertices[j] = vertex;\n          }\n        }\n      }\n\n      // compute epsilon\n      this.tolerance = 3 * Number.EPSILON * (Math.max(Math.abs(min[0]), Math.abs(max[0])) + Math.max(Math.abs(min[1]), Math.abs(max[1])) + Math.max(Math.abs(min[2]), Math.abs(max[2])));\n      if (debug.enabled) {\n        debug('tolerance %d', me.tolerance);\n      }\n      return [minVertices, maxVertices];\n    }\n\n    /**\n     * Compues the initial tetrahedron assigning to its faces all the points that\n     * are candidates to form part of the hull\n     */\n\n  }, {\n    key: 'createInitialSimplex',\n    value: function createInitialSimplex() {\n      var vertices = this.vertices;\n\n      var _computeExtremes = this.computeExtremes(),\n          _computeExtremes2 = _slicedToArray(_computeExtremes, 2),\n          min = _computeExtremes2[0],\n          max = _computeExtremes2[1];\n\n      var v0 = void 0,\n          v1 = void 0,\n          v2 = void 0,\n          v3 = void 0;\n      var i = void 0,\n          j = void 0;\n\n      // Find the two vertices with the greatest 1d separation\n      // (max.x - min.x)\n      // (max.y - min.y)\n      // (max.z - min.z)\n      var maxDistance = 0;\n      var indexMax = 0;\n      for (i = 0; i < 3; i += 1) {\n        var distance = max[i].point[i] - min[i].point[i];\n        if (distance > maxDistance) {\n          maxDistance = distance;\n          indexMax = i;\n        }\n      }\n      v0 = min[indexMax];\n      v1 = max[indexMax];\n\n      // the next vertex is the one farthest to the line formed by `v0` and `v1`\n      maxDistance = 0;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var vertex = this.vertices[i];\n        if (vertex !== v0 && vertex !== v1) {\n          var _distance = (0, _pointLineDistance2.default)(vertex.point, v0.point, v1.point);\n          if (_distance > maxDistance) {\n            maxDistance = _distance;\n            v2 = vertex;\n          }\n        }\n      }\n\n      // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`\n      // normalize((v2 - v1) x (v0 - v1))\n      var normal = (0, _getPlaneNormal2.default)([], v0.point, v1.point, v2.point);\n      // distance from the origin to the plane\n      var distPO = (0, _dot2.default)(v0.point, normal);\n      maxDistance = -1;\n      for (i = 0; i < this.vertices.length; i += 1) {\n        var _vertex = this.vertices[i];\n        if (_vertex !== v0 && _vertex !== v1 && _vertex !== v2) {\n          var _distance2 = Math.abs((0, _dot2.default)(normal, _vertex.point) - distPO);\n          if (_distance2 > maxDistance) {\n            maxDistance = _distance2;\n            v3 = _vertex;\n          }\n        }\n      }\n\n      // initial simplex\n      // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron\n      //\n      //                              v2\n      //                             ,|,\n      //                           ,7``\\'VA,\n      //                         ,7`   |, `'VA,\n      //                       ,7`     `\\    `'VA,\n      //                     ,7`        |,      `'VA,\n      //                   ,7`          `\\         `'VA,\n      //                 ,7`             |,           `'VA,\n      //               ,7`               `\\       ,..ooOOTK` v3\n      //             ,7`                  |,.ooOOT''`    AV\n      //           ,7`            ,..ooOOT`\\`           /7\n      //         ,7`      ,..ooOOT''`      |,          AV\n      //        ,T,..ooOOT''`              `\\         /7\n      //     v0 `'TTs.,                     |,       AV\n      //            `'TTs.,                 `\\      /7\n      //                 `'TTs.,             |,    AV\n      //                      `'TTs.,        `\\   /7\n      //                           `'TTs.,    |, AV\n      //                                `'TTs.,\\/7\n      //                                     `'T`\n      //                                       v1\n      //\n      var faces = [];\n      if ((0, _dot2.default)(v3.point, normal) - distPO < 0) {\n        // the face is not able to see the point so `planeNormal`\n        // is pointing outside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v1, v2), _Face2.default.createTriangle(v3, v1, v0), _Face2.default.createTriangle(v3, v2, v1), _Face2.default.createTriangle(v3, v0, v2));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(_j));\n          // join face[i] with face[i + 1], 1 <= i <= 3\n          faces[i + 1].getEdge(1).setOpposite(faces[_j + 1].getEdge(0));\n        }\n      } else {\n        // the face is able to see the point so `planeNormal`\n        // is pointing inside the tetrahedron\n        faces.push(_Face2.default.createTriangle(v0, v2, v1), _Face2.default.createTriangle(v3, v0, v1), _Face2.default.createTriangle(v3, v1, v2), _Face2.default.createTriangle(v3, v2, v0));\n\n        // set the opposite edge\n        for (i = 0; i < 3; i += 1) {\n          var _j2 = (i + 1) % 3;\n          // join face[i] i > 0, with the first face\n          faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3));\n          // join face[i] with face[i + 1]\n          faces[i + 1].getEdge(0).setOpposite(faces[_j2 + 1].getEdge(1));\n        }\n      }\n\n      // the initial hull is the tetrahedron\n      for (i = 0; i < 4; i += 1) {\n        this.faces.push(faces[i]);\n      }\n\n      // initial assignment of vertices to the faces of the tetrahedron\n      for (i = 0; i < vertices.length; i += 1) {\n        var _vertex2 = vertices[i];\n        if (_vertex2 !== v0 && _vertex2 !== v1 && _vertex2 !== v2 && _vertex2 !== v3) {\n          maxDistance = this.tolerance;\n          var maxFace = void 0;\n          for (j = 0; j < 4; j += 1) {\n            var _distance3 = faces[j].distanceToPlane(_vertex2.point);\n            if (_distance3 > maxDistance) {\n              maxDistance = _distance3;\n              maxFace = faces[j];\n            }\n          }\n\n          if (maxFace) {\n            this.addVertexToFace(_vertex2, maxFace);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'reindexFaceAndVertices',\n    value: function reindexFaceAndVertices() {\n      // remove inactive faces\n      var activeFaces = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        var face = this.faces[i];\n        if (face.mark === _Face.VISIBLE) {\n          activeFaces.push(face);\n        }\n      }\n      this.faces = activeFaces;\n    }\n  }, {\n    key: 'collectFaces',\n    value: function collectFaces(skipTriangulation) {\n      var faceIndices = [];\n      for (var i = 0; i < this.faces.length; i += 1) {\n        if (this.faces[i].mark !== _Face.VISIBLE) {\n          throw Error('attempt to include a destroyed face in the hull');\n        }\n        var indices = this.faces[i].collectIndices();\n        if (skipTriangulation) {\n          faceIndices.push(indices);\n        } else {\n          for (var j = 0; j < indices.length - 2; j += 1) {\n            faceIndices.push([indices[0], indices[j + 1], indices[j + 2]]);\n          }\n        }\n      }\n      return faceIndices;\n    }\n\n    /**\n     * Finds the next vertex to make faces with the current hull\n     *\n     * - let `face` be the first face existing in the `claimed` vertex list\n     *  - if `face` doesn't exist then return since there're no vertices left\n     *  - otherwise for each `vertex` that face sees find the one furthest away\n     *  from `face`\n     *\n     * @return {Vertex|undefined} Returns undefined when there're no more\n     * visible vertices\n     */\n\n  }, {\n    key: 'nextVertexToAdd',\n    value: function nextVertexToAdd() {\n      if (!this.claimed.isEmpty()) {\n        var eyeVertex = void 0,\n            vertex = void 0;\n        var maxDistance = 0;\n        var eyeFace = this.claimed.first().face;\n        for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {\n          var distance = eyeFace.distanceToPlane(vertex.point);\n          if (distance > maxDistance) {\n            maxDistance = distance;\n            eyeVertex = vertex;\n          }\n        }\n        return eyeVertex;\n      }\n    }\n\n    /**\n     * Computes a chain of half edges in ccw order called the `horizon`, for an\n     * edge to be part of the horizon it must join a face that can see\n     * `eyePoint` and a face that cannot see `eyePoint`\n     *\n     * @param {number[]} eyePoint - The coordinates of a point\n     * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`\n     * @param {Face} face - The current face being tested\n     * @param {HalfEdge[]} horizon - The edges that form part of the horizon in\n     * ccw order\n     */\n\n  }, {\n    key: 'computeHorizon',\n    value: function computeHorizon(eyePoint, crossEdge, face, horizon) {\n      // moves face's vertices to the `unclaimed` vertex list\n      this.deleteFaceVertices(face);\n\n      face.mark = _Face.DELETED;\n\n      var edge = void 0;\n      if (!crossEdge) {\n        edge = crossEdge = face.getEdge(0);\n      } else {\n        // start from the next edge since `crossEdge` was already analyzed\n        // (actually `crossEdge.opposite` was the face who called this method\n        // recursively)\n        edge = crossEdge.next;\n      }\n\n      // All the faces that are able to see `eyeVertex` are defined as follows\n      //\n      //       v    /\n      //           / <== visible face\n      //          /\n      //         |\n      //         | <== not visible face\n      //\n      //  dot(v, visible face normal) - visible face offset > this.tolerance\n      //\n      do {\n        var oppositeEdge = edge.opposite;\n        var oppositeFace = oppositeEdge.face;\n        if (oppositeFace.mark === _Face.VISIBLE) {\n          if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {\n            this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon);\n          } else {\n            horizon.push(edge);\n          }\n        }\n        edge = edge.next;\n      } while (edge !== crossEdge);\n    }\n\n    /**\n     * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and\n     * `horizonEdge.tail` in ccw order\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge} horizonEdge\n     * @return {HalfEdge} The half edge whose vertex is the eyeVertex\n     */\n\n  }, {\n    key: 'addAdjoiningFace',\n    value: function addAdjoiningFace(eyeVertex, horizonEdge) {\n      // all the half edges are created in ccw order thus the face is always\n      // pointing outside the hull\n      // edges:\n      //\n      //                  eyeVertex.point\n      //                       / \\\n      //                      /   \\\n      //                  1  /     \\  0\n      //                    /       \\\n      //                   /         \\\n      //                  /           \\\n      //          horizon.tail --- horizon.head\n      //                        2\n      //\n      var face = _Face2.default.createTriangle(eyeVertex, horizonEdge.tail(), horizonEdge.head());\n      this.faces.push(face);\n      // join face.getEdge(-1) with the horizon's opposite edge\n      // face.getEdge(-1) = face.getEdge(2)\n      face.getEdge(-1).setOpposite(horizonEdge.opposite);\n      return face.getEdge(0);\n    }\n\n    /**\n     * Adds horizon.length faces to the hull, each face will be 'linked' with the\n     * horizon opposite face and the face on the left/right\n     *\n     * @param {Vertex} eyeVertex\n     * @param {HalfEdge[]} horizon - A chain of half edges in ccw order\n     */\n\n  }, {\n    key: 'addNewFaces',\n    value: function addNewFaces(eyeVertex, horizon) {\n      this.newFaces = [];\n      var firstSideEdge = void 0,\n          previousSideEdge = void 0;\n      for (var i = 0; i < horizon.length; i += 1) {\n        var horizonEdge = horizon[i];\n        // returns the right side edge\n        var sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge);\n        if (!firstSideEdge) {\n          firstSideEdge = sideEdge;\n        } else {\n          // joins face.getEdge(1) with previousFace.getEdge(0)\n          sideEdge.next.setOpposite(previousSideEdge);\n        }\n        this.newFaces.push(sideEdge.face);\n        previousSideEdge = sideEdge;\n      }\n      firstSideEdge.next.setOpposite(previousSideEdge);\n    }\n\n    /**\n     * Computes the distance from `edge` opposite face's centroid to\n     * `edge.face`\n     *\n     * @param {HalfEdge} edge\n     * @return {number}\n     * - A positive number when the centroid of the opposite face is above the\n     *   face i.e. when the faces are concave\n     * - A negative number when the centroid of the opposite face is below the\n     *   face i.e. when the faces are convex\n     */\n\n  }, {\n    key: 'oppositeFaceDistance',\n    value: function oppositeFaceDistance(edge) {\n      return edge.face.distanceToPlane(edge.opposite.face.centroid);\n    }\n\n    /**\n     * Merges a face with none/any/all its neighbors according to the strategy\n     * used\n     *\n     * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be\n     * decided based on the face with the larger area, the centroid of the face\n     * with the smaller area will be checked against the one with the larger area\n     * to see if it's in the merge range [tolerance, -tolerance] i.e.\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *\n     * Note that the first check (with +tolerance) was done on `computeHorizon`\n     *\n     * If the above is not true then the check is done with respect to the smaller\n     * face i.e.\n     *\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * If true then it means that two faces are non convex (concave), even if the\n     * dot(...) - offset value is > 0 (that's the point of doing the merge in the\n     * first place)\n     *\n     * If two faces are concave then the check must also be done on the other face\n     * but this is done in another merge pass, for this to happen the face is\n     * marked in a temporal NON_CONVEX state\n     *\n     * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if\n     * they pass the following conditions\n     *\n     *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n     *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n     *\n     * @param {Face} face\n     * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or\n     * MERGE_NON_CONVEX\n     */\n\n  }, {\n    key: 'doAdjacentMerge',\n    value: function doAdjacentMerge(face, mergeType) {\n      var edge = face.edge;\n      var convex = true;\n      var it = 0;\n      do {\n        if (it >= face.nVertices) {\n          throw Error('merge recursion limit exceeded');\n        }\n        var oppositeFace = edge.opposite.face;\n        var merge = false;\n\n        // Important notes about the algorithm to merge faces\n        //\n        // - Given a vertex `eyeVertex` that will be added to the hull\n        //   all the faces that cannot see `eyeVertex` are defined as follows\n        //\n        //      dot(v, not visible face normal) - not visible offset < tolerance\n        //\n        // - Two faces can be merged when the centroid of one of these faces\n        // projected to the normal of the other face minus the other face offset\n        // is in the range [tolerance, -tolerance]\n        // - Since `face` (given in the input for this method) has passed the\n        // check above we only have to check the lower bound e.g.\n        //\n        //      dot(v, not visible face normal) - not visible offset > -tolerance\n        //\n        if (mergeType === MERGE_NON_CONVEX) {\n          if (this.oppositeFaceDistance(edge) > -this.tolerance || this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            merge = true;\n          }\n        } else {\n          if (face.area > oppositeFace.area) {\n            if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              convex = false;\n            }\n          } else {\n            if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n              merge = true;\n            } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n              convex = false;\n            }\n          }\n        }\n\n        if (merge) {\n          debug('face merge');\n          // when two faces are merged it might be possible that redundant faces\n          // are destroyed, in that case move all the visible vertices from the\n          // destroyed faces to the `unclaimed` vertex list\n          var discardedFaces = face.mergeAdjacentFaces(edge, []);\n          for (var i = 0; i < discardedFaces.length; i += 1) {\n            this.deleteFaceVertices(discardedFaces[i], face);\n          }\n          return true;\n        }\n\n        edge = edge.next;\n        it += 1;\n      } while (edge !== face.edge);\n      if (!convex) {\n        face.mark = _Face.NON_CONVEX;\n      }\n      return false;\n    }\n\n    /**\n     * Adds a vertex to the hull with the following algorithm\n     *\n     * - Compute the `horizon` which is a chain of half edges, for an edge to\n     *   belong to this group it must be the edge connecting a face that can\n     *   see `eyeVertex` and a face which cannot see `eyeVertex`\n     * - All the faces that can see `eyeVertex` have its visible vertices removed\n     *   from the claimed VertexList\n     * - A new set of faces is created with each edge of the `horizon` and\n     *   `eyeVertex`, each face is connected with the opposite horizon face and\n     *   the face on the left/right\n     * - The new faces are merged if possible with the opposite horizon face first\n     *   and then the faces on the right/left\n     * - The vertices removed from all the visible faces are assigned to the new\n     *   faces if possible\n     *\n     * @param {Vertex} eyeVertex\n     */\n\n  }, {\n    key: 'addVertexToHull',\n    value: function addVertexToHull(eyeVertex) {\n      var horizon = [];\n\n      this.unclaimed.clear();\n\n      // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the\n      // `unclaimed` vertex list\n      this.removeVertexFromFace(eyeVertex, eyeVertex.face);\n      this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon);\n      if (debug.enabled) {\n        debug('horizon %j', horizon.map(function (edge) {\n          return edge.head().index;\n        }));\n      }\n      this.addNewFaces(eyeVertex, horizon);\n\n      debug('first merge');\n\n      // first merge pass\n      // Do the merge with respect to the larger face\n      for (var i = 0; i < this.newFaces.length; i += 1) {\n        var face = this.newFaces[i];\n        if (face.mark === _Face.VISIBLE) {\n          while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {}\n        }\n      }\n\n      debug('second merge');\n\n      // second merge pass\n      // Do the merge on non convex faces (a face is marked as non convex in the\n      // first pass)\n      for (var _i = 0; _i < this.newFaces.length; _i += 1) {\n        var _face = this.newFaces[_i];\n        if (_face.mark === _Face.NON_CONVEX) {\n          _face.mark = _Face.VISIBLE;\n          while (this.doAdjacentMerge(_face, MERGE_NON_CONVEX)) {}\n        }\n      }\n\n      debug('reassigning points to newFaces');\n      // reassign `unclaimed` vertices to the new faces\n      this.resolveUnclaimedPoints(this.newFaces);\n    }\n  }, {\n    key: 'build',\n    value: function build() {\n      var iterations = 0;\n      var eyeVertex = void 0;\n      this.createInitialSimplex();\n      while (eyeVertex = this.nextVertexToAdd()) {\n        iterations += 1;\n        debug('== iteration %j ==', iterations);\n        debug('next vertex to add = %d %j', eyeVertex.index, eyeVertex.point);\n        this.addVertexToHull(eyeVertex);\n        debug('end');\n      }\n      this.reindexFaceAndVertices();\n    }\n  }]);\n\n  return QuickHull;\n}();\n\nexports[\"default\"] = QuickHull;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/QuickHull.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/Vertex.js":
/*!*****************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/Vertex.js ***!
  \*****************************************************/
/***/ (function(module, exports) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Vertex = function Vertex(point, index) {\n  _classCallCheck(this, Vertex);\n\n  this.point = point;\n  // index in the input array\n  this.index = index;\n  // vertex is a double linked list node\n  this.next = null;\n  this.prev = null;\n  // the face that is able to see this point\n  this.face = null;\n};\n\nexports[\"default\"] = Vertex;\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL2Rpc3QvVmVydGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQzs7QUFFRixrREFBa0QsMENBQTBDOztBQUU1RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvcXVpY2todWxsM2QvZGlzdC9WZXJ0ZXguanM/Y2JhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFZlcnRleCA9IGZ1bmN0aW9uIFZlcnRleChwb2ludCwgaW5kZXgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZlcnRleCk7XG5cbiAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAvLyBpbmRleCBpbiB0aGUgaW5wdXQgYXJyYXlcbiAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAvLyB2ZXJ0ZXggaXMgYSBkb3VibGUgbGlua2VkIGxpc3Qgbm9kZVxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLnByZXYgPSBudWxsO1xuICAvLyB0aGUgZmFjZSB0aGF0IGlzIGFibGUgdG8gc2VlIHRoaXMgcG9pbnRcbiAgdGhpcy5mYWNlID0gbnVsbDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZlcnRleDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/Vertex.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/VertexList.js":
/*!*********************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/VertexList.js ***!
  \*********************************************************/
/***/ (function(module, exports) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VertexList = function () {\n  function VertexList() {\n    _classCallCheck(this, VertexList);\n\n    this.head = null;\n    this.tail = null;\n  }\n\n  _createClass(VertexList, [{\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n    }\n\n    /**\n     * Inserts a `node` before `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {*} target\n     * @param {*} node\n     */\n\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(target, node) {\n      node.prev = target.prev;\n      node.next = target;\n      if (!node.prev) {\n        this.head = node;\n      } else {\n        node.prev.next = node;\n      }\n      target.prev = node;\n    }\n\n    /**\n     * Inserts a `node` after `target`, it's assumed that\n     * `target` belongs to this doubly linked list\n     *\n     * @param {Vertex} target\n     * @param {Vertex} node\n     */\n\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(target, node) {\n      node.prev = target;\n      node.next = target.next;\n      if (!node.next) {\n        this.tail = node;\n      } else {\n        node.next.prev = node;\n      }\n      target.next = node;\n    }\n\n    /**\n     * Appends a `node` to the end of this doubly linked list\n     * Note: `node.next` will be unlinked from `node`\n     * Note: if `node` is part of another linked list call `addAll` instead\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n      // since node is the new end it doesn't have a next node\n      node.next = null;\n      this.tail = node;\n    }\n\n    /**\n     * Appends a chain of nodes where `node` is the head,\n     * the difference with `add` is that it correctly sets the position\n     * of the node list `tail` property\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(node) {\n      if (!this.head) {\n        this.head = node;\n      } else {\n        this.tail.next = node;\n      }\n      node.prev = this.tail;\n\n      // find the end of the list\n      while (node.next) {\n        node = node.next;\n      }\n      this.tail = node;\n    }\n\n    /**\n     * Deletes a `node` from this linked list, it's assumed that `node` is a\n     * member of this linked list\n     *\n     * @param {*} node\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (!node.prev) {\n        this.head = node.next;\n      } else {\n        node.prev.next = node.next;\n      }\n\n      if (!node.next) {\n        this.tail = node.prev;\n      } else {\n        node.next.prev = node.prev;\n      }\n    }\n\n    /**\n     * Removes a chain of nodes whose head is `a` and whose tail is `b`,\n     * it's assumed that `a` and `b` belong to this list and also that `a`\n     * comes before `b` in the linked list\n     *\n     * @param {*} a\n     * @param {*} b\n     */\n\n  }, {\n    key: \"removeChain\",\n    value: function removeChain(a, b) {\n      if (!a.prev) {\n        this.head = b.next;\n      } else {\n        a.prev.next = b.next;\n      }\n\n      if (!b.next) {\n        this.tail = a.prev;\n      } else {\n        b.next.prev = a.prev;\n      }\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !this.head;\n    }\n  }]);\n\n  return VertexList;\n}();\n\nexports[\"default\"] = VertexList;\nmodule.exports = exports[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL2Rpc3QvVmVydGV4TGlzdC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYiw4Q0FBNkM7QUFDN0M7QUFDQSxDQUFDLEVBQUM7O0FBRUYsaUNBQWlDLDJDQUEyQyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVELCtEQUErRCx5REFBeUQscUVBQXFFLDZEQUE2RCx3QkFBd0I7O0FBRWpqQixrREFBa0QsMENBQTBDOztBQUU1RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZUFBZSxHQUFHO0FBQ2xCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsR0FBRztBQUNsQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCLGVBQWUsR0FBRztBQUNsQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9xdWlja2h1bGwzZC9kaXN0L1ZlcnRleExpc3QuanM/NDgzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFZlcnRleExpc3QgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZlcnRleExpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZlcnRleExpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZlcnRleExpc3QsIFt7XG4gICAga2V5OiBcImNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIGEgYG5vZGVgIGJlZm9yZSBgdGFyZ2V0YCwgaXQncyBhc3N1bWVkIHRoYXRcbiAgICAgKiBgdGFyZ2V0YCBiZWxvbmdzIHRvIHRoaXMgZG91Ymx5IGxpbmtlZCBsaXN0XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7Kn0gbm9kZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0QmVmb3JlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydEJlZm9yZSh0YXJnZXQsIG5vZGUpIHtcbiAgICAgIG5vZGUucHJldiA9IHRhcmdldC5wcmV2O1xuICAgICAgbm9kZS5uZXh0ID0gdGFyZ2V0O1xuICAgICAgaWYgKCFub2RlLnByZXYpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICAgIHRhcmdldC5wcmV2ID0gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIGEgYG5vZGVgIGFmdGVyIGB0YXJnZXRgLCBpdCdzIGFzc3VtZWQgdGhhdFxuICAgICAqIGB0YXJnZXRgIGJlbG9uZ3MgdG8gdGhpcyBkb3VibHkgbGlua2VkIGxpc3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7VmVydGV4fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge1ZlcnRleH0gbm9kZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5zZXJ0QWZ0ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIodGFyZ2V0LCBub2RlKSB7XG4gICAgICBub2RlLnByZXYgPSB0YXJnZXQ7XG4gICAgICBub2RlLm5leHQgPSB0YXJnZXQubmV4dDtcbiAgICAgIGlmICghbm9kZS5uZXh0KSB7XG4gICAgICAgIHRoaXMudGFpbCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGU7XG4gICAgICB9XG4gICAgICB0YXJnZXQubmV4dCA9IG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kcyBhIGBub2RlYCB0byB0aGUgZW5kIG9mIHRoaXMgZG91Ymx5IGxpbmtlZCBsaXN0XG4gICAgICogTm90ZTogYG5vZGUubmV4dGAgd2lsbCBiZSB1bmxpbmtlZCBmcm9tIGBub2RlYFxuICAgICAqIE5vdGU6IGlmIGBub2RlYCBpcyBwYXJ0IG9mIGFub3RoZXIgbGlua2VkIGxpc3QgY2FsbCBgYWRkQWxsYCBpbnN0ZWFkXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IG5vZGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFkZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQobm9kZSkge1xuICAgICAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUucHJldiA9IHRoaXMudGFpbDtcbiAgICAgIC8vIHNpbmNlIG5vZGUgaXMgdGhlIG5ldyBlbmQgaXQgZG9lc24ndCBoYXZlIGEgbmV4dCBub2RlXG4gICAgICBub2RlLm5leHQgPSBudWxsO1xuICAgICAgdGhpcy50YWlsID0gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGEgY2hhaW4gb2Ygbm9kZXMgd2hlcmUgYG5vZGVgIGlzIHRoZSBoZWFkLFxuICAgICAqIHRoZSBkaWZmZXJlbmNlIHdpdGggYGFkZGAgaXMgdGhhdCBpdCBjb3JyZWN0bHkgc2V0cyB0aGUgcG9zaXRpb25cbiAgICAgKiBvZiB0aGUgbm9kZSBsaXN0IGB0YWlsYCBwcm9wZXJ0eVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBub2RlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJhZGRBbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQWxsKG5vZGUpIHtcbiAgICAgIGlmICghdGhpcy5oZWFkKSB7XG4gICAgICAgIHRoaXMuaGVhZCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlLnByZXYgPSB0aGlzLnRhaWw7XG5cbiAgICAgIC8vIGZpbmQgdGhlIGVuZCBvZiB0aGUgbGlzdFxuICAgICAgd2hpbGUgKG5vZGUubmV4dCkge1xuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgfVxuICAgICAgdGhpcy50YWlsID0gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGVzIGEgYG5vZGVgIGZyb20gdGhpcyBsaW5rZWQgbGlzdCwgaXQncyBhc3N1bWVkIHRoYXQgYG5vZGVgIGlzIGFcbiAgICAgKiBtZW1iZXIgb2YgdGhpcyBsaW5rZWQgbGlzdFxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBub2RlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5wcmV2KSB7XG4gICAgICAgIHRoaXMuaGVhZCA9IG5vZGUubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5vZGUubmV4dCkge1xuICAgICAgICB0aGlzLnRhaWwgPSBub2RlLnByZXY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgY2hhaW4gb2Ygbm9kZXMgd2hvc2UgaGVhZCBpcyBgYWAgYW5kIHdob3NlIHRhaWwgaXMgYGJgLFxuICAgICAqIGl0J3MgYXNzdW1lZCB0aGF0IGBhYCBhbmQgYGJgIGJlbG9uZyB0byB0aGlzIGxpc3QgYW5kIGFsc28gdGhhdCBgYWBcbiAgICAgKiBjb21lcyBiZWZvcmUgYGJgIGluIHRoZSBsaW5rZWQgbGlzdFxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBhXG4gICAgICogQHBhcmFtIHsqfSBiXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVDaGFpblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVDaGFpbihhLCBiKSB7XG4gICAgICBpZiAoIWEucHJldikge1xuICAgICAgICB0aGlzLmhlYWQgPSBiLm5leHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhLnByZXYubmV4dCA9IGIubmV4dDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFiLm5leHQpIHtcbiAgICAgICAgdGhpcy50YWlsID0gYS5wcmV2O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5uZXh0LnByZXYgPSBhLnByZXY7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpcnN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpcnN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGVhZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNFbXB0eVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgcmV0dXJuICF0aGlzLmhlYWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZlcnRleExpc3Q7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFZlcnRleExpc3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/VertexList.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/dist/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/quickhull3d/dist/index.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = runner;\n\nvar _QuickHull = __webpack_require__(/*! ./QuickHull */ \"../../node_modules/quickhull3d/dist/QuickHull.js\");\n\nvar _QuickHull2 = _interopRequireDefault(_QuickHull);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction runner(points) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var instance = new _QuickHull2.default(points);\n  instance.build();\n  return instance.collectFaces(options.skipTriangulation);\n}\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL2Rpc3QvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0Ysa0JBQWU7O0FBRWYsaUJBQWlCLG1CQUFPLENBQUMscUVBQWE7O0FBRXRDOztBQUVBLHVDQUF1Qyx1Q0FBdUM7O0FBRTlFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL2Rpc3QvaW5kZXguanM/ODBhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBydW5uZXI7XG5cbnZhciBfUXVpY2tIdWxsID0gcmVxdWlyZSgnLi9RdWlja0h1bGwnKTtcblxudmFyIF9RdWlja0h1bGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUXVpY2tIdWxsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcnVubmVyKHBvaW50cykge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgdmFyIGluc3RhbmNlID0gbmV3IF9RdWlja0h1bGwyLmRlZmF1bHQocG9pbnRzKTtcbiAgaW5zdGFuY2UuYnVpbGQoKTtcbiAgcmV0dXJuIGluc3RhbmNlLmNvbGxlY3RGYWNlcyhvcHRpb25zLnNraXBUcmlhbmd1bGF0aW9uKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/dist/index.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/node_modules/debug/src/browser.js":
/*!************************************************************************!*\
  !*** ../../node_modules/quickhull3d/node_modules/debug/src/browser.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* provided dependency */ var process = __webpack_require__(/*! process */ \"../../node_modules/process/browser.js\");\n\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"../../node_modules/quickhull3d/node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7O0FBRWIsd0JBQXdCLDJFQUEyRSxrQ0FBa0Msd0JBQXdCLE9BQU8sa0NBQWtDLG1JQUFtSTs7QUFFelU7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLGtCQUFrQjtBQUNsQixZQUFZO0FBQ1osWUFBWTtBQUNaLGlCQUFpQjtBQUNqQixlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJLGlCQUFpQjtBQUNyQjtBQUNBOzs7QUFHQSxtQkFBbUIsT0FBTyw2QkFBNkIsT0FBTztBQUM5RCxRQUFRLE9BQU87QUFDZjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksZUFBZTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFPLENBQUMsaUZBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcz85OWRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSBsb2NhbHN0b3JhZ2UoKTtcbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gWycjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJywgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLCAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJywgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLCAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JywgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLCAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJywgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ107XG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cblxuXG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXG5cbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSB8fCAvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8IHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkgfHwgLy8gSXMgZmlyZWZveCA+PSB2MzE/XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxIHx8IC8vIERvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLyk7XG59XG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIGFyZ3NbMF0gPSAodGhpcy51c2VDb2xvcnMgPyAnJWMnIDogJycpICsgdGhpcy5uYW1lc3BhY2UgKyAodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgKyBhcmdzWzBdICsgKHRoaXMudXNlQ29sb3JzID8gJyVjICcgOiAnICcpICsgJysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKTsgLy8gVGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cblxuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgaWYgKG1hdGNoID09PSAnJSUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5kZXgrKztcblxuICAgIGlmIChtYXRjaCA9PT0gJyVjJykge1xuICAgICAgLy8gV2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgX2NvbnNvbGU7XG5cbiAgLy8gVGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICh0eXBlb2YgY29uc29sZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGNvbnNvbGUpKSA9PT0gJ29iamVjdCcgJiYgY29uc29sZS5sb2cgJiYgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xufVxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnNldEl0ZW0oJ2RlYnVnJywgbmFtZXNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHsvLyBTd2FsbG93XG4gICAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIH1cbn1cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcblxuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZ2V0SXRlbSgnZGVidWcnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHt9IC8vIFN3YWxsb3dcbiAgLy8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblxuXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICAvLyBUVk1MS2l0IChBcHBsZSBUViBKUyBSdW50aW1lKSBkb2VzIG5vdCBoYXZlIGEgd2luZG93IG9iamVjdCwganVzdCBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0XG4gICAgLy8gVGhlIEJyb3dzZXIgYWxzbyBoYXMgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dC5cbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlcnJvcikgey8vIFN3YWxsb3dcbiAgICAvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY29tbW9uJykoZXhwb3J0cyk7XG52YXIgZm9ybWF0dGVycyA9IG1vZHVsZS5leHBvcnRzLmZvcm1hdHRlcnM7XG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbiAodikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyb3IubWVzc2FnZTtcbiAgfVxufTtcblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "../../node_modules/quickhull3d/node_modules/debug/src/common.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/quickhull3d/node_modules/debug/src/common.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"../../node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @api public\n  */\n\n\n  function disable() {\n    createDebug.enable('');\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzL3F1aWNraHVsbDNkL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvY29tbW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQU8sQ0FBQywwQ0FBSTtBQUNyQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBFQUEwRSxhQUFhO0FBQ3ZGO0FBQ0E7O0FBRUEsd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFROzs7QUFHUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLEdBQUc7O0FBRVY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixrQ0FBa0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsYUFBYTtBQUNiO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0RBQWdELFNBQVM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0RBQWdELFNBQVM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixhQUFhO0FBQ2I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uL25vZGVfbW9kdWxlcy9xdWlja2h1bGwzZC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcz82Y2NiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuICBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuICBjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG4gIGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcbiAgY3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG4gIGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcbiAgY3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gIGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcbiAgT2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG4gIH0pO1xuICAvKipcbiAgKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gICovXG5cbiAgY3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG4gIC8qKlxuICAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gIC8qKlxuICAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAgKlxuICAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG4gIC8qKlxuICAqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2VcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG4gICogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cbiAgZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gICAgdmFyIGhhc2ggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuICB9XG5cbiAgY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcbiAgLyoqXG4gICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gICogQHJldHVybiB7RnVuY3Rpb259XG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcbiAgICB2YXIgcHJldlRpbWU7XG5cbiAgICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIC8vIERpc2FibGVkP1xuICAgICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxmID0gZGVidWc7IC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cbiAgICAgIHZhciBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuICAgICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgICAgcHJldlRpbWUgPSBjdXJyO1xuICAgICAgYXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgICB9IC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cblxuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbiAobWF0Y2gsIGZvcm1hdCkge1xuICAgICAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykge1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHZhciBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpOyAvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cbiAgICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pOyAvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXG4gICAgICBjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG4gICAgICB2YXIgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG4gICAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgICBkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcbiAgICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gICAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgZGVidWcuZXh0ZW5kID0gZXh0ZW5kOyAvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbiAgICAvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG4gICAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblxuICAgIGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG4gICAgfVxuXG4gICAgY3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuICAgIHJldHVybiBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuICB9XG4gIC8qKlxuICAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAgKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgICBjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuICAgIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gICAgY3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICAgIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghc3BsaXRbaV0pIHtcbiAgICAgICAgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG4gICAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICAgIGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG4gICAgICBpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAgKlxuICAqIEBhcGkgcHVibGljXG4gICovXG5cblxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG4gIH1cbiAgLyoqXG4gICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqIEBhcGkgcHVibGljXG4gICovXG5cblxuICBmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICogQ29lcmNlIGB2YWxgLlxuICAqXG4gICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICogQHJldHVybiB7TWl4ZWR9XG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cblxuICBmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcbiAgcmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../node_modules/quickhull3d/node_modules/debug/src/common.js\n");

/***/ })

});